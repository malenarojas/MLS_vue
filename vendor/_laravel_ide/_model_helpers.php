<?php

namespace App\Models {

	/**
	 * App\Models\Agent
	 *
	 * @property string|null $landline_phone
	 * @property string|null $address
	 * @property string|null $rejectionReason
	 * @property mixed $agent_status_id
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $contact_id
	 * @property string|null $id_business_agent
	 * @property string|null $nro_internacional_remax
	 * @property float|null $commission_percentage
	 * @property string|null $deactivation_date
	 * @property string|null $meta_tag_keywords
	 * @property string|null $bullet_point_three
	 * @property string|null $bullet_point_two
	 * @property string|null $bullet_point_one
	 * @property string|null $meta_tag_description
	 * @property array|null $countries_interested
	 * @property string|null $website_descripction
	 * @property string|null $marketing_slogan
	 * @property string|null $license_number
	 * @property string|null $expiration_date_license
	 * @property string|null $year_obtained_license
	 * @property string|null $license_department
	 * @property string|null $license_type
	 * @property string|null $previous_occupation
	 * @property string|null $image_name
	 * @property string|null $additional_education
	 * @property string|null $studies
	 * @property string|null $date_termination
	 * @property string|null $date_joined
	 * @property mixed $office_id
	 * @property mixed $user_id
	 * @property mixed $region_id
	 * @property string|null $agent_internal_id
	 * @property int $id
	 * @property-read mixed $image_url
	 * @property-read \App\Models\AgentStatus $agentStatus
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AuditLog> $auditLogs
	 * @property-read int|null $auditLogs_count
	 * @property-read \App\Models\Contact $contact
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $listings
	 * @property-read int|null $listings_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
	 * @property-read int|null $transactions_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $guest_listings
	 * @property-read int|null $guest_listings_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SocialNetwork> $socialNetworks
	 * @property-read int|null $socialNetworks_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Qualification> $qualification
	 * @property-read int|null $qualification_count
	 * @property-read \App\Models\User $user
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $officestranfered
	 * @property-read int|null $officestranfered_count
	 * @property-read \App\Models\Office $office
	 * @property-read \App\Models\Region $region
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Goal> $goals
	 * @property-read int|null $goals_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Documentation> $documentation
	 * @property-read int|null $documentation_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TeamManagement> $teams
	 * @property-read int|null $teams_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAgentInternalId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereRegionId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereOfficeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereDateJoined($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereDateTermination($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereStudies($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAdditionalEducation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereImageName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent wherePreviousOccupation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereLicenseType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereLicenseDepartment($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereYearObtainedLicense($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereExpirationDateLicense($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereLicenseNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereMarketingSlogan($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereWebsiteDescripction($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereCountriesInterested($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereMetaTagDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereBulletPointOne($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereBulletPointTwo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereBulletPointThree($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereMetaTagKeywords($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereDeactivationDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereCommissionPercentage($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNroInternacionalRemax($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereIdBusinessAgent($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereContactId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAgentStatusId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereRejectionreason($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereLandlinePhone($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Agent|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Agent|null first(array|string $columns)
	 * @method static Agent firstOrFail(array|string $columns, string|null $message)
	 * @method static Agent sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Agent>|Agent tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Agent extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AccessRule
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $resource_id
	 * @property string $resource_type
	 * @property string $access_type
	 * @property string $value
	 * @property string $type
	 * @property int $id
	 * @property-read \App\Models\AccessRule $resource
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereAccessType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereResourceType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereResourceId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AccessRule|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AccessRule|null first(array|string $columns)
	 * @method static AccessRule firstOrFail(array|string $columns, string|null $message)
	 * @method static AccessRule sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AccessRule>|AccessRule tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AccessRule extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Achievement
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $achievement_description
	 * @property string $name_achievements
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
	 * @property-read int|null $users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNameAchievements($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereAchievementDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Achievement|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Achievement|null first(array|string $columns)
	 * @method static Achievement firstOrFail(array|string $columns, string|null $message)
	 * @method static Achievement sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Achievement>|Achievement tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Achievement extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AchievementOffice
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $image
	 * @property string $achievement_description
	 * @property string $name_achievements
	 * @property int $id
	 * @property-read mixed $image_url
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AchievementOfficePivot> $officeRelations
	 * @property-read int|null $officeRelations_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $offices
	 * @property-read int|null $offices_count
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNameAchievements($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereAchievementDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereImage($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AchievementOffice|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AchievementOffice|null first(array|string $columns)
	 * @method static AchievementOffice firstOrFail(array|string $columns, string|null $message)
	 * @method static AchievementOffice sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOffice>|AchievementOffice tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AchievementOffice extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AchievementOfficePivot
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $office_id
	 * @property mixed $achievement_id
	 * @property bool $enable_achievement
	 * @property string|null $achievement_date
	 * @property int $id
	 * @property-read \App\Models\AchievementOffice $achievement
	 * @property-read \App\Models\Office $office
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereAchievementDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereEnableAchievement($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereAchievementId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereOfficeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AchievementOfficePivot|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AchievementOfficePivot|null first(array|string $columns)
	 * @method static AchievementOfficePivot firstOrFail(array|string $columns, string|null $message)
	 * @method static AchievementOfficePivot sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementOfficePivot>|AchievementOfficePivot tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AchievementOfficePivot extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AchievementUser
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $user_id
	 * @property mixed $achievement_id
	 * @property mixed $enable_achievement
	 * @property string|null $achievement_date
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereAchievementDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereEnableAchievement($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereAchievementId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AchievementUser|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AchievementUser|null first(array|string $columns)
	 * @method static AchievementUser firstOrFail(array|string $columns, string|null $message)
	 * @method static AchievementUser sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AchievementUser>|AchievementUser tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AchievementUser extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Activity
	 *
	 * @property mixed $agenda_legends_id
	 * @property mixed $type_actividad_id
	 * @property bool $all_day_event
	 * @property string|null $end_date_time
	 * @property string|null $end_date
	 * @property string $start_date_time
	 * @property string $start_date
	 * @property string|null $grades
	 * @property string|null $description
	 * @property string $affair
	 * @property int $id
	 * @property-read \App\Models\TypeActivity $typeActividad
	 * @property-read \App\Models\AgendaLegend $agendaLegend
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereAffair($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereGrades($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereStartDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereStartDateTime($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereEndDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereEndDateTime($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereAllDayEvent($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereTypeActividadId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereAgendaLegendsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Activity|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Activity|null first(array|string $columns)
	 * @method static Activity firstOrFail(array|string $columns, string|null $message)
	 * @method static Activity sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Activity>|Activity tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Activity extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ActivityListing
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ActivityListing|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ActivityListing|null first(array|string $columns)
	 * @method static ActivityListing firstOrFail(array|string $columns, string|null $message)
	 * @method static ActivityListing sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ActivityListing>|ActivityListing tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ActivityListing extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AdditionalPayments
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $listing_id
	 * @property mixed $type_additional_payment_id
	 * @property string $note
	 * @property string $payment_term
	 * @property float $amount
	 * @property int $id
	 * @property-read \App\Models\TypeAdditionalPayments $type_additional_payment
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereAmount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments wherePaymentTerm($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNote($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereTypeAdditionalPaymentId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereListingId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AdditionalPayments|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AdditionalPayments|null first(array|string $columns)
	 * @method static AdditionalPayments firstOrFail(array|string $columns, string|null $message)
	 * @method static AdditionalPayments sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AdditionalPayments>|AdditionalPayments tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AdditionalPayments extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AgendaLegend
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $name
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Activity> $activities
	 * @property-read int|null $activities_count
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgendaLegend|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgendaLegend|null first(array|string $columns)
	 * @method static AgendaLegend firstOrFail(array|string $columns, string|null $message)
	 * @method static AgendaLegend sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgendaLegend>|AgendaLegend tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgendaLegend extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AgentContact
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgentContact|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgentContact|null first(array|string $columns)
	 * @method static AgentContact firstOrFail(array|string $columns, string|null $message)
	 * @method static AgentContact sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentContact>|AgentContact tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgentContact extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AgentMonthlyMeasure
	 *
	 * @property mixed $year
	 * @property mixed $month
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $active_listings
	 * @property mixed $office_id
	 * @property mixed $agent_id
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereAgentId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereOfficeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereActiveListings($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereMonth($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereYear($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgentMonthlyMeasure|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgentMonthlyMeasure|null first(array|string $columns)
	 * @method static AgentMonthlyMeasure firstOrFail(array|string $columns, string|null $message)
	 * @method static AgentMonthlyMeasure sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentMonthlyMeasure>|AgentMonthlyMeasure tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgentMonthlyMeasure extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AgentStatus
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $name
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents
	 * @property-read int|null $agents_count
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgentStatus|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgentStatus|null first(array|string $columns)
	 * @method static AgentStatus firstOrFail(array|string $columns, string|null $message)
	 * @method static AgentStatus sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentStatus>|AgentStatus tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgentStatus extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AgentTeam
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property boolean|null $is_leader
	 * @property mixed $team_id
	 * @property mixed $agent_id
	 * @property mixed $id
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereAgentId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereTeamId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereIsLeader($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgentTeam|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgentTeam|null first(array|string $columns)
	 * @method static AgentTeam firstOrFail(array|string $columns, string|null $message)
	 * @method static AgentTeam sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentTeam>|AgentTeam tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgentTeam extends \Illuminate\Database\Eloquent\Relations\Pivot
	{
		//
	}

	/**
	 * App\Models\AgentsPreference
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AgentsPreference|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AgentsPreference|null first(array|string $columns)
	 * @method static AgentsPreference firstOrFail(array|string $columns, string|null $message)
	 * @method static AgentsPreference sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AgentsPreference>|AgentsPreference tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AgentsPreference extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Area
	 *
	 * @property mixed $is_base
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $description
	 * @property string $name
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Speciality> $specialities
	 * @property-read int|null $specialities_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereIsBase($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Area|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Area|null first(array|string $columns)
	 * @method static Area firstOrFail(array|string $columns, string|null $message)
	 * @method static Area sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Area>|Area tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Area extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AreaSpeciality
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $speciality_id
	 * @property mixed $area_id
	 * @property int $id
	 * @property-read \App\Models\Area $area
	 * @property-read \App\Models\Speciality $speciality
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AreaSpecialityUser> $users
	 * @property-read int|null $users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereAreaId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereSpecialityId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AreaSpeciality|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AreaSpeciality|null first(array|string $columns)
	 * @method static AreaSpeciality firstOrFail(array|string $columns, string|null $message)
	 * @method static AreaSpeciality sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpeciality>|AreaSpeciality tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AreaSpeciality extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AreaSpecialityUser
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $user_id
	 * @property mixed $area_speciality_id
	 * @property int $id
	 * @property-read \App\Models\AreaSpeciality $areaSpeciality
	 * @property-read \App\Models\User $user
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereAreaSpecialityId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AreaSpecialityUser|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AreaSpecialityUser|null first(array|string $columns)
	 * @method static AreaSpecialityUser firstOrFail(array|string $columns, string|null $message)
	 * @method static AreaSpecialityUser sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AreaSpecialityUser>|AreaSpecialityUser tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AreaSpecialityUser extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AuditLog
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $notes
	 * @property string|null $new_value
	 * @property string|null $old_value
	 * @property string $field_name
	 * @property mixed $listing_id
	 * @property mixed $user_id
	 * @property mixed $agent_id
	 * @property int $id
	 * @property-read mixed $created_at_human
	 * @property-read \App\Models\Agent $agent
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\User $user
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereAgentId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereListingId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereFieldName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereOldValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNewValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotes($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog query()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static AuditLog|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static AuditLog|null first(array|string $columns)
	 * @method static AuditLog firstOrFail(array|string $columns, string|null $message)
	 * @method static AuditLog sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<AuditLog>|AuditLog tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AuditLog extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Bank
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transsactions
	 * @property-read int|null $transsactions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Bank|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Bank|null first(array|string $columns)
	 * @method static Bank firstOrFail(array|string $columns, string|null $message)
	 * @method static Bank sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Bank>|Bank tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Bank extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Buyer
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Buyer|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Buyer|null first(array|string $columns)
	 * @method static Buyer firstOrFail(array|string $columns, string|null $message)
	 * @method static Buyer sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Buyer extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CancellationReason
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason query()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static CancellationReason|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static CancellationReason|null first(array|string $columns)
	 * @method static CancellationReason firstOrFail(array|string $columns, string|null $message)
	 * @method static CancellationReason sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<CancellationReason>|CancellationReason tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CancellationReason extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CategoryContact
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
	 * @property-read int|null $contacts_count
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact query()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static CategoryContact|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static CategoryContact|null first(array|string $columns)
	 * @method static CategoryContact firstOrFail(array|string $columns, string|null $message)
	 * @method static CategoryContact sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<CategoryContact>|CategoryContact tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CategoryContact extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\City
	 *
	 * @property-read \App\Models\Province $province
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Zone> $zones
	 * @property-read int|null $zones_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $offices
	 * @property-read int|null $offices_count
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City byProvince()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City query()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static City|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static City|null first(array|string $columns)
	 * @method static City firstOrFail(array|string $columns, string|null $message)
	 * @method static City sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<City>|City tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class City extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Commission
	 *
	 * @property-read \App\Models\Agent $agent
	 * @property-read \App\Models\Transaction $transaction
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Commission|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Commission|null first(array|string $columns)
	 * @method static Commission firstOrFail(array|string $columns, string|null $message)
	 * @method static Commission sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Commission>|Commission tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Commission extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CommissionOption
	 *
	 * @property-read \App\Models\Listing $listing
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption query()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static CommissionOption|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static CommissionOption|null first(array|string $columns)
	 * @method static CommissionOption firstOrFail(array|string $columns, string|null $message)
	 * @method static CommissionOption sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionOption>|CommissionOption tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CommissionOption extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CommissionType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static CommissionType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static CommissionType|null first(array|string $columns)
	 * @method static CommissionType firstOrFail(array|string $columns, string|null $message)
	 * @method static CommissionType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<CommissionType>|CommissionType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CommissionType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Contact
	 *
	 * @property-read \App\Models\Grade $grade
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DocumentationContact> $documentationContacts
	 * @property-read int|null $documentationContacts_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents
	 * @property-read int|null $agents_count
	 * @property-read \App\Models\CategoryContact $categoryContact
	 * @property-read \App\Models\TimeFrame $timeFrame
	 * @property-read \App\Models\PreferendComunicationMethod $preferredCommunicationMethod
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\EnableChat> $enableChats
	 * @property-read int|null $enableChats_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Goal> $goals
	 * @property-read int|null $goals_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Owner> $owners
	 * @property-read int|null $owners_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Contact|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Contact|null first(array|string $columns)
	 * @method static Contact firstOrFail(array|string $columns, string|null $message)
	 * @method static Contact sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Contact>|Contact tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Contact extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ContractType
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $listings
	 * @property-read int|null $listings_count
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ContractType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ContractType|null first(array|string $columns)
	 * @method static ContractType firstOrFail(array|string $columns, string|null $message)
	 * @method static ContractType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ContractType>|ContractType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ContractType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Currency
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Currency|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Currency|null first(array|string $columns)
	 * @method static Currency firstOrFail(array|string $columns, string|null $message)
	 * @method static Currency sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Currency extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CustomerPreference
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
	 * @property-read int|null $users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference query()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static CustomerPreference|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static CustomerPreference|null first(array|string $columns)
	 * @method static CustomerPreference firstOrFail(array|string $columns, string|null $message)
	 * @method static CustomerPreference sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<CustomerPreference>|CustomerPreference tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CustomerPreference extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Documentation
	 *
	 * @property-read mixed $full_link
	 * @property-read mixed $name
	 * @property-read mixed $extension
	 * @property-read mixed $upload_date
	 * @property-read \App\Models\DocumentationType $documentation_type
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $documentation_listings
	 * @property-read int|null $documentation_listings_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents_documentations
	 * @property-read int|null $agents_documentations_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Documentation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Documentation|null first(array|string $columns)
	 * @method static Documentation firstOrFail(array|string $columns, string|null $message)
	 * @method static Documentation sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Documentation>|Documentation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Documentation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\DocumentationContact
	 *
	 * @property-read \App\Models\Contact $contact
	 * @property-read \App\Models\TypeDocumentationContact $typeDocumentacion
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact query()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static DocumentationContact|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static DocumentationContact|null first(array|string $columns)
	 * @method static DocumentationContact firstOrFail(array|string $columns, string|null $message)
	 * @method static DocumentationContact sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationContact>|DocumentationContact tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class DocumentationContact extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\DocumentationListing
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing query()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static DocumentationListing|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static DocumentationListing|null first(array|string $columns)
	 * @method static DocumentationListing firstOrFail(array|string $columns, string|null $message)
	 * @method static DocumentationListing sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationListing>|DocumentationListing tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class DocumentationListing extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\DocumentationType
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DocumentationType> $documentacions_types
	 * @property-read int|null $documentacions_types_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DocumentationType> $documentacions_types_hijos
	 * @property-read int|null $documentacions_types_hijos_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Documentation> $documentations
	 * @property-read int|null $documentations_count
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType public()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType private()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static DocumentationType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static DocumentationType|null first(array|string $columns)
	 * @method static DocumentationType firstOrFail(array|string $columns, string|null $message)
	 * @method static DocumentationType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<DocumentationType>|DocumentationType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class DocumentationType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Element
	 *
	 * @property-read \App\Models\Section $section
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AccessRule> $access_rules
	 * @property-read int|null $access_rules_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Element|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Element|null first(array|string $columns)
	 * @method static Element firstOrFail(array|string $columns, string|null $message)
	 * @method static Element sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Element>|Element tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Element extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\EnableChat
	 *
	 * @property-read \App\Models\Contact $contact
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat query()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static EnableChat|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static EnableChat|null first(array|string $columns)
	 * @method static EnableChat firstOrFail(array|string $columns, string|null $message)
	 * @method static EnableChat sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<EnableChat>|EnableChat tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class EnableChat extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ExchangeRate
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ExchangeRate|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ExchangeRate|null first(array|string $columns)
	 * @method static ExchangeRate firstOrFail(array|string $columns, string|null $message)
	 * @method static ExchangeRate sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExchangeRate>|ExchangeRate tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ExchangeRate extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Feature
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Feature> $children
	 * @property-read int|null $children_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Feature> $allChildren
	 * @property-read int|null $allChildren_count
	 * @property-read \App\Models\Feature $parent
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Feature|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Feature|null first(array|string $columns)
	 * @method static Feature firstOrFail(array|string $columns, string|null $message)
	 * @method static Feature sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Feature>|Feature tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Feature extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\FeactureListing
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Feature> $feature
	 * @property-read int|null $feature_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Feature> $feature_children
	 * @property-read int|null $feature_children_count
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing query()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static FeactureListing|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static FeactureListing|null first(array|string $columns)
	 * @method static FeactureListing firstOrFail(array|string $columns, string|null $message)
	 * @method static FeactureListing sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<FeactureListing>|FeactureListing tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class FeactureListing extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Goal
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Goal|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Goal|null first(array|string $columns)
	 * @method static Goal firstOrFail(array|string $columns, string|null $message)
	 * @method static Goal sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Goal>|Goal tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Goal extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Grade
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
	 * @property-read int|null $contacts_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Grade|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Grade|null first(array|string $columns)
	 * @method static Grade firstOrFail(array|string $columns, string|null $message)
	 * @method static Grade sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Grade>|Grade tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Grade extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LandCategory
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformations
	 * @property-read int|null $listingInformations_count
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LandCategory|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LandCategory|null first(array|string $columns)
	 * @method static LandCategory firstOrFail(array|string $columns, string|null $message)
	 * @method static LandCategory sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandCategory>|LandCategory tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LandCategory extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LandUse
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformation
	 * @property-read int|null $listingInformation_count
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LandUse|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LandUse|null first(array|string $columns)
	 * @method static LandUse firstOrFail(array|string $columns, string|null $message)
	 * @method static LandUse sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LandUse>|LandUse tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LandUse extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Language
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Language|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Language|null first(array|string $columns)
	 * @method static Language firstOrFail(array|string $columns, string|null $message)
	 * @method static Language sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Language extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LanguagesUser
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser query()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static LanguagesUser|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static LanguagesUser|null first(array|string $columns)
	 * @method static LanguagesUser firstOrFail(array|string $columns, string|null $message)
	 * @method static LanguagesUser sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<LanguagesUser>|LanguagesUser tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LanguagesUser extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Listing
	 *
	 * @property-read \App\Models\Agent $agent
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents
	 * @property-read int|null $agents_count
	 * @property-read \App\Models\Area $area
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingPrice> $listing_prices
	 * @property-read int|null $listing_prices_count
	 * @property-read \App\Models\ListingPrice $price
	 * @property-read \App\Models\PriceType $price_type
	 * @property-read \App\Models\Project $project
	 * @property-read \App\Models\ListingInformation $listing_information
	 * @property-read \App\Models\CommissionOption $commission_option
	 * @property-read \App\Models\Location $location
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Feature> $features
	 * @property-read int|null $features_count
	 * @property-read \App\Models\Multimedia $default_imagen
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Multimedia> $multimedias
	 * @property-read int|null $multimedias_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Documentation> $documentation
	 * @property-read int|null $documentation_count
	 * @property-read \App\Models\StatusListing $status_listing
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AdditionalPayments> $addition_payments
	 * @property-read int|null $addition_payments_count
	 * @property-read \App\Models\ContractType $contract_type
	 * @property-read \App\Models\ListingTransactionType $transaction_type
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $buyers
	 * @property-read int|null $buyers_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $owners
	 * @property-read int|null $owners_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AuditLog> $logs
	 * @property-read int|null $logs_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
	 * @property-read int|null $transactions_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingQualityControl> $quality_control
	 * @property-read int|null $quality_control_count
	 * @property-read \App\Models\RentTimeframe $rent_timeframe
	 * @property-read \App\Models\CancellationReason $cancellation_reason
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Listing|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Listing|null first(array|string $columns)
	 * @method static Listing firstOrFail(array|string $columns, string|null $message)
	 * @method static Listing sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Listing>|Listing tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Listing extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingInformation
	 *
	 * @property-read mixed $cubic_volume
	 * @property-read mixed $land_m2
	 * @property-read mixed $land_x
	 * @property-read mixed $land_y
	 * @property-read mixed $construction_area_m
	 * @property-read mixed $total_area
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\SubtypeProperty $subtype_property
	 * @property-read \App\Models\MarketStatus $marketStatus
	 * @property-read \App\Models\StateProperty $stateProperty
	 * @property-read \App\Models\PropertyCategory $propertyCategory
	 * @property-read \App\Models\LandUse $landUse
	 * @property-read \App\Models\LandCategory $landCategory
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Room> $rooms
	 * @property-read int|null $rooms_count
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingInformation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingInformation|null first(array|string $columns)
	 * @method static ListingInformation firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingInformation sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingInformation>|ListingInformation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingInformation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingMigrationLog
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingMigrationLog|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingMigrationLog|null first(array|string $columns)
	 * @method static ListingMigrationLog firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingMigrationLog sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingMigrationLog>|ListingMigrationLog tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingMigrationLog extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingOwner
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $listings
	 * @property-read int|null $listings_count
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingOwner|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingOwner|null first(array|string $columns)
	 * @method static ListingOwner firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingOwner sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingOwner>|ListingOwner tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingOwner extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingPrice
	 *
	 * @property-read mixed $price_in_dollars
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\Currency $currency
	 * @property-read \App\Models\ExchangeRate $exchange_rate
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingPrice|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingPrice|null first(array|string $columns)
	 * @method static ListingPrice firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingPrice sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingPrice>|ListingPrice tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingPrice extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingQualityControl
	 *
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\User $user
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingQualityControl|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingQualityControl|null first(array|string $columns)
	 * @method static ListingQualityControl firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingQualityControl sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingQualityControl>|ListingQualityControl tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingQualityControl extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingTransactionType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingTransactionType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingTransactionType|null first(array|string $columns)
	 * @method static ListingTransactionType firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingTransactionType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransactionType>|ListingTransactionType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingTransactionType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ListingTransfer
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ListingTransfer|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ListingTransfer|null first(array|string $columns)
	 * @method static ListingTransfer firstOrFail(array|string $columns, string|null $message)
	 * @method static ListingTransfer sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ListingTransfer>|ListingTransfer tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ListingTransfer extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Location
	 *
	 * @property-read mixed $full_address
	 * @property-read \App\Models\TypeFloor $type_floor
	 * @property-read \App\Models\City $city
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\Zone $zone
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Location|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Location|null first(array|string $columns)
	 * @method static Location firstOrFail(array|string $columns, string|null $message)
	 * @method static Location sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Location extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\MarketStatus
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformation
	 * @property-read int|null $listingInformation_count
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus query()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static MarketStatus|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static MarketStatus|null first(array|string $columns)
	 * @method static MarketStatus firstOrFail(array|string $columns, string|null $message)
	 * @method static MarketStatus sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<MarketStatus>|MarketStatus tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class MarketStatus extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Membership
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Membership|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Membership|null first(array|string $columns)
	 * @method static Membership firstOrFail(array|string $columns, string|null $message)
	 * @method static Membership sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Membership>|Membership tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Membership extends \Laravel\Jetstream\Membership
	{
		//
	}

	/**
	 * App\Models\MenuItem
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem query()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static MenuItem|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static MenuItem|null first(array|string $columns)
	 * @method static MenuItem firstOrFail(array|string $columns, string|null $message)
	 * @method static MenuItem sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<MenuItem>|MenuItem tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class MenuItem extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Module
	 *
	 * @property-read mixed $image_url
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Page> $pages
	 * @property-read int|null $pages_count
	 * @property-read \App\Models\Page $default_page
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AccessRule> $access_rules
	 * @property-read int|null $access_rules_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Module|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Module|null first(array|string $columns)
	 * @method static Module firstOrFail(array|string $columns, string|null $message)
	 * @method static Module sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Module>|Module tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Module extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Multimedia
	 *
	 * @property-read mixed $url
	 * @property-read mixed $thumbnai_url
	 * @property-read mixed $large_url
	 * @property-read mixed $extra_large_url
	 * @property-read \App\Models\Room $room
	 * @property-read \App\Models\MultimediaType $multimedia_type
	 * @property-read \App\Models\Listing $listing
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Multimedia|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Multimedia|null first(array|string $columns)
	 * @method static Multimedia firstOrFail(array|string $columns, string|null $message)
	 * @method static Multimedia sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Multimedia>|Multimedia tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Multimedia extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\MultimediaType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static MultimediaType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static MultimediaType|null first(array|string $columns)
	 * @method static MultimediaType firstOrFail(array|string $columns, string|null $message)
	 * @method static MultimediaType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<MultimediaType>|MultimediaType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class MultimediaType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Office
	 *
	 * @property-read mixed $image_url
	 * @property-read mixed $state_name
	 * @property-read mixed $full_address
	 * @property-read \App\Models\Region $regions
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SocialNetwork> $socialNetworks
	 * @property-read int|null $socialNetworks_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents
	 * @property-read int|null $agents_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Transaction> $transactions
	 * @property-read int|null $transactions_count
	 * @property-read \App\Models\State $state
	 * @property-read \App\Models\Province $province
	 * @property-read \App\Models\Zone $zone
	 * @property-read \App\Models\City $city
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TeamManagement> $teams
	 * @property-read int|null $teams_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AchievementOfficePivot> $achievementoffices
	 * @property-read int|null $achievementoffices_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Office|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Office|null first(array|string $columns)
	 * @method static Office firstOrFail(array|string $columns, string|null $message)
	 * @method static Office sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Office>|Office tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Office extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Option
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\OptionTranslation> $translations
	 * @property-read int|null $translations_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Option|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Option|null first(array|string $columns)
	 * @method static Option firstOrFail(array|string $columns, string|null $message)
	 * @method static Option sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Option>|Option tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Option extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\OptionTranslation
	 *
	 * @property-read \App\Models\Option $option
	 * @property-read \App\Models\Language $language
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static OptionTranslation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static OptionTranslation|null first(array|string $columns)
	 * @method static OptionTranslation firstOrFail(array|string $columns, string|null $message)
	 * @method static OptionTranslation sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<OptionTranslation>|OptionTranslation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class OptionTranslation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Owner
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Owner|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Owner|null first(array|string $columns)
	 * @method static Owner firstOrFail(array|string $columns, string|null $message)
	 * @method static Owner sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Owner>|Owner tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Owner extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Page
	 *
	 * @property-read \App\Models\Module $module
	 * @property-read \App\Models\Page $parent
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Page> $children
	 * @property-read int|null $children_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Section> $sections
	 * @property-read int|null $sections_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AccessRule> $access_rules
	 * @property-read int|null $access_rules_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Page|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Page|null first(array|string $columns)
	 * @method static Page firstOrFail(array|string $columns, string|null $message)
	 * @method static Page sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Page extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Parking
	 *
	 * @property-read \App\Models\ParkingType $parkingType
	 * @property-read \App\Models\Listing $listing
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Parking|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Parking|null first(array|string $columns)
	 * @method static Parking firstOrFail(array|string $columns, string|null $message)
	 * @method static Parking sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Parking>|Parking tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Parking extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ParkingType
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Parking> $parkings
	 * @property-read int|null $parkings_count
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static ParkingType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static ParkingType|null first(array|string $columns)
	 * @method static ParkingType firstOrFail(array|string $columns, string|null $message)
	 * @method static ParkingType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<ParkingType>|ParkingType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ParkingType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Payment
	 *
	 * @property-read \App\Models\Agent $agent
	 * @property-read \App\Models\Transaction $transaction
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Payment|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Payment|null first(array|string $columns)
	 * @method static Payment firstOrFail(array|string $columns, string|null $message)
	 * @method static Payment sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Payment>|Payment tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Payment extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PaymentType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static PaymentType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static PaymentType|null first(array|string $columns)
	 * @method static PaymentType firstOrFail(array|string $columns, string|null $message)
	 * @method static PaymentType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<PaymentType>|PaymentType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PaymentType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PreferendComunicationMethod
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
	 * @property-read int|null $contacts_count
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod query()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static PreferendComunicationMethod|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static PreferendComunicationMethod|null first(array|string $columns)
	 * @method static PreferendComunicationMethod firstOrFail(array|string $columns, string|null $message)
	 * @method static PreferendComunicationMethod sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<PreferendComunicationMethod>|PreferendComunicationMethod tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PreferendComunicationMethod extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PriceType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static PriceType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static PriceType|null first(array|string $columns)
	 * @method static PriceType firstOrFail(array|string $columns, string|null $message)
	 * @method static PriceType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<PriceType>|PriceType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PriceType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Priority
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Task> $tasks
	 * @property-read int|null $tasks_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Priority|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Priority|null first(array|string $columns)
	 * @method static Priority firstOrFail(array|string $columns, string|null $message)
	 * @method static Priority sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Priority>|Priority tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Priority extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Project
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Listing> $listings
	 * @property-read int|null $listings_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Project|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Project|null first(array|string $columns)
	 * @method static Project firstOrFail(array|string $columns, string|null $message)
	 * @method static Project sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Project>|Project tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Project extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PropertyCategory
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformation
	 * @property-read int|null $listingInformation_count
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory query()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static PropertyCategory|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static PropertyCategory|null first(array|string $columns)
	 * @method static PropertyCategory firstOrFail(array|string $columns, string|null $message)
	 * @method static PropertyCategory sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<PropertyCategory>|PropertyCategory tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PropertyCategory extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Province
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\City> $cities
	 * @property-read int|null $cities_count
	 * @property-read \App\Models\State $state
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $offices
	 * @property-read int|null $offices_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province byState()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Province|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Province|null first(array|string $columns)
	 * @method static Province firstOrFail(array|string $columns, string|null $message)
	 * @method static Province sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Province>|Province tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Province extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Qualification
	 *
	 * @property-read \App\Models\Agent $agents
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Qualification|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Qualification|null first(array|string $columns)
	 * @method static Qualification firstOrFail(array|string $columns, string|null $message)
	 * @method static Qualification sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Qualification>|Qualification tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Qualification extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Region
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $offices
	 * @property-read int|null $offices_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $agents
	 * @property-read int|null $agents_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Region|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Region|null first(array|string $columns)
	 * @method static Region firstOrFail(array|string $columns, string|null $message)
	 * @method static Region sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Region>|Region tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Region extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\RemaxTitle
	 *
	 * @property-read \App\Models\UserType $userType
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle query()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static RemaxTitle|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static RemaxTitle|null first(array|string $columns)
	 * @method static RemaxTitle firstOrFail(array|string $columns, string|null $message)
	 * @method static RemaxTitle sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitle>|RemaxTitle tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class RemaxTitle extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\RemaxTitleToShow
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow query()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static RemaxTitleToShow|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static RemaxTitleToShow|null first(array|string $columns)
	 * @method static RemaxTitleToShow firstOrFail(array|string $columns, string|null $message)
	 * @method static RemaxTitleToShow sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<RemaxTitleToShow>|RemaxTitleToShow tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class RemaxTitleToShow extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\RentTimeframe
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe query()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static RentTimeframe|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static RentTimeframe|null first(array|string $columns)
	 * @method static RentTimeframe firstOrFail(array|string $columns, string|null $message)
	 * @method static RentTimeframe sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<RentTimeframe>|RentTimeframe tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class RentTimeframe extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Room
	 *
	 * @property-read \App\Models\RoomType $room_type
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Room|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Room|null first(array|string $columns)
	 * @method static Room firstOrFail(array|string $columns, string|null $message)
	 * @method static Room sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Room>|Room tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Room extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\RoomType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static RoomType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static RoomType|null first(array|string $columns)
	 * @method static RoomType firstOrFail(array|string $columns, string|null $message)
	 * @method static RoomType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<RoomType>|RoomType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class RoomType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Section
	 *
	 * @property-read \App\Models\Page $page
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Element> $elements
	 * @property-read int|null $elements_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AccessRule> $access_rules
	 * @property-read int|null $access_rules_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Section|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Section|null first(array|string $columns)
	 * @method static Section firstOrFail(array|string $columns, string|null $message)
	 * @method static Section sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Section>|Section tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Section extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\SocialNetwork
	 *
	 * @property-read \App\Models\Agent $agent
	 * @property-read \App\Models\TeamManagement $team
	 * @property-read \App\Models\Office $office
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork query()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static SocialNetwork|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static SocialNetwork|null first(array|string $columns)
	 * @method static SocialNetwork firstOrFail(array|string $columns, string|null $message)
	 * @method static SocialNetwork sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<SocialNetwork>|SocialNetwork tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class SocialNetwork extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Speciality
	 *
	 * @property-read \App\Models\Speciality $parent
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Speciality> $children
	 * @property-read int|null $children_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Area> $areas
	 * @property-read int|null $areas_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Speciality|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Speciality|null first(array|string $columns)
	 * @method static Speciality firstOrFail(array|string $columns, string|null $message)
	 * @method static Speciality sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Speciality>|Speciality tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Speciality extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\State
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Province> $provinces
	 * @property-read int|null $provinces_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $offices
	 * @property-read int|null $offices_count
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State query()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static State|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static State|null first(array|string $columns)
	 * @method static State firstOrFail(array|string $columns, string|null $message)
	 * @method static State sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<State>|State tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class State extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\StateProperty
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformation
	 * @property-read int|null $listingInformation_count
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty query()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static StateProperty|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static StateProperty|null first(array|string $columns)
	 * @method static StateProperty firstOrFail(array|string $columns, string|null $message)
	 * @method static StateProperty sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<StateProperty>|StateProperty tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class StateProperty extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\StatusListing
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StatusListing> $transitions_from
	 * @property-read int|null $transitions_from_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\StatusListing> $transitions_to
	 * @property-read int|null $transitions_to_count
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing query()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static StatusListing|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static StatusListing|null first(array|string $columns)
	 * @method static StatusListing firstOrFail(array|string $columns, string|null $message)
	 * @method static StatusListing sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<StatusListing>|StatusListing tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class StatusListing extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\SubtypeProperty
	 *
	 * @property-read \App\Models\TypeProperty $type_property
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ListingInformation> $listingInformation
	 * @property-read int|null $listingInformation_count
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty query()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static SubtypeProperty|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static SubtypeProperty|null first(array|string $columns)
	 * @method static SubtypeProperty firstOrFail(array|string $columns, string|null $message)
	 * @method static SubtypeProperty sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<SubtypeProperty>|SubtypeProperty tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class SubtypeProperty extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Task
	 *
	 * @property-read \App\Models\Priority $priority
	 * @property-read \App\Models\ActivityListing $activityListing
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Task|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Task|null first(array|string $columns)
	 * @method static Task firstOrFail(array|string $columns, string|null $message)
	 * @method static Task sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Task>|Task tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Task extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Team
	 *
	 * @property-read \App\Models\User $owner
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
	 * @property-read int|null $users_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TeamInvitation> $teamInvitations
	 * @property-read int|null $teamInvitations_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Team|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Team|null first(array|string $columns)
	 * @method static Team firstOrFail(array|string $columns, string|null $message)
	 * @method static Team sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Team>|Team tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Team extends \Laravel\Jetstream\Team
	{
		//
	}

	/**
	 * App\Models\TeamInvitation
	 *
	 * @property-read \App\Models\Team $team
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TeamInvitation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TeamInvitation|null first(array|string $columns)
	 * @method static TeamInvitation firstOrFail(array|string $columns, string|null $message)
	 * @method static TeamInvitation sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TeamInvitation extends \Laravel\Jetstream\TeamInvitation
	{
		//
	}

	/**
	 * App\Models\TeamManagement
	 *
	 * @property-read mixed $members_count
	 * @property-read mixed $image_url
	 * @property-read mixed $logo_url
	 * @property-read mixed $members_with_users
	 * @property-read mixed $formatted_phone_number
	 * @property-read mixed $formatted_whatsapp_number
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $members
	 * @property-read int|null $members_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Agent> $leader
	 * @property-read int|null $leader_count
	 * @property-read \App\Models\Office $office
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SocialNetwork> $socialNetworks
	 * @property-read int|null $socialNetworks_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TeamManagement|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TeamManagement|null first(array|string $columns)
	 * @method static TeamManagement firstOrFail(array|string $columns, string|null $message)
	 * @method static TeamManagement sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamManagement>|TeamManagement tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TeamManagement extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TeamStatus
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
	 * @property-read int|null $users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TeamStatus|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TeamStatus|null first(array|string $columns)
	 * @method static TeamStatus firstOrFail(array|string $columns, string|null $message)
	 * @method static TeamStatus sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamStatus>|TeamStatus tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TeamStatus extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TimeFrame
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Contact> $contacts
	 * @property-read int|null $contacts_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TimeFrame|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TimeFrame|null first(array|string $columns)
	 * @method static TimeFrame firstOrFail(array|string $columns, string|null $message)
	 * @method static TimeFrame sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TimeFrame>|TimeFrame tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TimeFrame extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Transaction
	 *
	 * @property-read \App\Models\Listing $listing
	 * @property-read \App\Models\Agent $agent
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Payment> $payments
	 * @property-read int|null $payments_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Commission> $commissions
	 * @property-read int|null $commissions_count
	 * @property-read \App\Models\Bank $bank
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Transaction|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Transaction|null first(array|string $columns)
	 * @method static Transaction firstOrFail(array|string $columns, string|null $message)
	 * @method static Transaction sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Transaction>|Transaction tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Transaction extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TransactionStatus
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TransactionStatus|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TransactionStatus|null first(array|string $columns)
	 * @method static TransactionStatus firstOrFail(array|string $columns, string|null $message)
	 * @method static TransactionStatus sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionStatus>|TransactionStatus tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TransactionStatus extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TransactionType
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TransactionType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TransactionType|null first(array|string $columns)
	 * @method static TransactionType firstOrFail(array|string $columns, string|null $message)
	 * @method static TransactionType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TransactionType>|TransactionType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TransactionType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TypeActivity
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Activity> $activities
	 * @property-read int|null $activities_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TypeActivity|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TypeActivity|null first(array|string $columns)
	 * @method static TypeActivity firstOrFail(array|string $columns, string|null $message)
	 * @method static TypeActivity sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeActivity>|TypeActivity tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TypeActivity extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TypeAdditionalPayments
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TypeAdditionalPayments|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TypeAdditionalPayments|null first(array|string $columns)
	 * @method static TypeAdditionalPayments firstOrFail(array|string $columns, string|null $message)
	 * @method static TypeAdditionalPayments sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeAdditionalPayments>|TypeAdditionalPayments tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TypeAdditionalPayments extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TypeDocumentationContact
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DocumentationContact> $documentationContacts
	 * @property-read int|null $documentationContacts_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TypeDocumentationContact|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TypeDocumentationContact|null first(array|string $columns)
	 * @method static TypeDocumentationContact firstOrFail(array|string $columns, string|null $message)
	 * @method static TypeDocumentationContact sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeDocumentationContact>|TypeDocumentationContact tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TypeDocumentationContact extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TypeFloor
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TypeFloor|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TypeFloor|null first(array|string $columns)
	 * @method static TypeFloor firstOrFail(array|string $columns, string|null $message)
	 * @method static TypeFloor sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeFloor>|TypeFloor tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TypeFloor extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\TypeProperty
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SubtypeProperty> $subtypeProperties
	 * @property-read int|null $subtypeProperties_count
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TypeProperty|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TypeProperty|null first(array|string $columns)
	 * @method static TypeProperty firstOrFail(array|string $columns, string|null $message)
	 * @method static TypeProperty sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TypeProperty>|TypeProperty tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TypeProperty extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\User
	 *
	 * @property-read \App\Models\Agent $agent
	 * @property-read \App\Models\UserType $user_type
	 * @property-read \App\Models\RemaxTitle $remax_title
	 * @property-read \App\Models\RemaxTitleToShow $remax_title_to_show
	 * @property-read \App\Models\TeamStatus $team_status
	 * @property-read \App\Models\CustomerPreference $customer_preference
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AreaSpeciality> $areaSpecialities
	 * @property-read int|null $areaSpecialities_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Achievement> $achievements
	 * @property-read int|null $achievements_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\City> $area_services
	 * @property-read int|null $area_services_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AreaSpecialityUser> $areaSpecialityUsers
	 * @property-read int|null $areaSpecialityUsers_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Language> $languages
	 * @property-read int|null $languages_count
	 * @property-read \App\Models\TeamStatus $teamStatus
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Role> $roles
	 * @property-read int|null $roles_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Spatie\Permission\Models\Permission> $permissions
	 * @property-read int|null $permissions_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
	 * @property-read int|null $tokens_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
	 * @property-read int|null $notifications_count
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User role()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User withoutRole()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User permission()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User withoutPermission()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static User|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static User|null first(array|string $columns)
	 * @method static User firstOrFail(array|string $columns, string|null $message)
	 * @method static User sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class User extends \Illuminate\Foundation\Auth\User
	{
		//
	}

	/**
	 * App\Models\UserType
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
	 * @property-read int|null $users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType query()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static UserType|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static UserType|null first(array|string $columns)
	 * @method static UserType firstOrFail(array|string $columns, string|null $message)
	 * @method static UserType sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<UserType>|UserType tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class UserType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Zone
	 *
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Location> $locations
	 * @property-read int|null $locations_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\City> $city
	 * @property-read int|null $city_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Office> $office
	 * @property-read int|null $office_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone byCity()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Zone|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static Zone|null first(array|string $columns)
	 * @method static Zone firstOrFail(array|string $columns, string|null $message)
	 * @method static Zone sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Zone extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}

namespace Laravel\Jetstream {

	/**
	 * Laravel\Jetstream\TeamInvitation
	 *
	 * @property-read \App\Models\Team $team
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation selectRaw(string $expression, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation fromRaw(string $expression, mixed $bindings)
	 * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static array parseSub(mixed $query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Query\JoinClause newJoinClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(\Illuminate\Database\Query\Builder $parentQuery, string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addArrayOfWheres(array $column, string $boolean, string $method)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
	 * @method static bool invalidOperator(string $operator)
	 * @method static bool isBitwiseOperator(string $operator)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, iterable $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addWhereExistsQuery(\Illuminate\Database\Query\Builder $query, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dynamicWhere(string $method, array $parameters)
	 * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, string|int|float|null $operator, string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNested(\Closure $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNull(string|array $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingNotNull(string|array $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingBetween(string $column, iterable $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation havingRaw(string $sql, array $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orHavingRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static array removeExistingOrdersFor(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation beforeQuery(callable $callback)
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation afterQuery(\Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static TeamInvitation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static array runSelect()
	 * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
	 * @method static \Illuminate\Contracts\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
	 * @method static int getCountForPagination(array $columns)
	 * @method static array runPaginationCountQuery(array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneForPaginationCount()
	 * @method static array withoutSelectAliases(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static void enforceOrderBy()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string|null stripTableForPluck(string $column)
	 * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
	 * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr(\Closure $callback)
	 * @method static mixed doesntExistOr(\Closure $callback)
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation setAggregate(string $function, array $columns)
	 * @method static mixed onceWithColumns(array $columns, callable $callback)
	 * @method static bool insert(array $values)
	 * @method static int insertOrIgnore(array $values)
	 * @method static int insertGetId(array $values, string|null $sequence)
	 * @method static int insertUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(array $columns, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update(array $values)
	 * @method static int updateFrom(array $values)
	 * @method static bool updateOrInsert(array $attributes, array|callable $values)
	 * @method static int upsert(array $values, array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount, array $extra)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount, array $extra)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static \Illuminate\Database\Query\Builder forSubQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static \Illuminate\Support\Collection getUnionBuilders()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation setBindings(array $bindings, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation mergeBindings(\Illuminate\Database\Query\Builder $query)
	 * @method static array cleanBindings(array $bindings)
	 * @method static mixed flattenValue(mixed $value)
	 * @method static string defaultKeyName()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation useWritePdo()
	 * @method static bool isQueryable(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneWithout(array $properties)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation cloneWithoutBindings(array $except)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazy(int $chunkSize)
	 * @method static \Illuminate\Support\LazyCollection lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
	 * @method static TeamInvitation|null first(array|string $columns)
	 * @method static TeamInvitation firstOrFail(array|string $columns, string|null $message)
	 * @method static TeamInvitation sole(array|string $columns)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
	 * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
	 * @method static \Illuminate\Database\Eloquent\Builder<TeamInvitation>|TeamInvitation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
	 * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
	 * @method static void throwBadMethodCallException(string $method)
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class TeamInvitation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}