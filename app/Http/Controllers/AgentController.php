<?php

namespace App\Http\Controllers;

use App\Dtos\Agents\AgentDto;
use App\Dtos\Agents\AgentParamsDto;
use App\Http\Controllers\Controller;
use App\Http\Requests\AgentController\IndexAgentRequest;
use App\Http\Requests\AgentController\StoreAgentRequest;
use App\Http\Requests\AgentController\StoreAgentExternalRequest;
use App\Http\Requests\AgentController\UpdateAgentRequest;
use App\Models\Agent;
use Illuminate\Support\Facades\Validator;
use App\Models\Model;
use App\Models\SocialNetwork;
use App\Models\AchievementUser;
use App\Models\AreaSpecialityUser;
use App\Models\Documentation;
use App\Models\Office;
use App\Models\User;
use Inertia\Inertia;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Auth;

use Spatie\Permission\Models\Role;
use App\Services\Agents\AgentService;
use App\Services\Agents\AchievementUserService;
use App\Services\Agents\SocialNetworkService;
use App\Services\Agents\QualificationService;
use App\Services\Agents\AreaSpecialityUserService;
use App\Services\AuditLogService;
use App\Services\IconnectService;
use Illuminate\Database\Eloquent\Casts\Json;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Services\ImageService;
use Exception;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\Storage;

use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Http;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AgentsExport;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class AgentController extends Controller
{
    protected AgentService $agentService;
    protected ImageService $imageService;
    protected SocialNetworkService $socialNetworkService;
    protected QualificationService $qualificationService;
    protected IconnectService $iconectService;
    protected AchievementUserService $AchievementService;
    protected AreaSpecialityUserService $areaSpecialityUser;


    const DOCUMENTS_DIRECTORY = 'agents/documents';
    public function __construct(

		AgentService $agentService,
		ImageService $imageService,
		SocialNetworkService $socialNetworkService,
    	QualificationService $qualificationService,
		IconnectService $iconectService,
        AchievementUserService $AchievementService,
        AreaSpecialityUserService $areaSpecialityUser
	)
    {
        $this->socialNetworkService = $socialNetworkService;
        $this->qualificationService = $qualificationService;
        $this->agentService = $agentService;
        $this->imageService= $imageService;
        $this->iconectService= $iconectService;
        $this->AchievementService= $AchievementService;
        $this->areaSpecialityUser= $areaSpecialityUser;
    }



    public function exportExcel(Request $request)
    {
        $ids = explode(',', $request->query('agent_ids'));

        $agents = Agent::with(['user.remax_title',
        'user.remax_title_to_show','user.teamStatus','office',  'user.customer_preference','region', 'agentStatus'])->whereIn('id', $ids)->get();

        // Encabezados
        $formatedAgentData = [[
            'Agente Asociado ID',
            'Estado',
            'Nombre Completo',
            'Inicio RE/MAX',
            'Username',
            'Oficina',
            'Teléfono',
            'Teléfono fijo',
            'Email',
            'Titulo Actual en RE/MAX',
            'Titulo a Enseñar',
            'Estado del Equipo',
            'DateJoinedREMAX',
            'Enlace corto',
            'Tiene foto',
            'Numero de Licencia',
            'Tipo de Licencia',
            'Expiración Licencia',
            'Cumpleaños',
            'Género',
            'Preferencias de Cliente',
            'Estudios',
        ]];

        foreach ($agents as $agent) {
            $user = $agent->user;
            $formatedAgentData[] = [
                $agent->id,
                $agent->agentStatus->name ?? '',
                $user->name_to_show ?? '',
                $user->remax_start_date ?? '',
                $user->username ?? '',
                $agent->office->name ?? '',
                $user->phone_number ?? '',
                $agent->landline_phone,
                $user->email ?? '',
                $user->remax_title->name ?? '',
                $user->remax_title_to_show->name ?? '',
                $user->teamStatus->name ?? '',
                $agent->date_joined ?? '',
                $user->url ?? '',
                $agent->image_name ? 'SI' : 'NO',
                $agent->license_number ?? '',
                $agent->license_type ?? '',
                $agent->expiration_date_license ?? '',
                $user->birthdate ?? '',
                $user->gender ?? '',
                $user->customer_preference->name ?? '',
                $agent->studies ?? '',
            ];
        }

        // Crear el archivo Excel
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();
        $sheet->fromArray($formatedAgentData);
        $sheet->getStyle('1:1')->getFont()->setBold(true);

        foreach ($formatedAgentData[0] as $colIdx => $value) {
            $colLetter = Coordinate::stringFromColumnIndex($colIdx + 1);
            $sheet->getColumnDimension($colLetter)->setAutoSize(true);
        }

        $filename = 'agentes_exportados_' . now()->format('Ymd_His') . '.xlsx';
        $tempPath = storage_path("app/temp/{$filename}");

        $writer = new Xlsx($spreadsheet);
        $writer->save($tempPath);

        ob_end_clean();

        return response()->download($tempPath, $filename, [
            'Content-Type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"'
        ])->deleteFileAfterSend(true);
    }
    public function exportExceltoday(Request $request)
    {

        Log::info('Iniciando exportExceltoday');
        $status = $request->query('status'); // <- Aquí recibes all, active o inactive
        Log::info('Status recibido en request:', ['status' => $status]);
        // Obtener todos los agentes con relaciones
        //$agents = Agent::with(['user', 'office', 'region', 'agentStatus'])->get();
         // Empiezas a armar el query
         if ($status === 'active') {
            Log::info('Consulta: Solo agentes activos');
            $agents = Agent::with([
                'user.remax_title',
                'user.remax_title_to_show',
                'user.teamStatus',
                'office',
                'user.customer_preference',
                'region',
                'agentStatus'
            ])->where('agent_status_id', 1)->get();
        } elseif ($status === 'inactive') {
            Log::info('Consulta: Solo agentes inactivos');
            $agents = Agent::with([
                'user.remax_title',
                'user.remax_title_to_show',
                'user.teamStatus',
                'office',
                'user.customer_preference',
                'region',
                'agentStatus'
            ])->where('agent_status_id', 2)->get();
        } else {
            if ($status === 'all'){
            Log::info('Consulta: Todos los agentes');
            $agents = Agent::with([
                'user.remax_title',
                'user.remax_title_to_show',
                'user.teamStatus',
                'office',
                'user.customer_preference',
                'region',
                'agentStatus'
            ])->get();
            Log::info('Agentes obtenidos de la base de datos', ['cantidad' => $agents->count()]);

        }
        }



        $formatedAgentData = [[
            'Agente Asociado ID',
            'Estado',
            'Nombre Completo',
            'Inicio RE/MAX',
            'Username',
            'Oficina',
            'Teléfono',
            'Teléfono fijo',
            'Email',
            'Titulo Actual en RE/MAX',
            'Titulo a Enseñar',
            'Estado del Equipo',
            'DateJoinedREMAX',
            'Enlace corto',
            'Tiene foto',
            'Numero de Licencia',
            'Tipo de Licencia',
            'Expiración Licencia',
            'Cumpleaños',
            'Género',
            'Preferencias de Cliente',
            'Estudios',
        ]];

        foreach ($agents as $agent) {
            $user = $agent->user;

            $formatedAgentData[] = [
                $agent->id,
                $agent->agentStatus->name ?? '',
                $user->name_to_show ?? '',
                $user->remax_start_date ?? '',
                $user->username ?? '',
                $agent->office->name ?? '',
                $user->phone_number ?? '',
                $agent->landline_phone,
                $user->email ?? '',
                $user->remax_title->name ?? '',
                $user->remax_title_to_show->name ?? '',
                $user->teamStatus->name ?? '',
                $agent->date_joined ?? '',
                $user->url ?? '',
                $agent->image_name ? 'SI' : 'NO',
                $agent->license_number ?? '',
                $agent->license_type ?? '',
                $agent->expiration_date_license ?? '',
                $user->birthdate ?? '',
                $user->gender ?? '',
                $user->customer_preference->name ?? '',
                $agent->studies ?? '',
            ];
        }
        Log::info('Datos formateados para el Excel', ['registros' => count($formatedAgentData) - 1]); // restamos 1 por encabezado


        // Crear y devolver Excel
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();
        $sheet->fromArray($formatedAgentData);
        $sheet->getStyle('1:1')->getFont()->setBold(true);

        foreach ($formatedAgentData[0] as $colIdx => $value) {
            $colLetter = Coordinate::stringFromColumnIndex($colIdx + 1);
            $sheet->getColumnDimension($colLetter)->setAutoSize(true);
        }
        Log::info('Excel preparado');

        $filename = 'agentes_exportados_' . now()->format('Ymd_His') . '.xlsx';
        $tempPath = storage_path("app/temp/{$filename}");

        $writer = new Xlsx($spreadsheet);
        $writer->save($tempPath);

        ob_end_clean();

        return response()->download($tempPath, $filename, [
            'Content-Type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"'
        ])->deleteFileAfterSend(true);
    }



    public function getFilteredAgents(Request $request)
    {
        try {
            $filters = [
                'agent_status_id' => $request->input('agent_status_id'),  // Estado (activo/inactivo)
                'region_id' => $request->input('region_id'),  // Región (opcional)
                'office_id' => $request->input('office_id'),  // Oficina (opcional)
				'search' => $request->input('search'),
            ];

            // Llamar al servicio para filtrar agentes
            $agents = $this->agentService->getAgentsWithFilters($filters, 10);

           // 📌 Devolver la vista con los datos filtrados usando Inertia
        return Inertia::render("Agents/Index", [
            'agents' => $agents,
            //'filters' => $filters, // Enviar los filtros para mantenerlos en la UI
        ]);

        } catch (\Exception $e) {
            return back()->withErrors([
                'error' => 'Error al obtener agentes filtrados.',
                'details' => $e->getMessage(),
            ]);
        }
    }


    public function index(Request $request)
    {
        try {
            $options = $this->agentService->getFormOptionsindex();

            $filters = [
                'agent_status_id' => $request->input('agent_status_id'),
                'region_id' => $request->input('region_id'),
                'office_id' => $request->input('office_id'),
                'search' => $request->input('search'),
            ];
            $perPage = $request->input('per_page', 10);

            Log::info('Filtros recibidos en index de agentes:', $filters);

            $hasFilters = !empty(array_filter($filters, function($value) {
                return $value !== null && $value !== '';
            }));

            if (!$hasFilters) {
                Log::info('No hay filtros activos - obteniendo todos los agentes');
                $agents = $this->agentService->getAll();
            } else {
                Log::info('Aplicando filtros a agentes:', $filters);
                $agents = $this->agentService->getAgentsWithFilters($filters, $perPage );
            }

            return Inertia::render('Agents/Index', [
                'agents' => $agents,
                'options' => $options,
                'filters' => $filters,
            ]);

        } catch (\Exception $e) {
            Log::error('Error al obtener agentes: ' . $e->getMessage());
            Log::error($e->getTraceAsString());

            return back()->withErrors([
                'error' => 'Error al obtener agentes.',
                'details' => $e->getMessage(),
            ]);
        }
    }
    public function indexPage(Request $request): JsonResponse
    {
        $perPage = $request->get('per_page', 10);
        $agents = $this->agentService->getAllWithPagination($perPage);
        return response()->json($agents);
    }
    public function filter(Request $request)
    {
        $filters = $request->all();

        $agents = $this->agentService->filterAgents($filters);

        return Inertia::render('Agents/Index', [
            'agents' => $agents,
        ]);
    }
    public function create()
    {
        // Obtener datos necesarios para el formulario desde el servicio
        $data = $this->agentService->create();

        return Inertia::render("Agents/create", [
            'formData' => $data // Enviar datos necesarios al frontend
        ]);
    }

	public function store(StoreAgentRequest $request)
	{

			DB::beginTransaction();

			Log::info('📥 Datos recibidos en la request:', $request->all());


			$dto = AgentDto::from($request->validated());

			// 🔹 Manejo de imagen si se recibe en formato Base64
			if ($request->filled('image_agent')) {
				Log::info('🖼️ Se recibió una imagen en formato Base64.');

				$imageName = $this->imageService->uploadAndResizeImageFromBase64(
					$request->input('image_agent'),
					'agents',
					null,
					240,
					360
				);

				$dto->image_name = $imageName;
				Log::info("🖼️ Imagen guardada como: $imageName");
			}

			$agent = $this->agentService->store($dto);
			$agentId = $agent->id;

			Log::info(" Agente creado con ID {$agentId}");


			$userId = $agent->user_id;
			$user = User::find($userId);

			if (!$user) {
				throw new \Exception(" Error: No se encontró el usuario con ID {$userId}");
			}

			Log::info(" Usuario encontrado con ID {$user->id}");

			if ($request->filled('role_id')) {
                $roleId = $request->input('role_id'); // Captura el ID del rol
                $role = Role::find($roleId); // Buscamos el rol con ese ID

                if ($role) {
                    // Asignar el rol al usuario con Spatie
                    $user->syncRoles([$role->name]);
                    Log::info("✅ Rol '{$role->name}' asignado al usuario con ID {$user->id}");

                    $roleExists = DB::table('model_has_roles')
                        ->where('role_id', $roleId)
                        ->where('model_id', $user->id)
                        ->where('model_type', User::class)
                        ->exists();

                    if ($roleExists) {
                        Log::info("🔍 Verificación exitosa: El usuario {$user->id} tiene el rol '{$role->name}' en model_has_roles.");
                    } else {
                        Log::error("❌ Error: No se insertó el rol en model_has_roles para el usuario {$user->id}");
                    }
                } else {
                    Log::warning("⚠️ No se encontró un rol con ID {$roleId} para asignar al usuario {$user->id}");
                }
            }


            if ($request->filled('permissions')) {
                $permissions = $request->input('permissions'); // array de nombres como 'edit user', etc.

                // Asignar permisos usando Spatie
                $user->syncPermissions($permissions);

                Log::info("🔐 Permisos asignados al usuario {$user->id}:", $permissions);
            }

            $userId = $agent->user_id;
			$counter = 0;
			$maxAchievements = 7;

			foreach ($request->input('achievement_user', []) as $achievementData) {
				if ($counter >= $maxAchievements) {
					Log::info("Se alcanzó el límite máximo de $maxAchievements logros procesados.");
					break;
				}

				Log::info("Asignando logro a agente ID: $agentId");

				AchievementUser::create([
					'achievement_id' => $achievementData['id'],
					'achievement_date' => $achievementData['achievement_date'] ?? null,
					'enable_achievement' => $achievementData['enable_achievement'] ?? 0,
					'user_id' => $userId,
				]);

				$counter++;
			}

			foreach ($request->input('social_networks', []) as $networkData) {
				SocialNetwork::create([
					'agent_id' => $agentId,
					'name' => $networkData['name'],
					'state' => $networkData['state'] ?? 0,
					'url' => $networkData['url'] ?? '',
				]);
			}


			foreach ($request->input('area_specialities_user', []) as $asData) {
				AreaSpecialityUser::create([
					'area_speciality_id' => $asData['area_speciality_id'],
					'user_id' =>$userId ,
				]);
			}
            if ($request->hasFile('archivo')) {
                Log::info("✅ Archivos detectados correctamente en la request.", ['archivo' => $request->file('archivo')]);
                $this->storeDocumentacion($agentId, $request);
            } else {
                Log::error("🚨 No se detectaron archivos adjuntos en la request.");
            }


			DB::commit(); // Confirmar transacción

			if ($request->expectsJson()) {
                return response()->json(['message' => 'Agente creado exitosamente'], 201);
            }

            return to_route('agents.index');

	}


    public function storeExternal(StoreAgentRequest $request): JsonResponse
    {
        try {

            $dto = AgentDto::from($request->validated());

            // Crear el agente utilizando el servicio correspondiente
            $agent = $this->agentService->store($dto);

            return response()->json([
                'message' => 'Agente y usuario creados exitosamente',
                'agent' => $agent
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Error al crear el agente: ' . $e->getMessage(),
            ], 500);
        }
    }


    public function show(string $id)
    {
            // Obtener el agente con el usuario relacionado
            $agent = $this->agentService->findById($id);
             $contactsCount = Agent::countContactsByAgent($id);

             $listingsCount = Agent::countListingsByAgent($id);

            $socialNetworks = $this->socialNetworkService->getAllByAgentId($id);
            $achievementuser = $this->AchievementService->getAllByAgentId($id);
            $areaSpecialityUser = $this->areaSpecialityUser->getAllByAgentId($id);

            // Obtener calificaciones del agente
            $qualifications = $this->qualificationService->getAllByAgentId($id);

            // Obtener metas del agente
            $goals = [];

            // Generar la URL de la imagen si existe
            $imageUrl = $agent->image_name
            ? Storage::disk('public')->url('agents/' . $agent->image_name)
            : Storage::disk('public')->url('agents/agent-defaul.gif');

            // Convertir el agente a array y agregar la URL de la imagen
            $agentArray = $agent->toArray();
            $agentArray['image_url'] = $imageUrl;
            $agentArray['contacts_count'] = $contactsCount;
            $agentArray['listings_count'] = $listingsCount;
            $agentArray['socialNetworks'] = $socialNetworks;
            $agentArray['qualifications'] = $qualifications;
            $agentArray['areaSpecialityUser'] = $areaSpecialityUser;
            $agentArray['goals'] = $goals;
			$agentArray['achievementuser'] = $achievementuser;
            $agentArray['region_name'] = $agent->region->name ?? 'Sin región asignada';
            $agentArray['office_name'] = $agent->office->name ?? 'Sin región asignada';

            // Retornar el agente con la URL de la imagen
            //return Inertia::render('Agents/Show', $agentArray);
            // Retornar el objeto en formato JSON
            return response()->json($agentArray);

    }

    public function edit(Request $request)
    {
        Log::info("Request recibido en edit:", ['query_params' => $request->query()]);

        $agentId = $request->query('agent_id');

        if (!$agentId) {
            Log::error("No se proporcionó un ID de agente.");
            return Redirect::route('agents.index')->withErrors([
                'error' => 'No se proporcionó un ID de agente.'
            ]);
        }

        Log::info("ID del agente recibido:", ['agent_id' => $agentId]);

        $agent = $this->show($agentId);
        $formData = $this->agentService->getFormOptions();
        $logs = app(AuditLogService::class)->getAuditLogsByAgent($agentId);

        if (!$agent) {
            Log::error(" Agente no encontrado con ID:", ['agent_id' => $agentId]);
            return Inertia::render("Agents/Edit", [
                'agent' => null,
                'error' => 'El agente no fue encontrado.'
            ])->withStatus(404);
        }

        return Inertia::render("Agents/Edit", [
            'agent' => $agent,
            'formData' => $formData,
            'logs' => $logs
        ]);
    }



    public function update(UpdateAgentRequest $request, string $id)
    {

        $dto = AgentDto::from($request->validated());

        if ($request->filled('image_agent')) {
            Log::info('Se recibió una imagen en formato Base64.');

            $currentFileName = $dto->image_name; // Nombre de la imagen actual

            $imageName = $this->imageService->updateuploadAndReplaceImageFromBase64(
                $request->input('image_agent'), // Imagen en Base64
                'agents', // Carpeta de almacenamiento
                null, // Generar automáticamente un nombre
                240, // Ancho deseado
                360, // Alto deseado
                $currentFileName // Nombre de la imagen actual
            );

            // Asignar el nombre de la nueva imagen al DTO
            $dto->image_name = $imageName;
        }

        // Transacción solo para la tabla achievement_users
		DB::transaction(function () use ($request) {

			// **Actualizar Usuario Asociado**

			$counter = 0; // Inicializar el contador
			$maxAchievements = 7; // Límite máximo de iteraciones

			foreach ($request->input('achievementuser', []) as $achievementData) {
				if ($counter >= $maxAchievements) {
					Log::info("Se alcanzó el límite máximo de $maxAchievements logros procesados.");
					break; // Detener el bucle si se supera el límite
				}

				Log::info("Procesando logro ID: ", $achievementData);

				if (!isset($achievementData['id']) || empty($achievementData['id'])) {
					Log::info("Creando nuevo logro para user_id: " . $request->input('user_id'));
					AchievementUser::create([
						'achievement_id' => $achievementData['achievement_id'],
						'achievement_date' => $achievementData['achievement_date'] ?? null,
						'enable_achievement' => $achievementData['enable_achievement'] ?? 0,
						'user_id' => $request->input('user_id'),
					]);
				} else {
					Log::info("Actualizando logro existente ID: " . $achievementData['id']);
					AchievementUser::where('id', $achievementData['id'])->update([
						'achievement_date' => $achievementData['achievement_date'] ?? null,
						'enable_achievement' => $achievementData['enable_achievement'] ?? 0,
						'achievement_id' => $achievementData['achievement_id'],
					]);
				}

				$counter++; // Incrementar el contador después de cada iteración
			}
		});

		foreach ($request->input('socialNetworks', []) as $networkData) {
            SocialNetwork::updateOrCreate(
                [
                    'id' => $networkData['id'] ?? null, // Buscar por ID si existe
                    'agent_id' =>$request->input('id')// Asegurar que se relacione con el agente correcto
                ],
                [
                    'name' => $networkData['name'],
                    'state' => $networkData['state'] ?? 0, // Estado por defecto 0 si no está definido
                    'url' => $networkData['url'] ?? '', // URL vacía si no se proporciona
                ]
            );
        }
         foreach ($request->input('areaSpecialityUser', []) as $asData) {
            // Si es necesario manejar fechas o campos que requieran un valor por defecto, establecer aquí
            // $today = Carbon::now()->toDateString();  // Ejemplo si necesitas una fecha

            $areaSpecialityUser = AreaSpecialityUser::updateOrCreate(
                [
                    // Claves para buscar un registro existente
                    'area_speciality_id' => $asData['area_speciality_id'], // Suponiendo que esta es la clave principal
                    'user_id' => $asData['user_id']  // Asegúrate de que este conjunto identifica unívocamente el registro
                ],
            );


        }

		// Pasar el DTO al servicio para actualizar el registro
        $agent = $this->agentService->update($id, $dto);
        $this->updateUser($agent, $request->get('user', []));
        $user = $agent->user;

        // 🔐 Sincronizar permisos si vienen
        if ($user && $request->has('permissions')) {
            $permissions = $request->input('permissions', []);
            $user->syncPermissions($permissions);
            Log::info("✅ Permisos sincronizados con éxito", ['permissions' => $permissions]);
        }

        if ($request->hasFile('archivo')) {
            Log::info("✅ Archivos detectados correctamente en la request.", ['archivo' => $request->file('archivo')]);
            $this->storeDocumentacion($id, $request);
        } else {
            Log::error("🚨 No se detectaron archivos adjuntos en la request.");
        }
        $userLogin = Auth::id();
        Log::info("Logs recibidos antes de guardar:", ['logs' => $request->input('logs', [])]);

        $this->saveAuditLogs($request->input('logs', []), $agent->id,  $userLogin);

        if ($request->expectsJson()) {
            return response()->json(['message' => 'Agente actulizado exitosamente'], 201);
        }

        return to_route('agents.index');
		}



        private function updateUser(Agent $agent, array $userData)
		{
			$user = $agent->user;

			if (!$user) {
				Log::warning("⚠ El usuario asociado al agente {$agent->id} es NULL y no se puede actualizar.");
				return;
			}

			if (empty($userData)) {
				Log::warning("⚠ No se enviaron datos de usuario para actualizar el agente {$agent->id}");
				return;
			}

			Log::info("📡 Datos recibidos para actualizar usuario del agente {$agent->id}: ", $userData);

			// Validación de los datos
			$validator = Validator::make($userData, [
				'first_name' => 'nullable|string|max:255',
				'middle_name' => 'nullable|string|max:255',
				'last_name' => 'nullable|string|max:255',
				'name_to_show' => 'nullable|string|max:255',
				'ci' => 'nullable|string|max:50',
				'gender' => 'nullable|string',
				'phone_number' => 'nullable|string|max:20',
				'email' => 'nullable|string|max:255',
				'url' => 'nullable|string|max:255',
                //'url' => 'nullable|string|max:255|unique:users,url,',
				'remax_start_date' => 'nullable|date',
				'birthdate' => 'nullable|date',
				'password' => 'nullable|string|min:8',
				'username' => 'nullable|string|max:255',
				'user_type_id' => 'nullable|numeric',
				'remax_title_id' => 'nullable|numeric',
				'remax_title_to_show_id' => 'nullable|numeric',
				'team_status_id' => 'nullable|numeric',
				'customer_preference_id' => 'nullable|numeric',
                'state_url'=> 'nullable|numeric',
                'roles' => 'nullable|array',
                'roles.*.id' => 'nullable|numeric',
                'roles.*.name' => 'nullable|string'
			]);

			if ($validator->fails()) {
				throw new \Exception('❌ Error en la validación del usuario: ' . $validator->errors()->first());
			}

			$validatedData = $validator->validated();
            $validatedData = $validator->validated();

            // 2. Separar roles y eliminarlos del array antes del update
            $roles = $validatedData['roles'] ?? [];
            unset($validatedData['roles']);

			// **Formatear fechas correctamente antes de la actualización**
			try {
				if (!empty($validatedData['remax_start_date'])) {
					$validatedData['remax_start_date'] = Carbon::parse($validatedData['remax_start_date'])->format('Y-m-d');
				}

				if (!empty($validatedData['birthdate'])) {
					$validatedData['birthdate'] = Carbon::parse($validatedData['birthdate'])->format('Y-m-d');
				}
                if (!empty($userData['roles'])) {
                    $roleId = $userData['roles'][0]['id'] ?? null;
                    $roleName = $userData['roles'][0]['name'] ?? null;

                    Log::info("🧾 Role ID recibido para sincronizar en el usuario {$user->id}:", [
                        'role_id' => $roleId,
                        'role_name' => $roleName,
                        'roles_array_completo' => $userData['roles']
                    ]);

                    if (!empty($roleName)) {
                        $user->syncRoles([$roleName]); // Solo si name es válido
                    } else {
                        Log::warning("⚠️ No se sincronizó ningún rol porque roleName está vacío.");
                    }
                }
			} catch (\Exception $e) {
				throw new \Exception('⚠ Error en el formato de fecha: ' . $e->getMessage());
			}

			// **Preparar los datos a actualizar**
			$updatedFields = [];
			foreach ($validatedData as $key => $value) {
				if (!is_null($value)) {
					$updatedFields[$key] = $value;
				}
			}

			if (isset($updatedFields['password']) && !empty($updatedFields['password'])) {
                Log::info('🔐 Password recibido para encriptar:', ['input_password' => $updatedFields['password']]);

                $updatedFields['password'] = Hash::make($updatedFields['password']);

                Log::info('✅ Password hasheado:', ['hash' => $updatedFields['password']]);
            }


			Log::info("⚡ Campos a actualizar en usuario {$user->id}: ", $updatedFields);

			// **Actualizar usuario si hay cambios**
			if (!empty($updatedFields)) {
				$user->forceFill($updatedFields)->save();
				Log::info("✅ Usuario {$user->id} actualizado correctamente.");
			} else {
				Log::warning("⚠ No hay cambios en los datos del usuario {$user->id}, no se actualizó.");
			}
		}


        public function storedocumentacion(string $agentid, Request $request)
        {
            // 🔍 LOG antes de la validación para depuración
            Log::info("📥 Logs recibidos antes de validar:", [
                'archivo' => $request->file('archivo'),
                'input_files' => $request->input('archivo', []),
            ]);

            // ✅ Validación correcta
            $request->validate([
                'archivo' => 'required|array',
                'archivo.*' => 'required|file|mimes:pdf,jpeg,png,jpg,gif|max:2048',
                'descriptions' => 'nullable|array',
                'descriptions.*' => 'nullable|string',
                'types' => 'nullable|array',
                'types.*' => 'required|exists:documentation_types,id',
            ]);

            // ❌ ERROR en `$request->has('files')`, corregido a `archivo`
            if (!$request->hasFile('archivo')) {
                Log::error("🚨 No se detectaron archivos en la request.");
                return response()->json(['message' => 'No files received'], 400);
            }

            // ✅ Obtener archivos correctamente
            $files = $request->file('archivo');
            $descriptions = $request->input('descriptions', []);
            $types = $request->input('types', []);

            Log::info("📂 Archivos después de la validación:", ['files' => $files]);

            $documentListingData = [];

            foreach ($files as $index => $file) {
                $description = $descriptions[$index] ?? null;
                $typeId = $types[$index] ?? null;

                if (!$file || !$file->isValid()) {
                    Log::error("❌ Archivo no válido en el índice $index", ['file' => $file]);
                    continue;
                }

                Log::info("📂 Procesando archivo: {$file->getClientOriginalName()}");

                // ✅ Guardar el archivo correctamente
                $fileName = $this->imageService->uploadImageFromFile($file, self::DOCUMENTS_DIRECTORY);

                if (!$fileName) {
                    Log::error("⚠ Error al subir el archivo: {$file->getClientOriginalName()}");
                    continue;
                }

                Log::info("✅ Archivo guardado correctamente en: " . self::DOCUMENTS_DIRECTORY . '/' . $fileName);

                // ✅ Guardar en la base de datos
                $document = Documentation::create([
                    'link' =>  $fileName,
                    'description' => $description,
                    'documentation_type_id' => $typeId,
                    'original_name' => $file->getClientOriginalName(),
                ]);

                Log::info("📄 Documento guardado en la base de datos con ID: " . $document->id);

                $documentListingData[] = [
                    'documentation_id' => $document->id,
                    'agent_id' => $agentid,
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }

            // ✅ Insertar en la tabla de relación si hay documentos
            if (!empty($documentListingData)) {
                DB::table('agents_documentations')->insert($documentListingData);
                Log::info("✅ Se insertaron los documentos en agents_documentations.");
            } else {
                Log::warning("⚠ No se insertaron documentos en agents_documentations.");
            }

            return response()->json([
                'message' => 'Files uploaded and documents created successfully',
            ], 201);
        }


    private function saveAuditLogs(array $logs, int $agentId, ?int $userId)
    {
        Log::info("📌 Entrando a saveAuditLogs con los siguientes datos:", [
            'agent_id' => $agentId,
            'user_id' => $userId,
            'logs' => $logs
        ]);

        foreach ($logs as $log) {

            if (!isset($log['field'], $log['newValue'])) {
                Log::warning("⚠ Log omitido por datos incompletos (falta field o newValue):", $log);
                continue;
            }

            $log['timestamp'] = now()->format('Y-m-d H:i:s');

            DB::table('audit_logs')->insert([
                'agent_id' => $agentId,
                'user_id' => $userId,
                'field_name' => $log['field'],
                'old_value' => $log['oldValue'] ?? null,
                'new_value' => $log['newValue'] ?? null,
                'notes' => $log['notes'] ?? null,
                'created_at' => $log['timestamp'],
                'updated_at' => now(),
            ]);

            Log::info("✅ Log guardado correctamente con fecha actual:", [
                'agent_id' => $agentId,
                'user_id' => $userId,
                'field_name' => $log['field'],
                'old_value' => $log['oldValue'] ?? null,
                'new_value' => $log['newValue'],
                'created_at' => $log['timestamp']
            ]);
        }
    }


    public function destroy(string $id)
    {
        $this->agentService->delete($id);
        return response()->json([
            'message' => 'Agente eliminado correctamente.'
        ]);
    }

    public function getListings($id)
    {
        $agent = Agent::find($id);
        return response()->json($agent->listings->where('status_listing_id', 2));
    }

	public function migrateAgentsGriAPI () {
		set_time_limit(0);

        Log::info('Migrando agentes desde iConnect API...');

		$token = $this->iconectService->getAuthTokenserv();

        Log::info('Token obtenido: ' . $token);

		$this->iconectService->migrateAgents($token);
	}

    public function handleAgentImageMigration(Request $request)
    {
        $agents = $request->input('agents');

        if (!is_array($agents)) {
            return response()->json(['error' => 'El formato de los agentes es inválido.'], 422);
        }

        $this->agentService->migrateAgentImage($agents);

        return response()->json(['message' => 'Migración de imágenes completada con éxito.']);
    }


    // public function fix () {
    //     $agents = Agent::whereNull('office_id')
    //         ->whereNull('region_id')
    //         ->whereNotNull('agent_internal_id')
    //         ->get();

    //     foreach ($agents as $agent) {
    //         echo($agent->id);
    //         $office_id = substr($agent->agent_internal_id, 0, 6);
    //         $region_id = substr($agent->agent_internal_id, 0,3);

    //         $agent->office_id = $office_id;
    //         $agent->region_id = 120;
    //         $agent->save();
    //     }

    //     return response()->json([
    //         'message' => 'Fixed!'
    //     ]);
    // }



    // public function addTestingRoles () {
    //     $broker = Agent::find(1423);
    //     $agent = Agent::find(1400);

    //     $broker->user->syncRoles(['Broker']);
    //     $agent->user->syncRoles(['Agente']);
    // }

    // public function addTestingRoles () {
    //     $allBrokers = User::role('Broker')
    //         ->get();
    //     //dd($allBrokers);

    //     foreach ($allBrokers as $broker) {
    //         $broker->syncPermissions(['list acm', 'agent panel', 'office panel', 'show transaction', 'create transaction', 'create property', 'edit property', 'delete property' ,'edit transaction', 'list transactions', 'list properties']);
    //     }

    //     $agent = Agent::find(1400);
    //     $agent->user->syncPermissions(['list acm', 'agent panel', 'create property', 'edit property', 'delete property', 'list properties']);
    // }

    // public function addTestingRoles () {
    //     $allBrokers = User::role('Broker')
    //         ->where('id', '!=', 1423)
    //         ->get();

    //     $positiveWords = ['Success', 'Victory', 'Happiness', 'Joyful', 'Brave', 'Bright', 'Noble', 'Strong'];
    //     $passwords = [];

    //     foreach ($allBrokers as $broker) {
    //         $randomWord = $positiveWords[array_rand($positiveWords)];
    //         $randomNumber = rand(100, 999);
    //         $generatedPassword = substr($randomWord, 0, 5) . $randomNumber;
    //         $broker->password = bcrypt($generatedPassword);
    //         $broker->save();

    //         $passwords[] =$broker->name_to_show . '-' . $broker->username . ' - ' . $generatedPassword;
    //     }

    //     $filePath = storage_path('app/public/generated_passwords.txt');
    //     file_put_contents($filePath, implode(PHP_EOL, $passwords));

    //     return response()->json([
    //         'message' => 'Contraseñas generadas y guardadas en generated_passwords.txt',
    //         'file_path' => $filePath
    //     ]);
    // }

    public function addBrokerRoleAndPassword () {

        DB::beginTransaction();

        $agents_id = [
            1200904168
        ];

        $positiveWords = ['Success', 'Victory', 'Happiness', 'Joyful', 'Brave', 'Bright', 'Noble', 'Strong'];

        $passwords = [];

        try{
        foreach ($agents_id as $agent_id) {


            $agent = Agent::where('agent_internal_id',$agent_id)->first();
            $user = $agent->user;

            $user->syncPermissions(['list acm', 'agent panel', 'office panel', 'show transaction', 'create transaction', 'create property', 'edit property', 'delete property' ,'edit transaction', 'list transactions', 'list properties']);

            $randomWord = $positiveWords[array_rand($positiveWords)];
            $randomNumber = rand(100, 999);
            $generatedPassword = substr($randomWord, 0, 5) . $randomNumber;

            $user->password = bcrypt($generatedPassword);
            $user->save();

            $passwords[] =$user->name_to_show . '-' . $user->username . ' - ' . $generatedPassword;

            if ($user) {
                $user->syncRoles(['Broker']);
            } else {
                echo ($agent_id);
            }
        }


        DB::commit();
            dd($passwords);
        }catch(Exception $e){
            DB::rollBack();
            return response()->json([
                'message' => 'Error: ' . $e->getMessage()
            ]);
        }
    }
    public function addChangeStatusTransactionPermissionOnBrokers () {
        $allBrokers = User::role('Broker')
            ->get();

        foreach ($allBrokers as $broker) {
            $broker->givePermissionTo(['change status']);
        }

        dd('Done :)');
    }

    public function addPermission () {
        $brokers = User::role('Broker')
            ->get();

        foreach ($brokers as $broker) {
            $broker->givePermissionTo('show_reports');
        }
    }


    public function changePermissionsNew () {
        $file = storage_path('app/public/nombre-usuario-psw.txt');

        $lines = file($file);

        foreach($lines as $line) {
            $data = explode('-', $line);
            $user = $data[1];

            $user = User::where('username', $user)->first();

            if($user) {
                 $user->givePermissionTo([
                    'list acm',
                    'agent panel',
                    'office panel',

                    'create property',
                    'edit property',
                    'delete property',
                    'list properties',

                    'list transactions',
                    'show transaction',
                    'create transaction',
                    'show reports'
                 ]);

                 //print($user->name)
                 $user->revokePermissionTo([
                    'edit transaction',
                    'change status'
                 ]);
            }
        }
    }

    public function migrateAgents () {

        $token = null;

        try {
			$clientSecret = "F51455EF-29C4-48AF-97AE-7E6590A81294";
			$clientID = "0D8CD071-B319-48B3-8269-80A361113D78";

			// Valores de prueba
			$response = Http::post("https://api.goiconnect.com/api/OAuth/GetToken", [
				'grant_type' => "client_credentials",
				'client_id' => $clientID,
				'client_secret' => $clientSecret,
				'scope' => 'api'
			]);

			if ($response->status() === 200) {
                $token = $response->json()['access_token'];
                Log::info("Token obtenido: $token");
            } else {
                Log::warning('❌ No se pudo obtener token. Status: ' . $response->status());
                return false;
            }
        } catch (\Exception $e) {
            Log::error("❌ Error pidiendo token: " . $e->getMessage());
            throw $e;
            return false;
        }

        $agent_ids =
        [
        // 120001100 ,
        // 120001119 ,
        // 120001124 ,
        // 120001129 ,
        // 120016001 ,
        // 120016002 ,
        // 120016003 ,
        // 120016018 ,
        // 120016019 ,
        // 120016020 ,
        // 120016022 ,
        // 120016023 ,
        // 120016025 ,
        // 120016026 ,
        // 120016027 ,
        // 120016028 ,
        // 120016029 ,
        // 120016030 ,
        // 120016031 ,
        // 120016032 ,
        // 120016033 ,
        // 120016034 ,
        // 120016035 ,
        // 120016036 ,
        // 120016037 ,
        // 120016038 ,
        // 120016039 ,
        // 120016040 ,
        // 120016041 ,
        // 120016042 ,
        // 120016043 ,
        // 120016044 ,
        // 120016045 ,
        // 120016046 ,
        // 120016047 ,
        // 120016048 ,
        // 120016049 ,
        // 120016050 ,
        // 120016051 ,
        // 120016052 ,
        // 120016053 ,
        // 120016054 ,
        // 120016055 ,
        // 120016056 ,
        // 120016057 ,
        // 120016058 ,
        // 120016059 ,
        // 120016060 ,
        // 120016061 ,
        // 120016062 ,
        // 120016063 ,
        // 120016064 ,
        // 120016065 ,
        // 120016066 ,
        // 120016067 ,
        // 120016068 ,
        // 120016069 ,
        // 120016070 ,
        // 120016071 ,
        // 120016072 ,
        // 120016073 ,
        // 120016074 ,
        // 120016075 ,
        // 120016076 ,
        // 120016077 ,
        // 120016078 ,
        // 120016079 ,
        // 120016080 ,
        // 120016081 ,
        // 120016082 ,
        // 120016083 ,
        // 120016084 ,
        // 120016085 ,
        // 120016086 ,
        // 120016087 ,
        // 120016088 ,
        // 120016089 ,
        // 120016090 ,
        // 120016091 ,
        // 120016092 ,
        // 120016093 ,
        // 120016094 ,
        // 120016095 ,
        // 120016096 ,
        // 120016097 ,
        // 120016098 ,
        // 120016099 ,
        // 120016100 ,
        // 120016101 ,
        // 120016102 ,
        // 120016103 ,
        // 120016104 ,
        // 120016105 ,
        // 120016106 ,
        // 120016107 ,
        // 120016108 ,
        // 120016109 ,
        // 120016110 ,
        // 120016111 ,
        // 120016112 ,
        // 120016113 ,
        // 120016114 ,
        // 120016115 ,
        // 120016116 ,
        // 120016117 ,
        // 120016118 ,
        // 120016119 ,
        // 120016120 ,
        // 120016121 ,
        // 120016122 ,
        // 120016123 ,
        // 120016124 ,
        // 120016125 ,
        // 120016126 ,
        // 120016127 ,
        // 120016128 ,
        // 120016129 ,
        // 120016130 ,
        // 120016131 ,
        // 120016132 ,
        // 120016133 ,
        // 120016134 ,
        // 120016135 ,
        // 120016136 ,
        // 120016137 ,
        // 120016138 ,
        // 120016139 ,
        // 120016140 ,
        // 120016141 ,
        // 120016142 ,
        // 120016143 ,
        // 120016144 ,
        // 120016145 ,
        // 120016146 ,
        // 120016147 ,
        // 120016148 ,
        // 120016149 ,
        // 120016150 ,
        // 120016151 ,
        // 120016152 ,
        // 120016153 ,
        // 120016154 ,
        // 120016155 ,
        // 120016156 ,
        // 120016157 ,
        // 120017012 ,
        // 120017019 ,
        // 120017020 ,
        // 120017021 ,
        // 120017023 ,
        // 120017024 ,
        // 120017025 ,
        // 120017026 ,
        // 120017027 ,
        // 120017028 ,
        // 120017029 ,
        // 120017030 ,
        // 120017031 ,
        // 120017032 ,
        // 120017033 ,
        // 120017034 ,
        // 120017035 ,
        // 120017036 ,
        // 120017037 ,
        // 120017038 ,
        // 120017039 ,
        // 120017040 ,
        // 120017041 ,
        // 120017042 ,
        // 120017043 ,
        // 120017044 ,
        // 120017045 ,
        // 120017046 ,
        // 120017047 ,
        // 120017048 ,
        // 120017049 ,
        // 120017050 ,
        // 120017051 ,
        // 120017052 ,
        // 120017053 ,
        // 120017054 ,
        // 120017055 ,
        // 120017056 ,
        // 120017057 ,
        // 120017058 ,
        // 120017059 ,
        // 120017060 ,
        // 120017061 ,
        // 120017062 ,
        // 120017063 ,
        // 120017064 ,
        // 120017065 ,
        // 120017066 ,
        // 120017067 ,
        // 120017068 ,
        // 120017069 ,
        // 120017070 ,
        // 120017071 ,
        // 120017072 ,
        // 120017073 ,
        // 120017074 ,
        // 120017075 ,
        // 120017076 ,
        // 120017077 ,
        // 120017078 ,
        // 120017079 ,
        // 120017080 ,
        // 120017081 ,
        // 120017082 ,
        // 120017083 ,
        // 120017084 ,
        // 120017085 ,
        // 120017086 ,
        // 120017087 ,
        // 120017088 ,
        // 120017089 ,
        // 120017090 ,
        // 120017091 ,
        // 120017092 ,
        // 120017093 ,
        // 120017094 ,
        // 120017095 ,
        // 120017096 ,
        // 120017097 ,
        // 120017098 ,
        // 120017099 ,
        // 120017100 ,
        // 120017101 ,
        // 120017102 ,
        // 120017103 ,
        // 120017104 ,
        // 120017105 ,
        // 120017106 ,
        // 120017107 ,
        // 120017108 ,
        // 120017109 ,
        // 120017110 ,
        // 120017111 ,
        // 120017112 ,
        // 120017113 ,
        // 120017114 ,
        // 120017115 ,
        // 120017116 ,
        // 120017117 ,
        // 120017118 ,
        // 120017119 ,
        // 120017120 ,
        // 120017121 ,
        // 120017122 ,
        // 120017123 ,
        // 120017124 ,
        // 120017125 ,
        // 120017126 ,
        // 120017127 ,
        // 120017128 ,
        // 120017129 ,
        // 120017130 ,
        // 120017131 ,
        // 120017132 ,
        // 120017133 ,
        // 120017134 ,
        // 120017135 ,
        // 120017136 ,
        // 120017137 ,
        // 120017138 ,
        // 120017139 ,
        // 120017140 ,
        // 120017141 ,
        // 120017142 ,
        // 120017143 ,
        // 120017144 ,
        // 120017145 ,
        // 120017146 ,
        // 120017147 ,
        // 120017148 ,
        // 120017149 ,
        // 120017150 ,
        // 120017151 ,
        // 120017152 ,
        // 120017153 ,
        // 120017154 ,
        // 120017155 ,
        // 120017156 ,
        // 120017157 ,
        // 120017158 ,
        // 120017159 ,
        // 120017160 ,
        // 120017161 ,
        // 120017162 ,
        // 120017163 ,
        // 120017164 ,
        // 120017165 ,
        // 120017166 ,
        // 120017167 ,
        // 120017168 ,
        // 120017169 ,
        // 120017170 ,
        // 120017171 ,
        // 120017172 ,
        // 120017173 ,
        // 120017174 ,
        // 120017175 ,
        // 120017176 ,
        // 120017177 ,
        // 120017178 ,
        // 120017179 ,
        // 120017180 ,
        // 120017181 ,
        // 120017182 ,
        // 120017183 ,
        // 120017184 ,
        // 120017185 ,
        // 120017186 ,
        // 120017187 ,
        // 120017188 ,
        // 120017189 ,
        // 120017190 ,
        // 120017191 ,
        // 120017192 ,
        // 120017193 ,
        // 120017194 ,
        // 120017195 ,
        // 120017196 ,
        // 120017197 ,
        // 120017198 ,
        // 120017199 ,
        // 120017200 ,
        // 120017201 ,
        // 120017202 ,
        // 120017203 ,
        // 120017204 ,
        // 120017205 ,
        // 120017206 ,
        // 120017207 ,
        // 120017208 ,
        // 120017209 ,
        // 120017210 ,
        // 120017211 ,
        // 120017212 ,
        // 120017213 ,
        // 120017214 ,
        // 120018001 ,
        // 120018002 ,
        // 120018006 ,
        // 120018007 ,
        // 120018008 ,
        // 120018009 ,
        // 120018010 ,
        // 120018011 ,
        // 120018012 ,
        // 120018013 ,
        // 120018014 ,
        // 120018015 ,
        // 120018016 ,
        // 120018017 ,
        // 120018018 ,
        // 120018019 ,
        // 120018020 ,
        // 120018021 ,
        // 120018022 ,
        // 120018023 ,
        // 120018024 ,
        // 120018025 ,
        // 120018026 ,
        // 120018027 ,
        // 120018028 ,
        // 120018029 ,
        // 120018030 ,
        // 120018031 ,
        // 120018032 ,
        // 120018033 ,
        // 120018034 ,
        // 120018035 ,
        // 120018036 ,
        // 120018037 ,
        // 120018038 ,
        // 120018039 ,
        // 120019001 ,
        // 120019002 ,
        // 120019005 ,
        // 120019011 ,
        // 120019012 ,
        // 120019013 ,
        // 120019014 ,
        // 120019016 ,
        // 120019017 ,
        // 120019018 ,
        // 120019019 ,
        // 120019020 ,
        // 120019021 ,
        // 120019022 ,
        // 120019023 ,
        // 120019024 ,
        // 120019025 ,
        // 120019026 ,
        // 120019027 ,
        // 120019028 ,
        // 120019029 ,
        // 120019030 ,
        // 120019031 ,
        // 120019032 ,
        // 120019033 ,
        // 120019034 ,
        // 120019035 ,
        // 120019036 ,
        // 120019037 ,
        // 120020002 ,
        // 120020004 ,
        // 120020005 ,
        // 120020009 ,
        // 120020014 ,
        // 120020017 ,
        // 120020019 ,
        // 120020021 ,
        // 120020022 ,
        // 120020024 ,
        // 120020025 ,
        // 120020026 ,
        // 120020027 ,
        // 120020028 ,
        // 120020029 ,
        // 120020030 ,
        // 120020031 ,
        // 120020032 ,
        // 120020033 ,
        // 120020034 ,
        // 120020035 ,
        // 120020036 ,
        // 120020037 ,
        // 120020038 ,
        // 120020039 ,
        // 120020040 ,
        // 120020041 ,
        // 120020042 ,
        // 120020043 ,
        // 120020044 ,
        // 120020045 ,
        // 120020046 ,
        // 120020047 ,
        // 120020048 ,
        // 120020049 ,
        // 120020050 ,
        // 120020051 ,
        // 120020052 ,
        // 120020053 ,
        // 120020054 ,
        // 120020055 ,
        // 120020056 ,
        // 120020057 ,
        // 120020058 ,
        // 120020059 ,
        // 120020060 ,
        // 120020061 ,
        // 120020062 ,
        // 120020063 ,
        // 120020064 ,
        // 120020065 ,
        // 120020066 ,
        // 120020067 ,
        // 120020068 ,
        // 120020069 ,
        // 120020070 ,
        // 120020071 ,
        // 120020072 ,
        // 120020073 ,
        // 120020074 ,
        // 120020075 ,
        // 120020076 ,
        // 120020077 ,
        // 120020078 ,
        // 120020079 ,
        // 120020080 ,
        // 120020081 ,
        // 120020082 ,
        // 120020083 ,
        // 120020084 ,
        // 120020085 ,
        // 120020086 ,
        // 120020087 ,
        // 120020088 ,
        // 120020089 ,
        // 120020090 ,
        // 120020091 ,
        // 120020092 ,
        // 120020093 ,
        // 120020094 ,
        // 120020095 ,
        // 120020096 ,
        // 120020097 ,
        // 120020098 ,
        // 120020099 ,
        // 120020100 ,
        // 120020101 ,
        // 120020102 ,
        // 120020103 ,
        // 120020104 ,
        // 120020105 ,
        // 120020106 ,
        // 120020107 ,
        // 120020108 ,
        // 120020109 ,
        // 120020110 ,
        // 120020111 ,
        // 120020112 ,
        // 120020113 ,
        // 120020114 ,
        // 120020115 ,
        // 120020116 ,
        // 120020117 ,
        // 120020118 ,
        // 120020119 ,
        // 120020120 ,
        // 120020121 ,
        // 120020122 ,
        // 120020123 ,
        // 120020124 ,
        // 120020125 ,
        // 120020126 ,
        // 120020127 ,
        // 120020128 ,
        // 120020129 ,
        // 120020130 ,
        // 120020131 ,
        // 120020132 ,
        // 120020133 ,
        // 120020134 ,
        // 120020135 ,
        // 120020136 ,
        // 120020137 ,
        // 120020138 ,
        // 120020139 ,
        // 120020140 ,
        // 120020141 ,
        // 120020142 ,
        // 120020143 ,
        // 120020144 ,
        // 120020145 ,
        // 120020146 ,
        // 120020147 ,
        // 120020148 ,
        // 120020149 ,
        // 120020150 ,
        // 120020151 ,
        // 120020152 ,
        // 120020153 ,
        // 120020154 ,
        // 120020155 ,
        // 120020156 ,
        // 120020157 ,
        // 120020158 ,
        // 120020159 ,
        // 120020160 ,
        // 120020161 ,
        // 120020162 ,
        // 120020163 ,
        // 120020164 ,
        // 120020165 ,
        // 120020166 ,
        // 120020167 ,
        // 120020168 ,
        // 120020169 ,
        // 120020170 ,
        // 120020171 ,
        // 120020172 ,
        // 120020173 ,
        // 120020174 ,
        // 120020175 ,
        // 120020176 ,
        // 120020177 ,
        // 120020178 ,
        // 120020179 ,
        // 120020180 ,
        // 120020181 ,
        // 120020182 ,
        // 120020183 ,
        // 120020184 ,
        // 120020185 ,
        // 120020186 ,
        // 120020187 ,
        // 120020188 ,
        // 120020189 ,
        // 120020190 ,
        // 120020191 ,
        // 120020192 ,
        // 120020193 ,
        // 120020194 ,
        // 120020195 ,
        // 120020196 ,
        // 120020197 ,
        // 120020198 ,
        // 120020199 ,
        // 120020200 ,
        // 120020201 ,
        // 120020202 ,
        // 120020203 ,
        // 120020204 ,
        // 120020205 ,
        // 120020206 ,
        // 120020207 ,
        // 120020208 ,
        // 120020209 ,
        // 120020210 ,
        // 120020211 ,
        // 120020212 ,
        // 120020213 ,
        // 120020214 ,
        // 120020215 ,
        // 120020216 ,
        // 120020217 ,
        // 120020218 ,
        // 120020219 ,
        // 120020220 ,
        // 120020221 ,
        // 120020222 ,
        // 120020223 ,
        // 120020224 ,
        // 120020225 ,
        // 120020226 ,
        // 120020227 ,
        // 120020228 ,
        // 120020229 ,
        // 120020230 ,
        // 120021002 ,
        // 120021013 ,
        // 120021015 ,
        // 120021016 ,
        // 120022001 ,
        // 120022002 ,
        // 120022004 ,
        // 120022006 ,
        // 120022008 ,
        // 120022009 ,
        // 120022011 ,
        // 120022012 ,
        // 120022013 ,
        // 120022014 ,
        // 120022015 ,
        // 120022016 ,
        // 120022017 ,
        // 120022018 ,
        // 120022019 ,
        // 120022020 ,
        // 120022021 ,
        // 120022022 ,
        // 120022023 ,
        // 120022024 ,
        // 120022025 ,
        // 120022026 ,
        // 120022027 ,
        // 120022028 ,
        // 120022029 ,
        // 120022030 ,
        // 120022031 ,
        // 120022032 ,
        // 120022033 ,
        // 120022034 ,
        // 120022035 ,
        // 120022036 ,
        // 120022037 ,
        // 120022038 ,
        // 120022039 ,
        // 120022040 ,
        // 120022041 ,
        // 120022042 ,
        // 120022043 ,
        // 120022044 ,
        // 120022045 ,
        // 120022046 ,
        // 120022047 ,
        // 120022048 ,
        // 120022049 ,
        // 120022050 ,
        // 120022051 ,
        // 120022052 ,
        // 120022053 ,
        // 120022054 ,
        // 120022055 ,
        // 120022056 ,
        // 120022057 ,
        // 120022058 ,
        // 120022059 ,
        // 120022060 ,
        // 120022061 ,
        // 120022062 ,
        // 120022063 ,
        // 120022064 ,
        // 120022065 ,
        // 120022066 ,
        // 120022067 ,
        // 120022068 ,
        // 120022069 ,
        // 120022070 ,
        // 120022071 ,
        // 120022072 ,
        // 120022073 ,
        // 120022074 ,
        // 120022075 ,
        // 120022076 ,
        // 120022077 ,
        // 120022078 ,
        // 120022079 ,
        // 120022080 ,
        // 120022081 ,
        // 120022082 ,
        // 120022083 ,
        // 120022084 ,
        // 120022085 ,
        // 120022086 ,
        // 120022087 ,
        // 120022088 ,
        // 120022089 ,
        // 120022090 ,
        // 120022091 ,
        // 120022092 ,
        // 120022093 ,
        // 120022094 ,
        // 120022095 ,
        // 120022096 ,
        // 120022097 ,
        // 120022098 ,
        // 120022099 ,
        // 120022100 ,
        // 120022101 ,
        // 120022102 ,
        // 120022103 ,
        // 120022104 ,
        // 120022105 ,
        // 120022106 ,
        // 120022107 ,
        // 120022108 ,
        // 120022109 ,
        // 120022110 ,
        // 120022111 ,
        // 120022112 ,
        // 120022113 ,
        // 120022114 ,
        // 120022115 ,
        // 120022116 ,
        // 120022117 ,
        // 120022118 ,
        // 120022119 ,
        // 120022120 ,
        // 120022121 ,
        // 120022122 ,
        // 120022123 ,
        // 120022124 ,
        // 120022125 ,
        // 120022126 ,
        // 120022127 ,
        // 120022128 ,
        // 120022129 ,
        // 120022130 ,
        // 120022131 ,
        // 120022132 ,
        // 120022133 ,
        // 120022134 ,
        // 120022135 ,
        // 120022136 ,
        // 120022137 ,
        // 120022138 ,
        // 120022139 ,
        // 120022140 ,
        // 120022141 ,
        // 120022142 ,
        // 120022143 ,
        // 120022144 ,
        // 120022145 ,
        // 120022146 ,
        // 120022147 ,
        // 120022148 ,
        // 120022149 ,
        // 120022150 ,
        // 120022151 ,
        // 120022152 ,
        // 120022153 ,
        // 120022154 ,
        // 120022155 ,
        // 120022156 ,
        // 120022157 ,
        // 120024001 ,
        // 120024002 ,
        // 120024003 ,
        // 120024005 ,
        // 120024006 ,
        // 120024008 ,
        // 120024009 ,
        // 120024010 ,
        // 120024011 ,
        // 120024012 ,
        // 120024013 ,
        // 120024014 ,
        // 120024015 ,
        // 120024016 ,
        // 120024017 ,
        // 120024018 ,
        // 120024019 ,
        // 120024020 ,
        // 120024021 ,
        // 120024022 ,
        // 120024023 ,
        // 120024024 ,
        // 120024025 ,
        // 120024026 ,
        // 120024027 ,
        // 120024028 ,
        // 120024029 ,
        // 120024030 ,
        // 120024031 ,
        // 120024032 ,
        // 120024033 ,
        // 120024034 ,
        // 120025001 ,
        // 120025002 ,
        // 120025003 ,
        // 120025005 ,
        // 120025007 ,
        // 120025008 ,
        // 120025009 ,
        // 120025010 ,
        // 120025011 ,
        // 120025012 ,
        // 120025013 ,
        // 120025014 ,
        // 120025015 ,
        // 120025016 ,
        // 120025017 ,
        // 120025018 ,
        // 120025019 ,
        // 120025020 ,
        // 120025021 ,
        // 120025022 ,
        // 120025023 ,
        // 120025024 ,
        // 120025025 ,
        // 120025026 ,
        // 120025027 ,
        // 120025028 ,
        // 120026001 ,
        // 120026002 ,
        // 120026003 ,
        // 120026005 ,
        // 120026007 ,
        // 120026008 ,
        // 120026009 ,
        // 120026010 ,
        // 120026013 ,
        // 120026014 ,
        // 120026016 ,
        // 120026017 ,
        // 120026018 ,
        // 120026019 ,
        // 120026020 ,
        // 120026021 ,
        // 120026022 ,
        // 120026023 ,
        // 120026024 ,
        // 120026025 ,
        // 120026026 ,
        // 120026027 ,
        // 120026028 ,
        // 120026029 ,
        // 120026030 ,
        // 120026031 ,
        // 120026032 ,
        // 120026033 ,
        // 120026034 ,
        // 120026035 ,
        // 120026036 ,
        // 120026037 ,
        // 120026038 ,
        // 120026039 ,
        // 120026040 ,
        // 120026041 ,
        // 120026042 ,
        // 120026043 ,
        // 120026044 ,
        // 120026045 ,
        // 120026046 ,
        // 120026047 ,
        // 120026048 ,
        // 120026049 ,
        // 120027001 ,
        // 120027002 ,
        // 120027003 ,
        // 120027004 ,
        // 120027006 ,
        // 120027007 ,
        // 120027009 ,
        // 120027010 ,
        // 120027011 ,
        // 120027012 ,
        // 120027014 ,
        // 120027015 ,
        // 120027016 ,
        // 120027017 ,
        // 120027018 ,
        // 120027019 ,
        // 120027020 ,
        // 120027021 ,
        // 120027022 ,
        // 120027023 ,
        // 120027024 ,
        // 120027025 ,
        // 120027026 ,
        // 120027027 ,
        // 120027028 ,
        // 120027029 ,
        // 120027030 ,
        // 120027031 ,
        // 120027032 ,
        // 120027033 ,
        // 120027034 ,
        // 120027035 ,
        // 120030002 ,
        // 120030003 ,
        // 120030004 ,
        // 120030005 ,
        // 120030006 ,
        // 120030007 ,
        // 120030008 ,
        // 120030009 ,
        // 120030010 ,
        // 120030011 ,
        // 120030012 ,
        // 120030013 ,
        // 120030014 ,
        // 120030015 ,
        // 120030016 ,
        // 120030017 ,
        // 120030018 ,
        // 120030019 ,
        // 120030020 ,
        // 120030021 ,
        // 120030022 ,
        // 120030023 ,
        // 120030024 ,
        // 120030025 ,
        // 120030026 ,
        // 120030027 ,
        // 120030028 ,
        // 120030029 ,
        // 120030030 ,
        // 120030031 ,
        // 120030032 ,
        // 120030033 ,
        // 120030034 ,
        // 120030035 ,
        // 120030036 ,
        // 120030037 ,
        // 120030038 ,
        // 120030039 ,
        // 120030040 ,
        // 120030041 ,
        // 120030042 ,
        // 120030043 ,
        // 120030044 ,
        // 120030045 ,
        // 120030046 ,
        // 120030047 ,
        // 120030048 ,
        // 120030049 ,
        // 120030050 ,
        // 120030051 ,
        // 120030052 ,
        // 120030053 ,
        // 120030054 ,
        // 120030055 ,
        // 120030056 ,
        // 120030057 ,
        // 120030058 ,
        // 120030059 ,
        // 120030060 ,
        // 120030061 ,
        // 120030062 ,
        // 120030063 ,
        // 120030064 ,
        // 120030065 ,
        // 120030066 ,
        // 120030067 ,
        // 120030068 ,
        // 120030069 ,
        // 120030070 ,
        // 120030071 ,
        // 120030072 ,
        // 120031001 ,
        // 120031002 ,
        // 120031004 ,
        // 120031005 ,
        // 120031006 ,
        // 120031007 ,
        // 120031008 ,
        // 120031009 ,
        // 120031010 ,
        // 120031011 ,
        // 120031012 ,
        // 120031013 ,
        // 120031014 ,
        // 120031015 ,
        // 120031016 ,
        // 120031017 ,
        // 120031018 ,
        // 120031019 ,
        // 120032001 ,
        // 120032002 ,
        // 120032003 ,
        // 120032004 ,
        // 120032005 ,
        // 120032006 ,
        // 120032007 ,
        // 120032008 ,
        // 120032009 ,
        // 120032010 ,
        // 120032011 ,
        // 120032012 ,
        // 120032013 ,
        // 120032014 ,
        // 120032015 ,
        // 120032016 ,
        // 120032017 ,
        // 120032018 ,
        // 120032019 ,
        // 120032020 ,
        // 120032021 ,
        // 120032022 ,
        // 120032023 ,
        // 120032024 ,
        // 120032025 ,
        // 120032026 ,
        // 120032027 ,
        // 120032028 ,
        // 120032029 ,
        // 120032030 ,
        // 120032031 ,
        // 120032032 ,
        // 120032033 ,
        // 120032034 ,
        // 120032035 ,
        // 120032036 ,
        // 120033001 ,
        // 120033002 ,
        // 120033003 ,
        // 120033004 ,
        // 120033005 ,
        // 120033006 ,
        // 120033007 ,
        // 120033008 ,
        // 120033009 ,
        // 120033010 ,
        // 120033011 ,
        // 120033012 ,
        // 120033013 ,
        // 120033014 ,
        // 120033015 ,
        // 120033016 ,
        // 120033017 ,
        // 120033018 ,
        // 120033019 ,
        // 120033020 ,
        // 120033021 ,
        // 120033022 ,
        // 120033023 ,
        // 120033024 ,
        // 120033025 ,
        // 120033026 ,
        // 120033027 ,
        // 120033028 ,
        // 120033029 ,
        // 120033030 ,
        // 120033031 ,
        // 120033032 ,
        // 120033033 ,
        // 120033034 ,
        // 120033035 ,
        // 120033036 ,
        // 120033037 ,
        // 120033038 ,
        // 120033039 ,
        // 120033040 ,
        // 120033041 ,
        // 120033042 ,
        // 120033043 ,
        // 120033044 ,
        // 120033045 ,
        // 120033046 ,
        // 120033047 ,
        // 120033048 ,
        // 120033049 ,
        // 120033050 ,
        // 120033051 ,
        // 120033052 ,
        // 120033053 ,
        // 120033054 ,
        // 120033055 ,
        // 120033056 ,
        // 120033057 ,
        // 120033058 ,
        // 120033059 ,
        // 120033060 ,
        // 120033061 ,
        // 120033062 ,
        // 120033063 ,
        // 120033064 ,
        // 120033065 ,
        // 120033066 ,
        // 120033067 ,
        // 120033068 ,
        // 120033069 ,
        // 120033070 ,
        // 120033071 ,
        // 120033072 ,
        // 120033073 ,
        // 120033074 ,
        // 120033075 ,
        // 120033076 ,
        // 120033077 ,
        // 120033078 ,
        // 120033079 ,
        // 120033080 ,
        // 120033081 ,
        // 120033082 ,
        // 120033083 ,
        // 120033084 ,
        // 120033085 ,
        // 120033086 ,
        // 120033087 ,
        // 120033088 ,
        // 120033089 ,
        // 120033090 ,
        // 120033091 ,
        // 120033092 ,
        // 120033093 ,
        // 120033094 ,
        // 120033095 ,
        // 120033096 ,
        // 120033097 ,
        // 120033098 ,
        // 120033099 ,
        // 120033100 ,
        // 120033101 ,
        // 120033102 ,
        // 120033103 ,
        // 120033104 ,
        // 120033105 ,
        // 120033106 ,
        // 120033107 ,
        // 120033108 ,
        // 120033109 ,
        // 120033110 ,
        // 120033111 ,
        // 120033112 ,
        // 120033113 ,
        // 120033114 ,
        // 120033115 ,
        // 120033116 ,
        // 120033117 ,
        // 120033118 ,
        // 120033119 ,
        // 120033120 ,
        // 120033121 ,
        // 120033122 ,
        // 120033123 ,
        // 120033124 ,
        // 120033125 ,
        // 120033126 ,
        // 120033127 ,
        // 120033128 ,
        // 120033129 ,
        // 120033130 ,
        // 120033131 ,
        // 120033132 ,
        // 120033133 ,
        // 120033134 ,
        // 120033135 ,
        // 120033136 ,
        // 120033137 ,
        // 120034001 ,
        // 120034002 ,
        // 120034003 ,
        // 120034004 ,
        // 120034005 ,
        // 120034006 ,
        // 120034007 ,
        // 120034008 ,
        // 120034009 ,
        // 120034010 ,
        // 120034011 ,
        // 120034012 ,
        // 120034013 ,
        // 120034014 ,
        // 120034015 ,
        // 120034016 ,
        // 120034017 ,
        // 120034018 ,
        // 120034019 ,
        // 120034020 ,
        // 120034021 ,
        // 120034022 ,
        // 120034023 ,
        // 120034024 ,
        // 120034025 ,
        // 120034026 ,
        // 120034027 ,
        // 120034028 ,
        // 120034029 ,
        // 120034030 ,
        // 120034031 ,
        // 120034032 ,
        // 120034033 ,
        // 120034034 ,
        // 120034035 ,
        // 120034036 ,
        // 120034037 ,
        // 120034038 ,
        // 120034039 ,
        // 120034040 ,
        // 120034041 ,
        // 120034042 ,
        // 120034043 ,
        // 120034044 ,
        // 120034045 ,
        // 120034046 ,
        // 120034047 ,
        // 120034048 ,
        // 120034049 ,
        // 120034050 ,
        // 120034051 ,
        // 120034052 ,
        // 120034053 ,
        // 120034054 ,
        // 120034055 ,
        // 120034056 ,
        // 120034057 ,
        // 120034058 ,
        // 120034059 ,
        // 120034060 ,
        // 120034061 ,
        // 120034062 ,
        // 120034063 ,
        // 120034064 ,
        // 120034065 ,
        // 120034066 ,
        // 120034067 ,
        // 120034068 ,
        // 120034069 ,
        // 120034070 ,
        // 120034071 ,
        // 120034072 ,
        // 120034073 ,
        // 120034074 ,
        // 120034075 ,
        // 120034076 ,
        // 120034077 ,
        // 120034078 ,
        // 120034079 ,
        // 120034080 ,
        // 120034081 ,
        // 120034082 ,
        // 120034083 ,
        // 120034084 ,
        // 120034085 ,
        // 120034086 ,
        // 120034087 ,
        // 120034088 ,
        // 120034089 ,
        // 120034090 ,
        // 120034091 ,
        // 120034092 ,
        // 120034093 ,
        // 120034094 ,
        // 120034095 ,
        // 120034096 ,
        // 120034097 ,
        // 120034098 ,
        // 120034099 ,
        // 120034100 ,
        // 120034101 ,
        // 120034102 ,
        // 120034103 ,
        // 120034104 ,
        // 120034105 ,
        // 120034106 ,
        // 120034107 ,
        // 120034108 ,
        // 120034109 ,
        // 120034110 ,
        // 120034111 ,
        // 120034112 ,
        // 120034113 ,
        // 120034114 ,
        // 120034115 ,
        // 120034116 ,
        // 120034117 ,
        // 120034118 ,
        // 120034119 ,
        // 120034120 ,
        // 120034121 ,
        // 120034122 ,
        // 120034123 ,
        // 120034124 ,
        // 120034125 ,
        // 120034126 ,
        // 120034127 ,
        // 120034128 ,
        // 120034129 ,
        // 120034130 ,
        // 120034131 ,
        // 120034132 ,
        // 120034133 ,
        // 120034134 ,
        // 120034135 ,
        // 120034136 ,
        // 120034137 ,
        // 120034138 ,
        // 120034139 ,
        // 120034140 ,
        // 120034141 ,
        // 120034142 ,
        // 120034143 ,
        // 120034144 ,
        // 120034145 ,
        // 120034146 ,
        // 120034147 ,
        // 120034148 ,
        // 120034149 ,
        // 120034150 ,
        // 120034151 ,
        // 120034152 ,
        // 120034153 ,
        // 120034154 ,
        // 120034155 ,
        // 120034156 ,
        // 120034157 ,
        // 120034158 ,
        // 120034159 ,
        // 120034160 ,
        // 120034161 ,
        // 120034163 ,
        // 120034164 ,
        // 120034165 ,
        // 120034166 ,
        // 120034167 ,
        // 120034168 ,
        // 120034169 ,
        // 120034170 ,
        // 120034171 ,
        // 120035001 ,
        // 120035002 ,
        // 120035003 ,
        // 120035004 ,
        // 120035005 ,
        // 120035006 ,
        // 120035007 ,
        // 120035008 ,
        // 120035009 ,
        // 120035010 ,
        // 120035011 ,
        // 120035012 ,
        // 120035013 ,
        // 120035014 ,
        // 120035015 ,
        // 120035016 ,
        // 120035017 ,
        // 120035018 ,
        // 120035019 ,
        // 120035020 ,
        // 120035021 ,
        // 120035022 ,
        // 120035023 ,
        // 120035024 ,
        // 120035025 ,
        // 120035026 ,
        // 120035027 ,
        // 120035028 ,
        // 120035029 ,
        // 120035030 ,
        // 120035031 ,
        // 120035032 ,
        // 120035033 ,
        // 120035034 ,
        // 120035035 ,
        // 120035036 ,
        // 120035037 ,
        // 120035038 ,
        // 120035039 ,
        // 120035040 ,
        // 120035041 ,
        // 120035042 ,
        // 120035043 ,
        // 120035044 ,
        // 120035045 ,
        // 120035046 ,
        // 120035047 ,
        // 120035048 ,
        // 120035049 ,
        // 120035050 ,
        // 120035051 ,
        // 120035052 ,
        // 120035053 ,
        // 120035054 ,
        // 120035055 ,
        // 120035056 ,
        // 120035057 ,
        // 120035058 ,
        // 120035059 ,
        // 120035061 ,
        // 120035062 ,
        // 120035063 ,
        // 120035064 ,
        // 120035065 ,
        // 120035066 ,
        // 120035067 ,
        // 120035068 ,
        // 120035069 ,
        // 120035070 ,
        // 120035071 ,
        // 120035072 ,
        // 120035073 ,
        // 120035074 ,
        // 120035075 ,
        // 120035076 ,
        // 120035077 ,
        // 120035078 ,
        // 120035079 ,
        // 120035080 ,
        // 120035081 ,
        // 120035082 ,
        // 120035083 ,
        // 120035084 ,
        // 120035085 ,
        // 120035086 ,
        // 120035087 ,
        // 120035088 ,
        // 120035089 ,
        // 120035090 ,
        // 120035091 ,
        // 120035092 ,
        // 120035093 ,
        // 120035094 ,
        // 120035095 ,
        // 120035096 ,
        // 120035097 ,
        // 120035098 ,
        // 120035099 ,
        // 120035100 ,
        // 120035101 ,
        // 120035102 ,
        // 120035103 ,
        // 120035104 ,
        // 120035105 ,
        // 120035106 ,
        // 120035107 ,
        // 120035108 ,
        // 120035109 ,
        // 120035110 ,
        // 120035111 ,
        // 120035112 ,
        // 120035113 ,
        // 120035114 ,
        // 120035115 ,
        // 120035116 ,
        // 120035117 ,
        // 120035118 ,
        // 120035119 ,
        // 120035120 ,
        // 120035121 ,
        // 120035122 ,
        // 120035123 ,
        // 120035124 ,
        // 120035125 ,
        // 120035126 ,
        // 120035127 ,
        // 120036001 ,
        // 120036002 ,
        // 120036003 ,
        // 120036004 ,
        // 120036005 ,
        // 120036006 ,
        // 120036007 ,
        // 120036008 ,
        // 120036009 ,
        // 120036010 ,
        // 120036011 ,
        // 120036012 ,
        // 120036013 ,
        // 120036014 ,
        // 120036015 ,
        // 120036016 ,
        // 120036017 ,
        // 120036018 ,
        // 120036019 ,
        // 120036020 ,
        // 120036021 ,
        // 120036022 ,
        // 120036023 ,
        // 120036024 ,
        // 120036025 ,
        // 120036026 ,
        // 120036027 ,
        // 120036028 ,
        // 120036029 ,
        // 120036030 ,
        // 120037001 ,
        // 120037002 ,
        // 120037003 ,
        // 120037004 ,
        // 120037005 ,
        // 120037006 ,
        // 120037007 ,
        // 120037008 ,
        // 120037009 ,
        // 120037010 ,
        // 120037011 ,
        // 120037012 ,
        // 120037013 ,
        // 120037014 ,
        // 120037015 ,
        // 120037016 ,
        // 120037017 ,
        // 120037018 ,
        // 120037019 ,
        // 120037020 ,
        // 120037021 ,
        // 120037022 ,
        // 120037023 ,
        // 120037024 ,
        // 120037025 ,
        // 120037026 ,
        // 120037027 ,
        // 120037028 ,
        // 120037029 ,
        // 120038001 ,
        // 120038002 ,
        // 120038003 ,
        // 120038004 ,
        // 120038005 ,
        // 120038006 ,
        // 120038007 ,
        // 120038008 ,
        // 120038009 ,
        // 120038010 ,
        // 120038011 ,
        // 120038012 ,
        // 120038013 ,
        // 120038014 ,
        // 120038015 ,
        // 120038016 ,
        // 120038017 ,
        // 120038018 ,
        // 120038019 ,
        // 120038020 ,
        // 120038021 ,
        // 120038022 ,
        // 120038023 ,
        // 120038024 ,
        // 120038025 ,
        // 120038026 ,
        // 120038027 ,
        // 120038028 ,
        // 120038029 ,
        // 120038030 ,
        // 120038031 ,
        // 120038032 ,
        // 120038033 ,
        // 120038034 ,
        // 120038035 ,
        // 120038036 ,
        // 120038037 ,
        // 120038038 ,
        // 120038039 ,
        // 120038040 ,
        // 120039001 ,
        // 120039002 ,
        // 120039003 ,
        // 120039004 ,
        // 120039005 ,
        // 120039006 ,
        // 120039007 ,
        // 120039008 ,
        // 120039009 ,
        // 120039010 ,
        // 120039011 ,
        // 120039012 ,
        // 120039013 ,
        // 120039014 ,
        // 120039015 ,
        // 120039016 ,
        // 120039017 ,
        // 120039018 ,
        // 120039019 ,
        // 120039020 ,
        // 120039021 ,
        // 120039022 ,
        // 120039023 ,
        // 120039024 ,
        // 120039025 ,
        // 120039026 ,
        // 120039027 ,
        // 120039028 ,
        // 120039029 ,
        // 120039030 ,
        // 120039031 ,
        // 120039032 ,
        // 120039033 ,
        // 120039034 ,
        // 120039035 ,
        // 120039036 ,
        // 120039037 ,
        // 120039038 ,
        // 120039039 ,
        // 120039040 ,
        // 120039041 ,
        // 120039042 ,
        // 120039043 ,
        // 120039044 ,
        // 120039045 ,
        // 120039046 ,
        // 120039047 ,
        // 120039048 ,
        // 120039049 ,
        // 120039050 ,
        // 120039051 ,
        // 120039052 ,
        // 120039053 ,
        // 120039054 ,
        // 120039055 ,
        // 120039056 ,
        // 120039057 ,
        // 120039058 ,
        // 120039059 ,
        // 120039060 ,
        // 120039061 ,
        // 120039062 ,
        // 120039063 ,
        // 120039064 ,
        // 120039065 ,
        // 120039066 ,
        // 120039067 ,
        // 120039068 ,
        // 120039069 ,
        // 120039070 ,
        // 120039071 ,
        // 120039072 ,
        // 120039073 ,
        // 120039074 ,
        // 120039075 ,
        // 120040001 ,
        // 120040002 ,
        // 120040003 ,
        // 120040004 ,
        // 120040005 ,
        // 120040006 ,
        // 120040007 ,
        // 120040008 ,
        // 120040009 ,
        // 120040010 ,
        // 120040011 ,
        // 120040012 ,
        // 120040013 ,
        // 120040014 ,
        // 120040015 ,
        // 120040016 ,
        // 120040017 ,
        // 120040018 ,
        // 120040019 ,
        // 120040020 ,
        // 120040021 ,
        // 120040022 ,
        // 120040023 ,
        // 120040024 ,
        // 120040025 ,
        // 120040026 ,
        // 120040027 ,
        // 120040028 ,
        // 120040029 ,
        // 120040030 ,
        // 120040031 ,
        // 120040032 ,
        // 120040033 ,
        // 120040034 ,
        // 120040035 ,
        // 120040036 ,
        // 120040037 ,
        // 120040038 ,
        // 120040039 ,
        // 120040040 ,
        // 120040041 ,
        // 120040042 ,
        // 120040043 ,
        // 120040044 ,
        // 120040045 ,
        // 120040046 ,
        // 120040047 ,
        // 120040048 ,
        // 120040049 ,
        // 120040050 ,
        // 120040051 ,
        // 120040052 ,
        // 120040053 ,
        // 120040054 ,
        // 120040055 ,
        // 120040056 ,
        // 120040057 ,
        // 120040058 ,
        // 120040059 ,
        // 120040060 ,
        // 120040061 ,
        // 120040062 ,
        // 120040063 ,
        // 120040064 ,
        // 120040065 ,
        // 120040066 ,
        // 120040067 ,
        // 120040068 ,
        // 120040069 ,
        // 120040070 ,
        // 120040071 ,
        // 120040072 ,
        // 120040073 ,
        // 120040074 ,
        // 120040075 ,
        // 120040076 ,
        // 120040077 ,
        // 120040078 ,
        // 120040079 ,
        // 120040080 ,
        // 120040081 ,
        // 120040082 ,
        // 120040083 ,
        // 120040084 ,
        // 120040085 ,
        // 120040086 ,
        // 120040087 ,
        // 120040088 ,
        // 120040089 ,
        // 120040090 ,
        // 120040091 ,
        // 120040092 ,
        // 120040093 ,
        // 120040094 ,
        // 120040095 ,
        // 120040096 ,
        // 120040097 ,
        // 120040098 ,
        // 120040099 ,
        // 120040100 ,
        // 120040101 ,
        // 120040102 ,
        // 120040103 ,
        // 120040104 ,
        // 120040105 ,
        // 120040106 ,
        // 120040107 ,
        // 120040108 ,
        // 120040109 ,
        // 120040110 ,
        // 120040111 ,
        // 120040112 ,
        // 120040113 ,
        // 120040114 ,
        // 120040115 ,
        // 120040116 ,
        // 120040117 ,
        // 120040118 ,
        // 120040119 ,
        // 120040120 ,
        // 120040121 ,
        // 120041001 ,
        // 120041002 ,
        // 120041003 ,
        // 120041004 ,
        // 120041005 ,
        // 120041006 ,
        // 120041007 ,
        // 120041008 ,
        // 120042001 ,
        // 120042002 ,
        // 120042003 ,
        // 120042004 ,
        // 120042005 ,
        // 120042006 ,
        // 120042007 ,
        // 120042008 ,
        // 120042009 ,
        // 120042010 ,
        // 120042011 ,
        // 120042012 ,
        // 120042013 ,
        // 120042014 ,
        // 120042015 ,
        // 120042016 ,
        // 120042017 ,
        // 120042018 ,
        // 120042019 ,
        // 120042020 ,
        // 120042021 ,
        // 120042022 ,
        // 120042023 ,
        // 120042024 ,
        // 120042025 ,
        // 120042026 ,
        // 120042027 ,
        // 120042028 ,
        // 120042029 ,
        // 120042030 ,
        // 120042031 ,
        // 120042032 ,
        // 120042033 ,
        // 120042034 ,
        // 120042035 ,
        // 120042036 ,
        // 120042037 ,
        // 120042038 ,
        // 120042039 ,
        // 120042040 ,
        // 120042041 ,
        // 120042042 ,
        // 120042043 ,
        // 120042044 ,
        // 120042045 ,
        // 120042046 ,
        // 120042047 ,
        // 120042048 ,
        // 120042049 ,
        // 120042050 ,
        // 120042051 ,
        // 120042052 ,
        // 120042053 ,
        // 120042054 ,
        // 120042055 ,
        // 120042056 ,
        // 120042057 ,
        // 120042058 ,
        // 120042059 ,
        // 120042060 ,
        // 120042061 ,
        // 120042062 ,
        // 120042063 ,
        // 120042064 ,
        // 120042065 ,
        // 120042066 ,
        // 120042067 ,
        // 120042068 ,
        // 120043001 ,
        // 120043002 ,
        // 120043003 ,
        // 120043004 ,
        // 120043005 ,
        // 120043006 ,
        // 120043007 ,
        // 120043008 ,
        // 120043009 ,
        // 120043010 ,
        // 120043011 ,
        // 120043012 ,
        // 120043013 ,
        // 120043014 ,
        // 120043015 ,
        // 120043016 ,
        // 120043017 ,
        // 120043018 ,
        // 120043019 ,
        // 120043020 ,
        // 120043021 ,
        // 120043022 ,
        // 120043023 ,
        // 120043024 ,
        // 120043025 ,
        // 120043026 ,
        // 120043027 ,
        // 120043028 ,
        // 120043029 ,
        // 120043030 ,
        // 120043031 ,
        // 120043032 ,
        // 120043033 ,
        // 120043034 ,
        // 120043035 ,
        // 120043036 ,
        // 120043037 ,
        // 120043038 ,
        // 120043039 ,
        // 120043040 ,
        // 120043041 ,
        // 120043042 ,
        // 120043043 ,
        // 120043044 ,
        // 120043045 ,
        // 120043046 ,
        // 120043047 ,
        // 120043048 ,
        // 120043049 ,
        // 120043050 ,
        // 120043051 ,
        // 120043052 ,
        // 120043053 ,
        // 120043054 ,
        // 120043055 ,
        // 120043056 ,
        // 120043057 ,
        // 120043058 ,
        // 120043059 ,
        // 120043060 ,
        // 120043061 ,
        // 120043062 ,
        // 120043063 ,
        // 120043064 ,
        // 120043065 ,
        // 120043066 ,
        // 120043067 ,
        // 120043068 ,
        // 120043069 ,
        // 120043070 ,
        // 120043071 ,
        // 120043072 ,
        // 120043073 ,
        // 120043074 ,
        // 120043075 ,
        // 120043076 ,
        // 120043077 ,
        // 120043078 ,
        // 120043079 ,
        // 120043080 ,
        // 120043081 ,
        // 120043082 ,
        // 120043083 ,
        // 120043084 ,
        // 120043085 ,
        // 120043086 ,
        // 120043087 ,
        // 120043088 ,
        // 120043089 ,
        // 120043090 ,
        // 120043091 ,
        // 120043092 ,
        // 120043093 ,
        // 120043094 ,
        // 120043095 ,
        // 120043096 ,
        // 120043097 ,
        // 120043098 ,
        // 120043099 ,
        // 120043100 ,
        // 120043101 ,
        // 120043102 ,
        // 120044001 ,
        // 120044002 ,
        // 120044003 ,
        // 120044004 ,
        // 120044005 ,
        // 120044006 ,
        // 120044007 ,
        // 120044008 ,
        // 120044009 ,
        // 120044010 ,
        // 120044011 ,
        // 120044012 ,
        // 120044013 ,
        // 120044014 ,
        // 120044015 ,
        // 120044016 ,
        // 120044017 ,
        // 120044018 ,
        // 120044019 ,
        // 120044020 ,
        // 120044021 ,
        // 120044022 ,
        // 120044023 ,
        // 120044024 ,
        // 120044025 ,
        // 120044026 ,
        // 120044027 ,
        // 120044028 ,
        // 120044029 ,
        // 120044030 ,
        // 120045001 ,
        // 120045002 ,
        // 120045003 ,
        // 120045004 ,
        // 120045005 ,
        // 120045006 ,
        // 120045007 ,
        // 120045008 ,
        // 120045009 ,
        // 120045010 ,
        // 120045011 ,
        // 120045012 ,
        // 120045013 ,
        // 120045014 ,
        // 120045015 ,
        // 120045016 ,
        // 120045017 ,
        // 120045018 ,
        // 120045019 ,
        // 120045020 ,
        // 120045021 ,
        // 120045022 ,
        // 120045023 ,
        // 120045024 ,
        // 120045025 ,
        // 120045026 ,
        // 120045027 ,
        // 120045028 ,
        // 120045029 ,
        // 120045030 ,
        // 120045031 ,
        // 120045032 ,
        // 120045033 ,
        // 120045034 ,
        // 120045035 ,
        // 120045036 ,
        // 120045037 ,
        // 120045038 ,
        // 120045039 ,
        // 120045040 ,
        // 120045041 ,
        // 120045042 ,
        // 120045043 ,
        // 120045044 ,
        // 120045045 ,
        // 120045046 ,
        // 120045047 ,
        // 120045048 ,
        // 120045049 ,
        // 120045050 ,
        // 120045051 ,
        // 120045052 ,
        // 120045053 ,
        // 120045054 ,
        // 120045055 ,
        // 120045056 ,
        // 120045057 ,
        // 120045058 ,
        // 120045059 ,
        // 120045060 ,
        // 120045061 ,
        // 120045062 ,
        // 120045063 ,
        // 120045064 ,
        // 120045065 ,
        // 120045066 ,
        // 120045067 ,
        // 120045068 ,
        // 120045069 ,
        // 120045070 ,
        // 120045071 ,
        // 120045072 ,
        // 120045073 ,
        // 120045074 ,
        // 120045075 ,
        // 120045076 ,
        // 120045077 ,
        // 120045078 ,
        // 120045079 ,
        // 120045080 ,
        // 120045081 ,
        // 120045082 ,
        // 120045083 ,
        // 120045084 ,
        // 120045085 ,
        // 120045086 ,
        // 120045087 ,
        // 120045088 ,
        // 120045089 ,
        // 120045090 ,
        // 120045091 ,
        // 120045092 ,
        // 120045093 ,
        // 120045094 ,
        // 120045095 ,
        // 120045096 ,
        // 120045097 ,
        // 120045098 ,
        // 120045099 ,
        // 120045100 ,
        // 120045101 ,
        // 120045102 ,
        // 120045103 ,
        // 120045104 ,
        // 120045105 ,
        // 120045106 ,
        // 120045107 ,
        // 120045108 ,
        // 120045109 ,
        // 120045110 ,
        // 120045111 ,
        // 120045112 ,
        // 120045113 ,
        // 120045114 ,
        // 120045115 ,
        // 120045116 ,
        // 120045117 ,
        // 120045118 ,
        // 120045119 ,
        // 120045120 ,
        // 120045121 ,
        // 120046001 ,
        // 120046002 ,
        // 120046003 ,
        // 120046004 ,
        // 120046005 ,
        // 120046006 ,
        // 120046007 ,
        // 120046008 ,
        // 120046009 ,
        // 120046010 ,
        // 120046011 ,
        // 120046012 ,
        // 120046013 ,
        // 120046014 ,
        // 120046015 ,
        // 120046016 ,
        // 120046017 ,
        // 120046018 ,
        // 120046019 ,
        // 120046020 ,
        // 120046021 ,
        // 120046022 ,
        // 120046023 ,
        // 120047001 ,
        // 120047002 ,
        // 120047003 ,
        // 120047004 ,
        // 120047005 ,
        // 120047006 ,
        // 120047007 ,
        // 120047008 ,
        // 120047009 ,
        // 120047010 ,
        // 120047011 ,
        // 120047012 ,
        // 120047013 ,
        // 120047014 ,
        // 120047015 ,
        // 120047016 ,
        // 120047017 ,
        // 120047018 ,
        // 120047019 ,
        // 120047020 ,
        // 120047021 ,
        // 120047022 ,
        // 120047023 ,
        // 120047024 ,
        // 120047025 ,
        // 120047026 ,
        // 120047027 ,
        // 120047028 ,
        // 120047029 ,
        // 120047030 ,
        // 120047031 ,
        // 120047032 ,
        // 120047033 ,
        // 120047034 ,
        // 120047035 ,
        // 120047036 ,
        // 120047037 ,
        // 120047038 ,
        // 120047039 ,
        // 120047040 ,
        // 120047041 ,
        // 120047042 ,
        // 120047043 ,
        // 120047044 ,
        // 120047045 ,
        // 120047046 ,
        // 120047047 ,
        // 120047048 ,
        // 120047049 ,
        // 120047050 ,
        // 120047051 ,
        // 120047052 ,
        // 120047053 ,
        // 120047054 ,
        // 120047055 ,
        // 120047056 ,
        // 120047057 ,
        // 120047058 ,
        // 120047059 ,
        // 120047060 ,
        // 120047061 ,
        // 120047062 ,
        // 120047063 ,
        // 120047064 ,
        // 120047065 ,
        // 120047066 ,
        // 120047067 ,
        // 120047068 ,
        // 120047069 ,
        // 120048001 ,
        // 120048002 ,
        // 120048003 ,
        // 120048004 ,
        // 120048005 ,
        // 120048006 ,
        // 120048007 ,
        // 120048008 ,
        // 120048009 ,
        // 120048010 ,
        // 120048011 ,
        // 120048012 ,
        // 120048013 ,
        // 120048014 ,
        // 120048015 ,
        // 120048016 ,
        // 120048017 ,
        // 120048018 ,
        // 120048019 ,
        // 120048020 ,
        // 120048021 ,
        // 120048022 ,
        // 120048023 ,
        // 120048024 ,
        // 120048025 ,
        // 120048026 ,
        // 120048027 ,
        // 120048028 ,
        // 120048029 ,
        // 120048030 ,
        // 120048031 ,
        // 120048032 ,
        // 120048033 ,
        // 120048034 ,
        // 120048035 ,
        // 120048036 ,
        // 120048037 ,
        // 120048038 ,
        // 120048039 ,
        // 120048040 ,
        // 120048041 ,
        // 120048042 ,
        // 120048043 ,
        // 120048044 ,
        // 120048045 ,
        // 120048046 ,
        // 120048047 ,
        // 120048048 ,
        // 120048049 ,
        // 120048050 ,
        // 120048051 ,
        // 120048052 ,
        // 120048053 ,
        // 120048054 ,
        // 120048055 ,
        // 120048056 ,
        // 120048057 ,
        // 120048058 ,
        // 120048059 ,
        // 120048060 ,
        // 120048061 ,
        // 120048062 ,
        // 120048063 ,
        // 120048064 ,
        // 120048065 ,
        // 120048066 ,
        // 120048067 ,
        // 120048068 ,
        // 120048069 ,
        // 120048070 ,
        // 120048071 ,
        // 120048072 ,
        // 120049001 ,
        // 120049002 ,
        // 120049003 ,
        // 120049004 ,
        // 120049005 ,
        // 120049006 ,
        // 120049007 ,
        // 120049008 ,
        // 120050001 ,
        // 120050002 ,
        // 120050003 ,
        // 120050004 ,
        // 120050005 ,
        // 120050006 ,
        // 120050007 ,
        // 120050008 ,
        // 120050009 ,
        // 120050010 ,
        // 120050011 ,
        // 120050012 ,
        // 120050013 ,
        // 120050014 ,
        // 120050015 ,
        // 120050016 ,
        // 120050017 ,
        // 120050018 ,
        // 120050019 ,
        // 120050020 ,
        // 120050021 ,
        // 120050022 ,
        // 120050023 ,
        // 120050024 ,
        // 120050025 ,
        // 120050026 ,
        // 120050027 ,
        // 120050028 ,
        // 120050029 ,
        // 120050030 ,
        // 120050031 ,
        // 120050032 ,
        // 120050033 ,
        // 120050034 ,
        // 120050035 ,
        // 120050036 ,
        // 120050037 ,
        // 120050038 ,
        // 120050039 ,
        // 120050040 ,
        // 120050041 ,
        // 120051001 ,
        // 120052001 ,
        // 120052002 ,
        // 120052003 ,
        // 120052004 ,
        // 120052005 ,
        // 120052006 ,
        // 120052007 ,
        // 120053001 ,
        // 120053002 ,
        // 120053003 ,
        // 120053004 ,
        // 120053005 ,
        // 120053006 ,
        // 120053007 ,
        // 120053008 ,
        // 120053009 ,
        // 120053010 ,
        // 120053011 ,
        // 120053012 ,
        // 120053013 ,
        // 120053014 ,
        // 120053015 ,
        // 120053016 ,
        // 120053017 ,
        // 120053018 ,
        // 120053019 ,
        // 120053020 ,
        // 120053021 ,
        // 120053022 ,
        // 120053023 ,
        // 120053024 ,
        // 120053025 ,
        // 120053026 ,
        // 120053027 ,
        // 120053028 ,
        // 120053029 ,
        // 120053030 ,
        // 120053031 ,
        // 120053032 ,
        // 120053033 ,
        // 120053034 ,
        // 120053035 ,
        // 120053036 ,
        // 120053037 ,
        // 120053038 ,
        // 120053039 ,
        // 120053040 ,
        // 120053041 ,
        // 120053042 ,
        // 120053043 ,
        // 120053044 ,
        // 120053045 ,
        // 120053046 ,
        // 120053047 ,
        // 120053048 ,
        // 120053049 ,
        // 120053050 ,
        // 120053051 ,
        // 120053052 ,
        // 120053053 ,
        // 120053054 ,
        // 120053055 ,
        // 120053056 ,
        // 120053057 ,
        // 120053058 ,
        // 120054001 ,
        // 120054002 ,
        // 120054003 ,
        // 120054004 ,
        // 120054005 ,
        // 120054006 ,
        // 120054007 ,
        // 120054008 ,
        // 120054009 ,
        // 120054010 ,
        // 120054011 ,
        // 120054012 ,
        // 120054013 ,
        // 120054014 ,
        // 120054015 ,
        // 120054016 ,
        // 120054017 ,
        // 120054018 ,
        // 120054019 ,
        // 120054020 ,
        // 120054021 ,
        // 120054022 ,
        // 120054023 ,
        // 120054024 ,
        // 120054025 ,
        // 120054026 ,
        // 120054027 ,
        // 120054028 ,
        // 120054029 ,
        // 120054030 ,
        // 120054031 ,
        // 120054032 ,
        // 120054033 ,
        // 120054034 ,
        // 120054035 ,
        // 120054036 ,
        // 120054037 ,
        // 120054038 ,
        // 120054039 ,
        // 120054040 ,
        // 120054041 ,
        // 120054042 ,
        // 120054043 ,
        // 120054044 ,
        // 120054045 ,
        // 120054046 ,
        // 120054047 ,
        // 120054048 ,
        // 120054049 ,
        // 120054050 ,
        // 120054051 ,
        // 120054052 ,
        // 120054053 ,
        // 120054054 ,
        // 120054055 ,
        // 120054056 ,
        // 120054057 ,
        // 120054058 ,
        // 120054059 ,
        // 120054060 ,
        // 120054061 ,
        // 120054062 ,
        // 120055001 ,
        // 120055002 ,
        // 120055003 ,
        // 120055004 ,
        // 120055005 ,
        // 120055006 ,
        // 120055007 ,
        // 120055008 ,
        // 120055009 ,
        // 120055010 ,
        // 120055011 ,
        // 120055012 ,
        // 120055013 ,
        // 120055014 ,
        // 120055015 ,
        // 120055016 ,
        // 120055017 ,
        // 120055018 ,
        // 120055019 ,
        // 120055020 ,
        // 120055021 ,
        // 120055022 ,
        // 120055023 ,
        // 120055024 ,
        // 120055025 ,
        // 120055026 ,
        // 120055027 ,
        // 120055028 ,
        // 120055029 ,
        // 120055030 ,
        // 120055031 ,
        // 120055032 ,
        // 120056001 ,
        // 120056002 ,
        // 120056003 ,
        // 120056004 ,
        // 120056005 ,
        // 120056006 ,
        // 120056007 ,
        // 120056008 ,
        // 120056009 ,
        // 120056010 ,
        // 120056011 ,
        // 120056012 ,
        // 120056013 ,
        // 120056014 ,
        // 120056015 ,
        // 120056016 ,
        // 120056017 ,
        // 120056018 ,
        // 120056019 ,
        // 120056020 ,
        // 120056021 ,
        // 120056022 ,
        // 120056023 ,
        // 120056024 ,
        // 120056025 ,
        // 120056026 ,
        // 120056027 ,
        // 120056028 ,
        // 120056029 ,
        // 120056030 ,
        // 120056031 ,
        // 120056032 ,
        // 120056033 ,
        // 120056034 ,
        // 120056035 ,
        // 120056036 ,
        // 120056037 ,
        // 120056038 ,
        // 120056039 ,
        // 120056040 ,
        // 120056041 ,
        // 120056042 ,
        // 120056043 ,
        // 120056044 ,
        // 120056045 ,
        // 120056046 ,
        // 120056047 ,
        // 120056048 ,
        // 120056049 ,
        // 120056050 ,
        // 120056051 ,
        // 120056052 ,
        // 120056053 ,
        // 120056054 ,
        // 120056055 ,
        // 120056056 ,
        // 120056057 ,
        // 120056058 ,
        // 120056059 ,
        // 120056060 ,
        // 120056061 ,
        // 120056062 ,
        // 120056063 ,
        // 120056064 ,
        // 120056065 ,
        // 120056066 ,
        // 120056067 ,
        // 120056068 ,
        // 120056069 ,
        // 120056070 ,
        // 120056071 ,
        // 120056072 ,
        // 120056073 ,
        // 120056074 ,
        // 120056075 ,
        // 120056076 ,
        // 120056077 ,
        // 120056078 ,
        // 120056079 ,
        // 120056080 ,
        // 120056081 ,
        // 120056082 ,
        // 120056083 ,
        // 120056084 ,
        // 120056085 ,
        // 120056086 ,
        // 120056087 ,
        // 120056088 ,
        // 120056089 ,
        // 120056090 ,
        // 120056091 ,
        // 120056092 ,
        // 120056093 ,
        // 120056094 ,
        // 120056095 ,
        // 120056096 ,
        // 120056097 ,
        // 120056098 ,
        // 120056099 ,
        // 120056100 ,
        // 120056101 ,
        // 120056102 ,
        // 120056103 ,
        // 120056104 ,
        // 120056105 ,
        // 120056106 ,
        // 120056107 ,
        // 120056108 ,
        // 120056109 ,
        // 120056110 ,
        // 120056111 ,
        // 120056112 ,
        // 120056113 ,
        // 120056114 ,
        // 120056115 ,
        // 120057001 ,
        // 120057002 ,
        // 120057003 ,
        // 120057004 ,
        // 120057005 ,
        // 120057006 ,
        // 120057007 ,
        // 120057008 ,
        // 120057009 ,
        // 120057010 ,
        // 120057011 ,
        // 120057012 ,
        // 120057013 ,
        // 120057014 ,
        // 120058001 ,
        // 120058003 ,
        // 120058004 ,
        // 120058005 ,
        // 120058006 ,
        // 120058007 ,
        // 120058008 ,
        // 120058009 ,
        // 120058010 ,
        // 120058011 ,
        // 120058012 ,
        // 120058013 ,
        // 120058014 ,
        // 120058015 ,
        // 120059001 ,
        // 120059002 ,
        // 120059003 ,
        // 120059004 ,
        // 120059005 ,
        // 120059007 ,
        // 120059008 ,
        // 120059009 ,
        // 120059010 ,
        // 120059011 ,
        // 120059012 ,
        // 120059013 ,
        // 120059014 ,
        // 120059015 ,
        // 120059016 ,
        // 120059017 ,
        // 120059018 ,
        // 120059019 ,
        // 120059020 ,
        // 120059021 ,
        // 120059022 ,
        // 120059023 ,
        // 120059024 ,
        // 120059025 ,
        // 120059026 ,
        // 120059027 ,
        // 120059028 ,
        // 120059029 ,
        // 120059031 ,
        // 120059032 ,
        // 120059033 ,
        // 120059034 ,
        // 120059035 ,
        // 120059036 ,
        // 120059037 ,
        // 120059038 ,
        // 120059039 ,
        // 120059040 ,
        // 120059041 ,
        // 120059042 ,
        // 120059043 ,
        // 120059044 ,
        // 120059045 ,
        // 120059046 ,
        // 120059047 ,
        // 120059048 ,
        // 120059049 ,
        // 120059050 ,
        // 120059051 ,
        // 120059052 ,
        // 120059053 ,
        // 120059054 ,
        // 120059055 ,
        // 120059056 ,
        // 120059057 ,
        // 120059058 ,
        // 120059059 ,
        // 120060001 ,
        // 120060002 ,
        // 120060003 ,
        // 120060004 ,
        // 120060005 ,
        // 120060006 ,
        // 120060007 ,
        // 120060008 ,
        // 120060009 ,
        // 120060010 ,
        // 120060011 ,
        // 120061279 ,
        // 120062001 ,
        // 120063001 ,
        // 120063002 ,
        // 120063003 ,
        // 120063004 ,
        // 120063005 ,
        // 120063006 ,
        // 120063007 ,
        // 120063008 ,
        // 120063009 ,
        // 120063010 ,
        // 120063011 ,
        // 120063012 ,
        // 120063013 ,
        // 120063014 ,
        // 120063015 ,
        // 120063016 ,
        // 120063017 ,
        // 120063018 ,
        // 120063019 ,
        // 120063020 ,
        // 120063021 ,
        // 120063022 ,
        // 120063023 ,
        // 120063024 ,
        // 120063025 ,
        // 120063026 ,
        // 120063027 ,
        // 120063028 ,
        // 120063029 ,
        // 120063030 ,
        // 120063031 ,
        // 120063032 ,
        // 120063033 ,
        // 120063034 ,
        // 120063035 ,
        // 120063036 ,
        // 120063037 ,
        // 120063038 ,
        // 120063039 ,
        // 120063040 ,
        // 120063041 ,
        // 120063042 ,
        // 120063043 ,
        // 120063044 ,
        // 120063045 ,
        // 120063046 ,
        // 120063047 ,
        // 120063048 ,
        // 120063049 ,
        // 120063050 ,
        // 120063051 ,
        // 120064001 ,
        // 120064002 ,
        // 120064003 ,
        // 120064004 ,
        // 120064005 ,
        // 120064006 ,
        // 120064007 ,
        // 120064008 ,
        // 120064009 ,
        // 120064010 ,
        // 120064011 ,
        // 120064012 ,
        // 120064013 ,
        // 120064014 ,
        // 120064015 ,
        // 120064016 ,
        // 120064017 ,
        // 120064018 ,
        // 120064019 ,
        // 120064020 ,
        // 120064021 ,
        // 120064022 ,
        // 120064023 ,
        // 120064024 ,
        // 120064025 ,
        // 120064026 ,
        // 120064027 ,
        // 120064028 ,
        // 120064029 ,
        // 120064030 ,
        // 120064031 ,
        // 120064032 ,
        // 120064033 ,
        // 120064034 ,
        // 120064035 ,
        // 120064036 ,
        // 120064037 ,
        // 120064038 ,
        // 120064039 ,
        // 120064040 ,
        // 120064041 ,
        // 120064042 ,
        // 120064043 ,
        // 120064044 ,
        // 120064045 ,
        // 120064046 ,
        // 120064047 ,
        // 120064048 ,
        // 120064049 ,
        // 120064050 ,
        // 120064051 ,
        // 120064052 ,
        // 120064053 ,
        // 120064054 ,
        // 120064055 ,
        // 120064056 ,
        // 120064057 ,
        // 120064058 ,
        // 120064059 ,
        // 120064060 ,
        // 120064061 ,
        // 120064062 ,
        // 120064063 ,
        // 120064064 ,
        // 120064065 ,
        // 120064066 ,
        // 120064067 ,
        // 120064068 ,
        // 120064069 ,
        // 120064070 ,
        // 120064071 ,
        // 120064072 ,
        // 120064073 ,
        // 120064074 ,
        // 120064075 ,
        // 120064076 ,
        // 120064077 ,
        // 120064078 ,
        // 120064079 ,
        // 120064080 ,
        // 120064081 ,
        // 120064082 ,
        // 120064083 ,
        // 120064084 ,
        // 120064085 ,
        // 120064086 ,
        // 120064087 ,
        // 120064088 ,
        // 120064089 ,
        // 120064090 ,
        // 120064091 ,
        // 120064092 ,
        // 120064093 ,
        // 120064094 ,
        // 120064095 ,
        // 120064096 ,
        // 120064097 ,
        // 120064098 ,
        // 120064099 ,
        // 120064100 ,
        // 120064101 ,
        // 120064102 ,
        // 120064103 ,
        // 120064104 ,
        // 120064105 ,
        // 120064106 ,
        // 120064107 ,
        // 120064108 ,
        // 120064109 ,
        // 120064110 ,
        // 120064111 ,
        // 120064112 ,
        // 120064113 ,
        // 120064114 ,
        // 120064115 ,
        // 120064116 ,
        // 120065001 ,
        // 120065002 ,
        // 120065003 ,
        // 120065004 ,
        // 120065005 ,
        // 120065006 ,
        // 120065007 ,
        // 120065008 ,
        // 120065009 ,
        // 120065010 ,
        // 120065011 ,
        // 120065012 ,
        // 120065013 ,
        // 120065014 ,
        // 120065015 ,
        // 120065016 ,
        // 120066001 ,
        // 120066002 ,
        // 120066003 ,
        // 120066004 ,
        // 120066005 ,
        // 120066006 ,
        // 120066007 ,
        // 120066008 ,
        // 120066009 ,
        // 120066010 ,
        // 120066011 ,
        // 120066012 ,
        // 120066013 ,
        // 120066014 ,
        // 120066015 ,
        // 120066016 ,
        // 120066017 ,
        // 120066018 ,
        // 120066019 ,
        // 120066020 ,
        // 120066021 ,
        // 120066022 ,
        // 120066023 ,
        // 120066024 ,
        // 120066025 ,
        // 120066026 ,
        // 120066027 ,
        // 120066028 ,
        // 120066029 ,
        // 120066030 ,
        // 120066031 ,
        // 120066032 ,
        // 120066033 ,
        // 120066034 ,
        // 120066035 ,
        // 120066036 ,
        // 120066037 ,
        // 120066038 ,
        // 120066039 ,
        // 120066040 ,
        // 120066041 ,
        // 120066042 ,
        // 120066043 ,
        // 120066044 ,
        // 120066045 ,
        // 120066046 ,
        // 120067001 ,
        // 120067002 ,
        // 120067003 ,
        // 120067004 ,
        // 120067005 ,
        // 120067006 ,
        // 120067007 ,
        // 120067008 ,
        // 120067009 ,
        // 120067010 ,
        // 120067011 ,
        // 120067012 ,
        // 120067013 ,
        // 120067014 ,
        // 120067015 ,
        // 120067016 ,
        // 120067017 ,
        // 120067018 ,
        // 120067019 ,
        // 120067020 ,
        // 120067021 ,
        // 120067022 ,
        // 120067023 ,
        // 120067024 ,
        // 120067025 ,
        // 120067026 ,
        // 120067027 ,
        // 120067028 ,
        // 120067029 ,
        // 120067030 ,
        // 120067031 ,
        // 120067032 ,
        // 120067033 ,
        // 120067034 ,
        // 120067035 ,
        // 120067036 ,
        // 120067037 ,
        // 120067038 ,
        // 120067039 ,
        // 120067040 ,
        // 120067041 ,
        // 120067042 ,
        // 120067043 ,
        // 120067044 ,
        // 120067045 ,
        // 120067046 ,
        // 120067047 ,
        // 120067048 ,
        // 120067049 ,
        // 120067050 ,
        // 120067051 ,
        // 120067052 ,
        // 120067053 ,
        // 120067054 ,
        // 120067055 ,
        // 120067056 ,
        // 120067057 ,
        // 120067058 ,
        // 120067059 ,
        // 120067060 ,
        // 120067061 ,
        // 120067062 ,
        // 120067063 ,
        // 120067064 ,
        // 120067065 ,
        // 120067066 ,
        // 120067067 ,
        // 120067068 ,
        // 120067069 ,
        // 120067070 ,
        // 120067071 ,
        // 120067072 ,
        // 120067073 ,
        // 120067074 ,
        // 120067075 ,
        // 120067076 ,
        // 120067077 ,
        // 120067078 ,
        // 120067079 ,
        // 120067080 ,
        // 120067081 ,
        // 120067082 ,
        // 120067083 ,
        // 120067084 ,
        // 120067085 ,
        // 120067086 ,
        // 120067087 ,
        // 120067088 ,
        // 120067089 ,
        // 120067090 ,
        // 120067091 ,
        // 120067092 ,
        // 120067093 ,
        // 120067094 ,
        // 120067095 ,
        // 120067096 ,
        // 120067097 ,
        // 120067098 ,
        // 120067099 ,
        // 120067100 ,
        // 120067101 ,
        // 120068001 ,
        // 120068002 ,
        // 120068003 ,
        // 120068004 ,
        // 120068005 ,
        // 120068006 ,
        // 120068007 ,
        // 120068008 ,
        // 120068009 ,
        // 120068010 ,
        // 120068011 ,
        // 120068012 ,
        // 120068013 ,
        // 120068014 ,
        // 120068015 ,
        // 120068016 ,
        // 120068017 ,
        // 120068018 ,
        // 120068019 ,
        // 120068020 ,
        // 120069001 ,
        // 120069002 ,
        // 120069003 ,
        // 120069004 ,
        // 120069005 ,
        // 120069006 ,
        // 120069007 ,
        // 120069008 ,
        // 120069009 ,
        // 120069010 ,
        // 120069011 ,
        // 120069012 ,
        // 120069013 ,
        // 120069014 ,
        // 120069015 ,
        // 120069016 ,
        // 120069017 ,
        // 120070001 ,
        // 120070002 ,
        // 120070003 ,
        // 120070004 ,
        // 120070005 ,
        // 120070006 ,
        // 120070007 ,
        // 120070008 ,
        // 120070009 ,
        // 120070010 ,
        // 120070011 ,
        // 120070012 ,
        // 120070013 ,
        // 120071001 ,
        // 120071002 ,
        // 120071003 ,
        // 120071004 ,
        // 120071005 ,
        // 120071006 ,
        // 120071007 ,
        // 120071008 ,
        // 120071009 ,
        // 120071010 ,
        // 120072001 ,
        // 120072002 ,
        // 120072003 ,
        // 120072004 ,
        // 120072005 ,
        // 120072006 ,
        // 120072007 ,
        // 120072008 ,
        // 120072009 ,
        // 120072010 ,
        // 120072011 ,
        // 120072012 ,
        // 120072013 ,
        // 120072014 ,
        // 120072015 ,
        // 120072016 ,
        // 120072017 ,
        // 120072018 ,
        // 120072019 ,
        // 120073001 ,
        // 120073002 ,
        // 120073003 ,
        // 120073004 ,
        // 120073005 ,
        // 120073006 ,
        // 120073007 ,
        // 120073008 ,
        // 120073009 ,
        // 120073010 ,
        // 120073011 ,
        // 120073012 ,
        // 120073013 ,
        // 120073014 ,
        // 120073015 ,
        // 120073016 ,
        // 120073017 ,
        // 120073018 ,
        // 120073019 ,
        // 120073020 ,
        // 120073021 ,
        // 120073022 ,
        // 120073023 ,
        // 120073024 ,
        // 120073025 ,
        // 120073026 ,
        // 120073027 ,
        // 120073028 ,
        // 120073029 ,
        // 120073032 ,
        // 120073033 ,
        // 120073034 ,
        // 120074001 ,
        // 120074002 ,
        // 120074003 ,
        // 120074004 ,
        // 120074005 ,
        // 120074006 ,
        // 120074007 ,
        // 120074008 ,
        // 120074009 ,
        // 120074010 ,
        // 120074011 ,
        // 120074012 ,
        // 120074013 ,
        // 120074014 ,
        // 120074015 ,
        // 120074016 ,
        // 120074017 ,
        // 120074018 ,
        // 120074019 ,
        // 120074020 ,
        // 120074021 ,
        // 120074022 ,
        // 120074023 ,
        // 120075001 ,
        // 120075002 ,
        // 120075003 ,
        // 120076001 ,
        // 120076002 ,
        // 120076003 ,
        // 120076004 ,
        // 120076005 ,
        // 120076006 ,
        // 120076007 ,
        // 120076008 ,
        // 120076009 ,
        // 120076010 ,
        // 120076011 ,
        // 120076012 ,
        // 120076013 ,
        // 120076014 ,
        // 120076015 ,
        // 120076016 ,
        // 120076017 ,
        // 120076018 ,
        // 120076019 ,
        // 120076020 ,
        // 120076021 ,
        // 120076022 ,
        // 120077001 ,
        // 120077002 ,
        // 120077003 ,
        // 120077004 ,
        // 120077005 ,
        // 120077006 ,
        // 120077007 ,
        // 120077008 ,
        // 120077009 ,
        // 120077010 ,
        // 120077011 ,
        // 120077012 ,
        // 120077013 ,
        // 120077014 ,
        // 120077015 ,
        // 120077016 ,
        // 120077017 ,
        // 120077018 ,
        // 120077019 ,
        // 120077020 ,
        // 120077021 ,
        // 120077022 ,
        // 120077023 ,
        // 120077024 ,
        // 120077025 ,
        // 120077026 ,
        // 120077027 ,
        // 120077028 ,
        // 120077036 ,
        // 120077037 ,
        // 120077038 ,
        // 120077039 ,
        // 120077040 ,
        // 120077041 ,
        // 120077042 ,
        // 120077043 ,
        // 120077044 ,
        // 120077045 ,
        // 120077046 ,
        // 120077047 ,
        // 120077048 ,
        // 120078001 ,
        // 120078002 ,
        // 120078003 ,
        // 120078004 ,
        // 120078005 ,
        // 120078006 ,
        // 120078007 ,
        // 120078008 ,
        // 120078009 ,
        // 120078010 ,
        // 120078011 ,
        // 120078012 ,
        // 120078013 ,
        // 120078014 ,
        // 120079001 ,
        // 120079002 ,
        // 120079003 ,
        // 120079004 ,
        // 120079005 ,
        // 120079006 ,
        // 120079007 ,
        // 120079008 ,
        // 120079009 ,
        // 120079010 ,
        // 120079011 ,
        // 120079012 ,
        // 120079013 ,
        // 120079014 ,
        // 120079015 ,
        // 120079016 ,
        // 120079017 ,
        // 120079018 ,
        // 120079019 ,
        // 120079020 ,
        // 120079021 ,
        // 120079022 ,
        // 120079023 ,
        // 120079024 ,
        // 120079025 ,
        // 120079026 ,
        // 120079027 ,
        // 120079028 ,
        // 120079029 ,
        // 120079030 ,
        // 120079031 ,
        // 120079032 ,
        // 120079033 ,
        // 120079034 ,
        // 120079035 ,
        // 120080001 ,
        // 120080002 ,
        // 120080003 ,
        // 120080004 ,
        // 120080005 ,
        // 120080006 ,
        // 120080007 ,
        // 120080008 ,
        // 120080009 ,
        // 120080010 ,
        // 120080011 ,
        // 120080012 ,
        // 120080013 ,
        // 120080014 ,
        // 120080015 ,
        // 120081001 ,
        // 120082002 ,
        // 120082003 ,
        // 120082004 ,
        // 120083001 ,
        // 120083002 ,
        // 120083003 ,
        // 120083004 ,
        // 120083005 ,
        // 120083006 ,
        // 120083007 ,
        // 120083008 ,
        // 120083009 ,
        // 120083010 ,
        // 120083011 ,
        // 120083012 ,
        // 120083013 ,
        // 120083014 ,
        // 120083015 ,
        // 120083016 ,
        // 120083017 ,
        // 120083018 ,
        // 120083019 ,
        // 120083020 ,
        // 120083021 ,
        // 120083022 ,
        // 120083023 ,
        // 120083024 ,
        // 120083025 ,
        // 120083026 ,
        // 120083027 ,
        // 120083028 ,
        // 120083029 ,
        // 120083030 ,
        // 120083031 ,
        // 120083032 ,
        // 120083033 ,
        // 120083034 ,
        // 120083035 ,
        // 120083036 ,
        // 120083037 ,
        // 120083038 ,
        // 120083039 ,
        // 120083040 ,
        // 120083041 ,
        // 120083042 ,
        // 120083043 ,
        // 120083044 ,
        // 120084001 ,
        // 120084002 ,
        // 120084003 ,
        // 120084004 ,
        // 120084005 ,
        // 120084006 ,
        // 120084007 ,
        // 120084008 ,
        // 120084009 ,
        // 120084010 ,
        // 120084011 ,
        // 120084012 ,
        // 120084013 ,
        // 120084014 ,
        // 120085001 ,
        // 120085002 ,
        // 120085003 ,
        // 120085004 ,
        // 120085005 ,
        // 120085006 ,
        // 120085007 ,
        // 120085008 ,
        // 120085009 ,
        // 120085010 ,
        // 120085011 ,
        // 120085012 ,
        // 120085013 ,
        // 120086001 ,
        // 120086002 ,
        // 120086003 ,
        // 120086004 ,
        // 120086005 ,
        // 120086006 ,
        // 120086007 ,
        // 120086008 ,
        // 120086009 ,
        // 120086010 ,
        // 120086011 ,
        // 120086012 ,
        // 120086013 ,
        // 120086014 ,
        // 120086015 ,
        // 120086016 ,
        // 120086017 ,
        // 120086018 ,
        // 120086019 ,
        // 120086020 ,
        // 120086021 ,
        // 120086022 ,
        // 120086023 ,
        // 120086024 ,
        // 120086025 ,
        // 120086026 ,
        // 120086027 ,
        // 120087001 ,
        // 120087002 ,
        // 120087003 ,
        // 120087004 ,
        // 120087005 ,
        // 120087006 ,
        // 120087007 ,
        // 120087008 ,
        // 120087009 ,
        // 120087010 ,
        // 120088001 ,
        // 120088002 ,
        // 120088003 ,
        // 120088004 ,
        // 120088005 ,
        // 120088006 ,
        // 120088007 ,
        // 120088008 ,
        // 120088009 ,
        // 120088010 ,
        // 120088011 ,
        // 120088012 ,
        // 120088013 ,
        // 120088014 ,
        // 120088015 ,
        // 120088016 ,
        // 120088017 ,
        // 120088018 ,
        // 120088019 ,
        // 120088020 ,
        // 120088021 ,
        // 120088022 ,
        // 120088023 ,
        // 120088024 ,
        // 120088025 ,
        // 120088026 ,
        // 120088027 ,
        // 120088028 ,
        // 120088029 ,
        // 120088030 ,
        // 120088031 ,
        // 120088032 ,
        // 120088033 ,
        // 120088034 ,
        // 120088035 ,
        // 120088036 ,
        // 120088037 ,
        // 120088038 ,
        // 120088039 ,
        // 120088040 ,
        // 120088041 ,
        // 120088042 ,
        // 120088043 ,
        // 120088044 ,
        // 120088045 ,
        // 120088046 ,
        // 120088047 ,
        // 120088048 ,
        // 120089001 ,
        // 120089002 ,
        // 120089003 ,
        // 120089004 ,
        // 120089005 ,
        // 120089006 ,
        // 120089007 ,
        // 120089008 ,
        // 120089009 ,
        // 120089010 ,
        // 120089011 ,
        // 120091001 ,
        // 120091002 ,
        // 120091003 ,
        // 120092001 ,
        // 120092002 ,
        // 120092003 ,
        // 120092004 ,
        // 120092005 ,
        // 120092006 ,
        // 120092007 ,
        // 120092008 ,
        // 120092009 ,
        // 120092010 ,
        // 120092011 ,
        // 120092012 ,
        // 120092013 ,
        // 120092014 ,
        // 120093001 ,
        // 120093002 ,
        // 120093003 ,
        // 120093004 ,
        // 120093005 ,
        // 120093006 ,
        // 120093007 ,
        // 120093008 ,
        // 120093009 ,
        // 120093010 ,
        // 120093011 ,
        // 120093012 ,
        // 120093013 ,
        // 120093014 ,
        // 120093015 ,
        // 120093016 ,
        // 120094001 ,
        // 120094002 ,
        // 120094003 ,
        // 120094004 ,
        // 120094005 ,
        // 120094006 ,
        // 120094007 ,
        // 120094008 ,
        // 120094009 ,
        // 120094010 ,
        // 120094011 ,
        // 120094012 ,
        // 120094013 ,
        // 120094014 ,
        // 120094015 ,
        // 120094016 ,
        // 120094017 ,
        // 120094018 ,
        // 120094019 ,
        // 120094020 ,
        // 120094021 ,
        // 120094022 ,
        // 120094023 ,
        // 120094024 ,
        // 120094025 ,
        // 120094026 ,
        // 120094027 ,
        // 120094028 ,
        // 120094029 ,
        // 120094030 ,
        // 120094032 ,
        // 120094033 ,
        // 120094034 ,
        // 120094035 ,
        // 120094036 ,
        // 120094037 ,
        // 120094038 ,
        // 120094039 ,
        // 120094040 ,
        // 120094041 ,
        // 120094042 ,
        // 120095001 ,
        // 120095002 ,
        // 120095003 ,
        // 120095004 ,
        // 120095005 ,
        // 120095006 ,
        // 120095007 ,
        // 120095008 ,
        // 120095009 ,
        // 120095010 ,
        // 120095011 ,
        // 120095012 ,
        // 120095013 ,
        // 120095014 ,
        // 120095015 ,
        // 120095016 ,
        // 120095017 ,
        // 120095018 ,
        // 120095019 ,
        // 120095020 ,
        // 120095021 ,
        // 120095022 ,
        // 120095023 ,
        // 120095024 ,
        // 120095025 ,
        // 120095026 ,
        // 120095027 ,
        // 120095028 ,
        // 120095029 ,
        // 120095030 ,
        // 120095031 ,
        // 120095032 ,
        // 120095033 ,
        // 120095034 ,
        // 120095035 ,
        // 120095036 ,
        // 120095037 ,
        // 120095038 ,
        // 120095039 ,
        // 120095040 ,
        // 120095041 ,
        // 120095042 ,
        // 120095043 ,
        // 120095044 ,
        // 120095045 ,
        // 120095046 ,
        // 120095047 ,
        // 120095048 ,
        // 120095049 ,
        // 120095050 ,
        // 120095051 ,
        // 120095052 ,
        // 120095053 ,
        // 120095054 ,
        // 120095055 ,
        // 120095056 ,
        // 120096001 ,
        // 120096002 ,
        // 120096003 ,
        // 120096004 ,
        // 120096005 ,
        // 120096006 ,
        // 120096007 ,
        // 120096008 ,
        // 120097001 ,
        // 120098001 ,
        // 120098002 ,
        // 120099001 ,
        // 120099002 ,
        // 120099003 ,
        // 120099004 ,
        // 120099005 ,
        // 120099006 ,
        // 120099007 ,
        // 125001005 ,
        // 125001006 ,
        // 125001007 ,
        // 125001016 ,
        // 125001017 ,
        // 125001020 ,
        // 125001026 ,
        // 125001033 ,
        // 125001034 ,
        // 125001052 ,
        // 125001061 ,
        // 125001065 ,
        // 125001078 ,
        // 125001084 ,
        // 125001085 ,
        // 125001088 ,
        // 125001089 ,
        // 125001091 ,
        // 125001093 ,
        // 125001099 ,
        // 125001107 ,
        // 125001112 ,
        // 125001120 ,
        // 125001128 ,
        // 125001133 ,
        // 125001137 ,
        // 125001139 ,
        // 125001141 ,
        // 125001142 ,
        // 125001145 ,
        // 125001146 ,
        // 125001148 ,
        // 125001149 ,
        // 125001154 ,
        // 125001155 ,
        // 125001157 ,
        // 125001158 ,
        // 125001159 ,
        // 125001160 ,
        // 125001161 ,
        // 125001162 ,
        // 125001163 ,
        // 125001164 ,
        // 125001165 ,
        // 125001167 ,
        // 125001168 ,
        // 125001172 ,
        // 125001173 ,
        // 125001174 ,
        // 125001175 ,
        // 125001178 ,
        // 125001179 ,
        // 125001180 ,
        // 125001181 ,
        // 125001182 ,
        // 125001183 ,
        // 125001184 ,
        // 125001185 ,
        // 125001186 ,
        // 125001187 ,
        // 125001188 ,
        // 125001189 ,
        // 125001190 ,
        // 125001191 ,
        // 125001192 ,
        // 125001193 ,
        // 125001199 ,
        // 125001200 ,
        // 125001201 ,
        // 125001202 ,
        // 125001203 ,
        // 125001204 ,
        // 125001205 ,
        // 125001206 ,
        // 125001211 ,
        // 125001212 ,
        // 125001214 ,
        // 125001215 ,
        // 125001216 ,
        // 125001222 ,
        // 125001223 ,
        // 125001224 ,
        // 125001225 ,
        // 125001228 ,
        // 125001229 ,
        // 125001232 ,
        // 125001233 ,
        // 125001234 ,
        // 125001235 ,
        // 125001236 ,
        // 125001237 ,
        // 125001238 ,
        // 125001239 ,
        // 125001240 ,
        // 125001241 ,
        // 125001242 ,
        // 125001243 ,
        // 125001244 ,
        // 125001245 ,
        // 125001246 ,
        // 125001247 ,
        // 125001248 ,
        // 125001249 ,
        // 125001250 ,
        // 125001251 ,
        // 125001252 ,
        // 125001253 ,
        // 125001254 ,
        // 125001255 ,
        // 125001256 ,
        // 125001257 ,
        // 125001258 ,
        // 125001259 ,
        // 125001260 ,
        // 125001261 ,
        // 125001262 ,
        // 125001263 ,
        // 125001264 ,
        // 125001265 ,
        // 125001266 ,
        // 125001267 ,
        // 125001268 ,
        // 125001269 ,
        // 125001270 ,
        // 125001271 ,
        // 125001272 ,
        // 125001278 ,
        // 125001279 ,
        // 125001280 ,
        // 125001282 ,
        // 125001283 ,
        // 125001284 ,
        // 125001286 ,
        // 125001287 ,
        // 125001288 ,
        // 125001289 ,
        // 125001290 ,
        // 125001291 ,
        // 125001292 ,
        // 125001293 ,
        // 125001294 ,
        // 125001295 ,
        // 125001296 ,
        // 125001297 ,
        // 125001298 ,
        // 125001299 ,
        // 125001300 ,
        // 125001301 ,
        // 125001302 ,
        // 125001303 ,
        // 125001304 ,
        // 125001305 ,
        // 125001306 ,
        // 125001307 ,
        // 125001308 ,
        // 125001309 ,
        // 125001310 ,
        // 125001311 ,
        // 125001312 ,
        // 125001313 ,
        // 125001314 ,
        // 125001315 ,
        // 125001316 ,
        // 125001317 ,
        // 125001318 ,
        // 125001319 ,
        // 125001320 ,
        // 125001321 ,
        // 125001322 ,
        // 125001323 ,
        // 125001324 ,
        // 125001325 ,
        // 125001326 ,
        // 125001327 ,
        // 125001328 ,
        // 125001329 ,
        // 125001330 ,
        // 125001331 ,
        // 125001332 ,
        // 125001333 ,
        // 125001334 ,
        // 125001335 ,
        // 125001336 ,
        // 125001337 ,
        // 125001338 ,
        // 125001339 ,
        // 125001340 ,
        // 125001341 ,
        // 125001343 ,
        // 125001344 ,
        // 125001345 ,
        // 125001346 ,
        // 125001347 ,
        // 125001348 ,
        // 125001349 ,
        // 125001350 ,
        // 125001351 ,
        // 125001352 ,
        // 125001353 ,
        // 125001354 ,
        // 125001355 ,
        // 125001356 ,
        // 125001357 ,
        // 125001358 ,
        // 125001359 ,
        // 125001360 ,
        // 125001361 ,
        // 125001362 ,
        // 125001363 ,
        // 125001364 ,
        // 125002001 ,
        // 125002004 ,
        // 125002005 ,
        // 125002006 ,
        // 125002008 ,
        // 125002011 ,
        // 125002018 ,
        // 125002020 ,
        // 125002022 ,
        // 125002024 ,
        // 125002027 ,
        // 125002030 ,
        // 125002031 ,
        // 125002034 ,
        // 125002035 ,
        // 125002039 ,
        // 125002048 ,
        // 125002050 ,
        // 125002056 ,
        // 125002058 ,
        // 125002059 ,
        // 125002064 ,
        // 125002069 ,
        // 125002070 ,
        // 125002072 ,
        // 125002073 ,
        // 125002076 ,
        // 125002077 ,
        // 125002078 ,
        // 125002079 ,
        // 125002081 ,
        // 125002082 ,
        // 125002083 ,
        // 125002084 ,
        // 125002085 ,
        // 125002086 ,
        // 125002087 ,
        // 125002088 ,
        // 125002089 ,
        // 125002090 ,
        // 125002091 ,
        // 125002092 ,
        // 125002093 ,
        // 125002094 ,
        // 125002095 ,
        // 125002096 ,
        // 125002097 ,
        // 125002098 ,
        // 125002099 ,
        // 125002100 ,
        // 125002101 ,
        // 125002102 ,
        // 125002103 ,
        // 125002104 ,
        // 125002105 ,
        // 125002106 ,
        // 125002107 ,
        // 125002108 ,
        // 125002109 ,
        // 125002110 ,
        // 125002111 ,
        // 125002112 ,
        // 125002113 ,
        // 125002114 ,
        // 125002115 ,
        // 125002116 ,
        // 125002117 ,
        // 125002118 ,
        // 125002119 ,
        // 125002120 ,
        // 125002121 ,
        // 125002122 ,
        // 125002123 ,
        // 125002124 ,
        // 125002125 ,
        // 125002126 ,
        // 125002127 ,
        // 125002128 ,
        // 125002129 ,
        // 125002130 ,
        // 125002131 ,
        // 125002132 ,
        // 125002133 ,
        // 125002134 ,
        // 125002135 ,
        // 125002136 ,
        // 125002137 ,
        // 125002138 ,
        // 125002139 ,
        // 125002140 ,
        // 125002141 ,
        // 125002142 ,
        // 125002143 ,
        // 125002144 ,
        // 125002145 ,
        // 125002146 ,
        // 125002147 ,
        // 125002148 ,
        // 125002149 ,
        // 125002150 ,
        // 125002151 ,
        // 125002152 ,
        // 125002153 ,
        // 125002154 ,
        // 125002155 ,
        // 125002156 ,
        // 125002157 ,
        // 125002158 ,
        // 125002159 ,
        // 125002160 ,
        // 125002161 ,
        // 125002162 ,
        // 125002163 ,
        // 125002164 ,
        // 125002165 ,
        // 125002166 ,
        // 125002167 ,
        // 125002168 ,
        // 125002169 ,
        // 125002170 ,
        // 125002171 ,
        // 125002172 ,
        // 125002173 ,
        // 125002174 ,
        // 125002175 ,
        // 125002176 ,
        // 125002177 ,
        // 125002178 ,
        // 125002179 ,
        // 125002180 ,
        // 125002181 ,
        // 125002182 ,
        // 125002183 ,
        // 125002184 ,
        // 125002185 ,
        // 125002186 ,
        // 125002187 ,
        // 125002188 ,
        // 125002189 ,
        // 125002190 ,
        // 125002191 ,
        // 125002192 ,
        // 125002193 ,
        // 125002194 ,
        // 125002195 ,
        // 125002196 ,
        // 125002197 ,
        // 125002198 ,
        // 125002199 ,
        // 125002200 ,
        // 125002201 ,
        // 125002202 ,
        // 125002203 ,
        // 125002204 ,
        // 125002205 ,
        // 125002206 ,
        // 125002207 ,
        // 125002208 ,
        // 125002209 ,
        // 125002210 ,
        // 125002211 ,
        // 125002212 ,
        // 125002213 ,
        // 125002214 ,
        // 125002215 ,
        // 125002216 ,
        // 125002217 ,
        // 125002218 ,
        // 125002219 ,
        // 125002220 ,
        // 125002221 ,
        // 125002222 ,
        // 125002223 ,
        // 125002224 ,
        // 125002225 ,
        // 125002226 ,
        // 125002227 ,
        // 125002228 ,
        // 125002229 ,
        // 125002230 ,
        // 125004008 ,
        // 125004010 ,
        // 125004017 ,
        // 125004018 ,
        // 125004019 ,
        // 125004026 ,
        // 125004027 ,
        // 125004030 ,
        // 125004031 ,
        // 125004033 ,
        // 125004034 ,
        // 125004035 ,
        // 125004036 ,
        // 125004037 ,
        // 125004038 ,
        // 125004039 ,
        // 125004040 ,
        // 125004041 ,
        // 125004042 ,
        // 125004043 ,
        // 125004044 ,
        // 125004045 ,
        // 125004046 ,
        // 125004047 ,
        // 125004048 ,
        // 125004049 ,
        // 125004050 ,
        // 125004051 ,
        // 125004052 ,
        // 125004053 ,
        // 125004054 ,
        // 125004055 ,
        // 125004056 ,
        // 125004057 ,
        // 125004058 ,
        // 125004059 ,
        // 125004060 ,
        // 125004061 ,
        // 125004062 ,
        // 125004063 ,
        // 125004064 ,
        // 125004065 ,
        // 125004066 ,
        // 125004067 ,
        // 125004068 ,
        // 125004069 ,
        // 125004070 ,
        // 125004071 ,
        // 125004072 ,
        // 125004073 ,
        // 125004074 ,
        // 125004075 ,
        // 125004076 ,
        // 125004077 ,
        // 125004078 ,
        // 125004079 ,
        // 125004080 ,
        // 125004081 ,
        // 125004082 ,
        // 125004083 ,
        // 125004084 ,
        // 125004085 ,
        // 125004086 ,
        // 125004087 ,
        // 125004088 ,
        // 125004089 ,
        // 125004090 ,
        // 125004091 ,
        // 125004092 ,
        // 125004093 ,
        // 125004094 ,
        // 125004095 ,
        // 125004096 ,
        // 125004097 ,
        // 125004098 ,
        // 125004099 ,
        // 125004100 ,
        // 125004101 ,
        // 125004102 ,
        // 125004103 ,
        // 125004104 ,
        // 125004105 ,
        // 125004106 ,
        // 125004107 ,
        // 125004108 ,
        // 125004109 ,
        // 125004110 ,
        // 125004111 ,
        // 125004112 ,
        // 125004113 ,
        // 125004114 ,
        // 125004115 ,
        // 125004116 ,
        // 125004117 ,
        // 125004118 ,
        // 125004119 ,
        // 125006002 ,
        // 125006003 ,
        // 125006004 ,
        // 125006009 ,
        // 125006010 ,
        // 125006015 ,
        // 125006020 ,
        // 125006021 ,
        // 125006022 ,
        // 125006023 ,
        // 125006025 ,
        // 125006026 ,
        // 125006027 ,
        // 125006028 ,
        // 125006029 ,
        // 125006030 ,
        // 125006031 ,
        // 125006032 ,
        // 125006033 ,
        // 125006034 ,
        // 125006035 ,
        // 125006036 ,
        // 125006037 ,
        // 125006038 ,
        // 125006039 ,
        // 125006040 ,
        // 125006041 ,
        // 125006042 ,
        // 125006043 ,
        // 125006044 ,
        // 125006045 ,
        // 125006046 ,
        // 125006047 ,
        // 125006048 ,
        // 125006049 ,
        // 125006050 ,
        // 125006051 ,
        // 125006052 ,
        // 125006053 ,
        // 125006054 ,
        // 125006055 ,
        // 125006056 ,
        // 125006057 ,
        // 125006058 ,
        // 125006059 ,
        // 125006060 ,
        // 125006061 ,
        // 125006062 ,
        // 125006063 ,
        // 125006064 ,
        // 125006065 ,
        // 125006066 ,
        // 125006067 ,
        // 125006068 ,
        // 125007004 ,
        // 125007006 ,
        // 125007007 ,
        // 125007009 ,
        // 125007013 ,
        // 125007015 ,
        // 125007018 ,
        // 125007021 ,
        // 125007022 ,
        // 125007023 ,
        // 125007024 ,
        // 125007025 ,
        // 125007026 ,
        // 125007027 ,
        // 125007028 ,
        // 125007029 ,
        // 125007030 ,
        // 125007031 ,
        // 125007032 ,
        // 125007033 ,
        // 125007034 ,
        // 125007035 ,
        // 125007036 ,
        // 125007037 ,
        // 125007038 ,
        // 125007039 ,
        // 125007040 ,
        // 125007041 ,
        // 125007042 ,
        // 125007043 ,
        // 125007044 ,
        // 125007045 ,
        // 125007046 ,
        // 125007047 ,
        // 125007048 ,
        // 125007049 ,
        // 125007050 ,
        // 125007051 ,
        // 125007052 ,
        // 125007053 ,
        // 125007054 ,
        // 125010006 ,
        // 125010010 ,
        // 125010013 ,
        // 125010014 ,
        // 125010015 ,
        // 125010021 ,
        // 125010024 ,
        // 125010027 ,
        // 125010029 ,
        // 125010030 ,
        // 125010032 ,
        // 125010033 ,
        // 125010034 ,
        // 125010035 ,
        // 125010036 ,
        // 125010037 ,
        // 125010038 ,
        // 125010039 ,
        // 125010040 ,
        // 125010041 ,
        // 125010042 ,
        // 125010043 ,
        // 125010044 ,
        // 125010045 ,
        // 125010046 ,
        // 125010047 ,
        // 125010048 ,
        // 125010049 ,
        // 125010050 ,
        // 125010051 ,
        // 125010052 ,
        // 125010053 ,
        // 125011004 ,
        // 125011006 ,
        // 125011015 ,
        // 125011026 ,
        // 125011029 ,
        // 125011039 ,
        // 125011041 ,
        // 125011043 ,
        // 125011058 ,
        // 125011065 ,
        // 125011066 ,
        // 125011089 ,
        // 125011091 ,
        // 125011092 ,
        // 125011096 ,
        // 125011097 ,
        // 125011098 ,
        // 125011101 ,
        // 125011102 ,
        // 125011103 ,
        // 125011109 ,
        // 125011110 ,
        // 125011112 ,
        // 125011115 ,
        // 125011116 ,
        // 125011118 ,
        // 125011124 ,
        // 125011125 ,
        // 125011131 ,
        // 125011137 ,
        // 125011138 ,
        // 125012003 ,
        // 125012004 ,
        // 125012015 ,
        // 125012018 ,
        // 125012019 ,
        // 125012021 ,
        // 125012022 ,
        // 125012023 ,
        // 125012025 ,
        // 125012026 ,
        // 125012027 ,
        // 125012028 ,
        // 125013004 ,
        // 125013012 ,
        // 125013029 ,
        // 125013030 ,
        // 125013036 ,
        // 125013040 ,
        // 125013042 ,
        // 125013046 ,
        // 125013049 ,
        // 125013050 ,
        // 125013051 ,
        // 125013052 ,
        // 125013053 ,
        // 125013054 ,
        // 125014010 ,
        // 125014020 ,
        // 125014021 ,
        // 125014026 ,
        // 125014029 ,
        // 125014031 ,
        // 125014033 ,
        // 125014036 ,
        // 125014040 ,
        // 125014042 ,
        // 125014043 ,
        // 125014044 ,
        // 125014045 ,
        // 125014046 ,
        // 125014047 ,
        // 125014048 ,
        // 125014049 ,
        // 125014050 ,
        // 125014051 ,
        // 125014052 ,
        // 125014053 ,
        // 125014054 ,
        // 125014055 ,
        // 125014056 ,
        // 125014057 ,
        // 125018001 ,
        // 125018010 ,
        // 125018011 ,
        // 125018012 ,
        // 125018017 ,
        // 125018018 ,
        // 125018020 ,
        // 125018021 ,
        // 125018023 ,
        // 125018026 ,
        // 125018027 ,
        // 125018028 ,
        // 125018029 ,
        // 125018030 ,
        // 125018031 ,
        // 125023001 ,
        // 125023002 ,
        // 125023003 ,
        // 125023004 ,
        // 125023007 ,
        // 125023010 ,
        // 125023014 ,
        // 125023015 ,
        // 125023016 ,
        // 125023017 ,
        // 125023018 ,
        // 125023019 ,
        // 125023020 ,
        // 125023021 ,
        // 125023022 ,
        // 125023023 ,
        // 125023024 ,
        // 125023025 ,
        // 125023026 ,
        // 125023027 ,
        // 125023028 ,
        // 125023029 ,
        // 125023030 ,
        // 125023031 ,
        // 125023032 ,
        // 125023033 ,
        // 125023034 ,
        // 125023035 ,
        // 125023036 ,
        // 125023037 ,
        // 125023038 ,
        // 125023039 ,
        // 125023040 ,
        // 125023041 ,
        // 125023042 ,
        // 125023043 ,
        // 125023044 ,
        // 125023045 ,
        // 125023046 ,
        // 125023047 ,
        // 125023048 ,
        // 125023049 ,
        // 125023050 ,
        // 125023051 ,
        // 125023052 ,
        // 125023053 ,
        // 125023054 ,
        // 125023055 ,
        // 125023056 ,
        // 125023057 ,
        // 125023058 ,
        // 125023059 ,
        // 125023060 ,
        // 125023061 ,
        // 125023062 ,
        // 125023063 ,
        // 125023064 ,
        // 125024007 ,
        // 125024008 ,
        // 125024009 ,
        // 125024010 ,
        // 125024012 ,
        // 125024013 ,
        // 125024014 ,
        // 125024015 ,
        // 125024016 ,
        // 125024017 ,
        // 125024018 ,
        // 125024019 ,
        // 125024020 ,
        // 125024021 ,
        // 125024022 ,
        // 125024023 ,
        // 125024024 ,
        // 125024025 ,
        // 125024026 ,
        // 125024027 ,
        // 125024028 ,
        // 125024029 ,
        // 125024030 ,
        // 125024031 ,
        // 125024032 ,
        // 125024033 ,
        // 125024034 ,
        // 125024035 ,
        // 125024036 ,
        // 125024037 ,
        // 125024038 ,
        // 125024039 ,
        // 125024040 ,
        // 125024041 ,
        // 125024042 ,
        // 125024043 ,
        // 125024044 ,
        // 125024045 ,
        // 125024046 ,
        // 125024047 ,
        // 125024048 ,
        // 125024050 ,
        // 125024051 ,
        // 125024052 ,
        // 125024053 ,
        // 125024054 ,
        // 125024055 ,
        // 125024056 ,
        // 125024057 ,
        // 125024058 ,
        // 125024059,
        //120099008,
       // 120042069,
       //120045123,
       //120045124,
       //120045125,
       //120045126,
       //120073042,
       // 120073043,
       //120073044,
       //120020231,
       //120099009
     ];

		foreach($agent_ids as $agent_id) {
			// Log::info("Entrando a la oficina $office->office_id");
			// if($office->office_id == 125001){
			// 	$limit = 400;
			// }else{
			// 	$limit = 250;
			// }
			// for($i = 0; $i < $limit; $i++) {

			// 	if($i < 10){
			// 		$agent_id = $office->office_id . '00' . $i;
			// 	} else if($i < 100) {
			// 		$agent_id = $office->office_id . '0' . $i;
			// 	} else {
			// 		$agent_id = $office->office_id . $i;
			// 	}

            $office = Office::where('office_id', substr($agent_id, 0, 6))->first();


				$response = Http::withToken($token)->timeout(3600)
					->get("https://api.goiconnect.com/odata/Agents($agent_id)");
				if ($response->status() == 200) {
					Log::info('Encontro agente'. $agent_id);
					$agent = $response->json();
                    $this->agentService->migrateAgent($agent, $office->id);

				}
            }

        dd($token);
	}
}
