import {
  script
} from "./chunk-3BRWPHPR.js";
import {
  BaseStyle
} from "./chunk-MDOBR2VR.js";
import {
  createElementBlock,
  mergeProps,
  openBlock,
  renderSlot
} from "./chunk-P7XL4HGA.js";

// node_modules/@primeuix/styles/iftalabel/index.mjs
var style = ({ dt: a }) => `
.p-iftalabel {
    display: block;
    position: relative;
}

.p-iftalabel label {
    position: absolute;
    pointer-events: none;
    top: ${a("iftalabel.top")};
    transition-property: all;
    transition-timing-function: ease;
    line-height: 1;
    font-size: ${a("iftalabel.font.size")};
    font-weight: ${a("iftalabel.font.weight")};
    inset-inline-start: ${a("iftalabel.position.x")};
    color: ${a("iftalabel.color")};
    transition-duration: ${a("iftalabel.transition.duration")};
}

.p-iftalabel .p-inputtext,
.p-iftalabel .p-textarea,
.p-iftalabel .p-select-label,
.p-iftalabel .p-multiselect-label,
.p-iftalabel .p-autocomplete-input-multiple,
.p-iftalabel .p-cascadeselect-label,
.p-iftalabel .p-treeselect-label {
    padding-block-start: ${a("iftalabel.input.padding.top")};
    padding-block-end: ${a("iftalabel.input.padding.bottom")};
}

.p-iftalabel:has(.p-invalid) label {
    color: ${a("iftalabel.invalid.color")};
}

.p-iftalabel:has(input:focus) label,
.p-iftalabel:has(input:-webkit-autofill) label,
.p-iftalabel:has(textarea:focus) label,
.p-iftalabel:has(.p-inputwrapper-focus) label {
    color: ${a("iftalabel.focus.color")};
}

.p-iftalabel .p-inputicon {
    top: ${a("iftalabel.input.padding.top")};
    transform: translateY(25%);
    margin-top: 0;
}
`;

// node_modules/primevue/iftalabel/style/index.mjs
var classes = {
  root: "p-iftalabel"
};
var IftaLabelStyle = BaseStyle.extend({
  name: "iftalabel",
  style,
  classes
});

// node_modules/primevue/iftalabel/index.mjs
var script$1 = {
  name: "BaseIftaLabel",
  "extends": script,
  style: IftaLabelStyle,
  provide: function provide() {
    return {
      $pcIftaLabel: this,
      $parentInstance: this
    };
  }
};
var script2 = {
  name: "IftaLabel",
  "extends": script$1,
  inheritAttrs: false
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("span", mergeProps({
    "class": _ctx.cx("root")
  }, _ctx.ptmi("root")), [renderSlot(_ctx.$slots, "default")], 16);
}
script2.render = render;

export {
  IftaLabelStyle,
  script2 as script
};
//# sourceMappingURL=chunk-4BSWR2SB.js.map
