{
  "version": 3,
  "sources": ["../../@primeuix/src/resolvers/zod/index.ts"],
  "sourcesContent": ["import { toValues } from '@primeuix/forms/utils';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport type { ParseParams, Schema } from 'zod';\nimport type { ResolverOptions, ResolverResult } from '..';\n\nexport const zodResolver =\n    <T extends Schema<any, any>>(schema: T, schemaOptions?: ParseParams, resolverOptions?: ResolverOptions) =>\n    async ({ values, name }: any): Promise<ResolverResult<T>> => {\n        const { sync = false, raw = false } = resolverOptions || {};\n\n        try {\n            const result = await schema[sync ? 'parse' : 'parseAsync'](values, schemaOptions);\n\n            return {\n                values: toValues(raw ? values : result, name),\n                errors: {}\n            };\n        } catch (e: any) {\n            if (Array.isArray(e?.errors)) {\n                return {\n                    values: toValues(raw ? values : undefined, name),\n                    errors: e.errors.reduce((acc: Record<string, any[]>, error: any) => {\n                        const pathKey = isNotEmpty(error.path) ? error.path.join('.') : name;\n\n                        if (pathKey) {\n                            acc[pathKey] ||= [];\n                            acc[pathKey].push(error);\n                        }\n\n                        return acc;\n                    }, {})\n                };\n            }\n\n            throw e;\n        }\n    };\n"],
  "mappings": ";;;;;;;AAKO,IAAMA,IACT,CAA6BC,GAAWC,IAA6BC,MACrE,OAAO,EAAE,QAAAC,GAAQ,MAAAC,EAAK,MAAuC;AACzD,MAAM,EAAE,MAAAC,IAAO,OAAO,KAAAC,IAAM,MAAM,IAAIJ,KAAmB,CAAC;AAE1D,MAAI;AACA,QAAMK,IAAS,MAAMP,EAAOK,IAAO,UAAU,YAAY,EAAEF,GAAQF,EAAa;AAEhF,WAAO,EACH,QAAQO,EAASF,IAAMH,IAASI,GAAQH,CAAI,GAC5C,QAAQ,CAAC,EACb;EACJ,SAASK,GAAQ;AACb,QAAI,MAAM,QAAQA,uBAAG,MAAM,EACvB,QAAO,EACH,QAAQD,EAASF,IAAMH,IAAS,QAAWC,CAAI,GAC/C,QAAQK,EAAE,OAAO,OAAO,CAACC,GAA4BC,MAAe;AAChE,UAAMC,IAAUC,WAAWF,EAAM,IAAI,IAAIA,EAAM,KAAK,KAAK,GAAG,IAAIP;AAEhE,aAAIQ,MACAF,gBAAiB,CAAC,IAClBA,EAAIE,CAAO,EAAE,KAAKD,CAAK,IAGpBD;IACX,GAAG,CAAC,CAAC,EACT;AAGJ,UAAMD;EACV;AACJ;",
  "names": ["zodResolver", "schema", "schemaOptions", "resolverOptions", "values", "name", "sync", "raw", "result", "toValues", "e", "acc", "error", "pathKey", "isNotEmpty"]
}
