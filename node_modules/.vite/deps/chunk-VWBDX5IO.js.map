{
  "version": 3,
  "sources": ["../../src/message/style/MessageStyle.js", "../../src/message/BaseMessage.vue", "../../src/message/Message.vue", "../../src/message/Message.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/message';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ props }) => [\n        'p-message p-component p-message-' + props.severity,\n        {\n            'p-message-outlined': props.variant === 'outlined',\n            'p-message-simple': props.variant === 'simple',\n            'p-message-sm': props.size === 'small',\n            'p-message-lg': props.size === 'large'\n        }\n    ],\n    content: 'p-message-content',\n    icon: 'p-message-icon',\n    text: 'p-message-text',\n    closeButton: 'p-message-close-button',\n    closeIcon: 'p-message-close-icon'\n};\n\nexport default BaseStyle.extend({\n    name: 'message',\n    style,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MessageStyle from 'primevue/message/style';\n\nexport default {\n    name: 'BaseMessage',\n    extends: BaseComponent,\n    props: {\n        severity: {\n            type: String,\n            default: 'info'\n        },\n        closable: {\n            type: Boolean,\n            default: false\n        },\n        life: {\n            type: Number,\n            default: null\n        },\n        icon: {\n            type: String,\n            default: undefined\n        },\n        closeIcon: {\n            type: String,\n            default: undefined\n        },\n        closeButtonProps: {\n            type: null,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        variant: {\n            type: String,\n            default: null\n        }\n    },\n    style: MessageStyle,\n    provide() {\n        return {\n            $pcMessage: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <transition name=\"p-message\" appear v-bind=\"ptmi('transition')\">\n        <div v-show=\"visible\" :class=\"cx('root')\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" :data-p=\"dataP\" v-bind=\"ptm('root')\">\n            <slot v-if=\"$slots.container\" name=\"container\" :closeCallback=\"close\"></slot>\n            <div v-else :class=\"cx('content')\" :data-p=\"dataP\" v-bind=\"ptm('content')\">\n                <slot name=\"icon\" :class=\"cx('icon')\">\n                    <component :is=\"icon ? 'span' : null\" :class=\"[cx('icon'), icon]\" :data-p=\"dataP\" v-bind=\"ptm('icon')\"></component>\n                </slot>\n                <div v-if=\"$slots.default\" :class=\"cx('text')\" :data-p=\"dataP\" v-bind=\"ptm('text')\">\n                    <slot></slot>\n                </div>\n                <button v-if=\"closable\" v-ripple :class=\"cx('closeButton')\" :aria-label=\"closeAriaLabel\" type=\"button\" @click=\"close($event)\" :data-p=\"dataP\" v-bind=\"{ ...closeButtonProps, ...ptm('closeButton') }\">\n                    <slot name=\"closeicon\">\n                        <i v-if=\"closeIcon\" :class=\"[cx('closeIcon'), closeIcon]\" :data-p=\"dataP\" v-bind=\"ptm('closeIcon')\" />\n                        <TimesIcon v-else :class=\"[cx('closeIcon'), closeIcon]\" :data-p=\"dataP\" v-bind=\"ptm('closeIcon')\" />\n                    </slot>\n                </button>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport TimesIcon from '@primevue/icons/times';\nimport Ripple from 'primevue/ripple';\nimport BaseMessage from './BaseMessage.vue';\n\nexport default {\n    name: 'Message',\n    extends: BaseMessage,\n    inheritAttrs: false,\n    emits: ['close', 'life-end'],\n    timeout: null,\n    data() {\n        return {\n            visible: true\n        };\n    },\n    mounted() {\n        if (this.life) {\n            setTimeout(() => {\n                this.visible = false;\n                this.$emit('life-end');\n            }, this.life);\n        }\n    },\n    methods: {\n        close(event) {\n            this.visible = false;\n            this.$emit('close', event);\n        }\n    },\n    computed: {\n        closeAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n        },\n        dataP() {\n            return cn({\n                outlined: this.variant === 'outlined',\n                simple: this.variant === 'simple',\n                [this.severity]: this.severity,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        TimesIcon\n    }\n};\n</script>\n", "<template>\n    <transition name=\"p-message\" appear v-bind=\"ptmi('transition')\">\n        <div v-show=\"visible\" :class=\"cx('root')\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" :data-p=\"dataP\" v-bind=\"ptm('root')\">\n            <slot v-if=\"$slots.container\" name=\"container\" :closeCallback=\"close\"></slot>\n            <div v-else :class=\"cx('content')\" :data-p=\"dataP\" v-bind=\"ptm('content')\">\n                <slot name=\"icon\" :class=\"cx('icon')\">\n                    <component :is=\"icon ? 'span' : null\" :class=\"[cx('icon'), icon]\" :data-p=\"dataP\" v-bind=\"ptm('icon')\"></component>\n                </slot>\n                <div v-if=\"$slots.default\" :class=\"cx('text')\" :data-p=\"dataP\" v-bind=\"ptm('text')\">\n                    <slot></slot>\n                </div>\n                <button v-if=\"closable\" v-ripple :class=\"cx('closeButton')\" :aria-label=\"closeAriaLabel\" type=\"button\" @click=\"close($event)\" :data-p=\"dataP\" v-bind=\"{ ...closeButtonProps, ...ptm('closeButton') }\">\n                    <slot name=\"closeicon\">\n                        <i v-if=\"closeIcon\" :class=\"[cx('closeIcon'), closeIcon]\" :data-p=\"dataP\" v-bind=\"ptm('closeIcon')\" />\n                        <TimesIcon v-else :class=\"[cx('closeIcon'), closeIcon]\" :data-p=\"dataP\" v-bind=\"ptm('closeIcon')\" />\n                    </slot>\n                </button>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport TimesIcon from '@primevue/icons/times';\nimport Ripple from 'primevue/ripple';\nimport BaseMessage from './BaseMessage.vue';\n\nexport default {\n    name: 'Message',\n    extends: BaseMessage,\n    inheritAttrs: false,\n    emits: ['close', 'life-end'],\n    timeout: null,\n    data() {\n        return {\n            visible: true\n        };\n    },\n    mounted() {\n        if (this.life) {\n            setTimeout(() => {\n                this.visible = false;\n                this.$emit('life-end');\n            }, this.life);\n        }\n    },\n    methods: {\n        close(event) {\n            this.visible = false;\n            this.$emit('close', event);\n        }\n    },\n    computed: {\n        closeAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n        },\n        dataP() {\n            return cn({\n                outlined: this.variant === 'outlined',\n                simple: this.variant === 'simple',\n                [this.severity]: this.severity,\n                [this.size]: this.size\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        TimesIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "_ref", "props", "severity", "variant", "size", "content", "icon", "text", "closeButton", "closeIcon", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "severity", "type", "String", "closable", "Boolean", "life", "Number", "icon", "undefined", "closeIcon", "closeButtonProps", "size", "variant", "style", "MessageStyle", "provide", "$pcMessage", "$parentInstance", "script", "BaseMessage", "inheritAttrs", "emits", "timeout", "data", "visible", "mounted", "_this", "setTimeout", "$emit", "methods", "close", "event", "computed", "closeAriaLabel", "$primevue", "config", "locale", "aria", "dataP", "cn", "_defineProperty", "outlined", "simple", "directives", "ripple", "Ripple", "components", "TimesIcon", "_openBlock", "_createBlock", "_Transition", "_mergeProps", "appear", "_ctx", "ptmi", "_withDirectives", "_createElementVNode", "cx", "role", "$options", "ptm", "$slots", "container", "_renderSlot", "closeCallback", "_createElementBlock", "_resolveDynamicComponent", "onClick", "_cache", "$event", "_objectSpread", "_hoisted_5", "_component_TimesIcon", "$data"]
}
