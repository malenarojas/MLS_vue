import {
  script as script3
} from "./chunk-BX7PEZZA.js";
import {
  script as script2
} from "./chunk-QZLZIEMW.js";
import {
  Ripple
} from "./chunk-T2VJQRCE.js";
import {
  script
} from "./chunk-3BRWPHPR.js";
import {
  BaseStyle
} from "./chunk-MDOBR2VR.js";
import {
  cn
} from "./chunk-BHXJDUN2.js";
import {
  isEmpty
} from "./chunk-4ZFEZIUG.js";
import {
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  mergeProps,
  normalizeClass,
  openBlock,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  toDisplayString,
  withCtx,
  withDirectives
} from "./chunk-P7XL4HGA.js";

// node_modules/@primeuix/styles/button/index.mjs
var style = ({ dt: o }) => `
.p-button {
    display: inline-flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    position: relative;
    color: ${o("button.primary.color")};
    background: ${o("button.primary.background")};
    border: 1px solid ${o("button.primary.border.color")};
    padding: ${o("button.padding.y")} ${o("button.padding.x")};
    font-size: 1rem;
    font-family: inherit;
    font-feature-settings: inherit;
    transition: background ${o("button.transition.duration")}, color ${o("button.transition.duration")}, border-color ${o("button.transition.duration")},
            outline-color ${o("button.transition.duration")}, box-shadow ${o("button.transition.duration")};
    border-radius: ${o("button.border.radius")};
    outline-color: transparent;
    gap: ${o("button.gap")};
}

.p-button:disabled {
    cursor: default;
}

.p-button-icon-right {
    order: 1;
}

.p-button-icon-right:dir(rtl) {
    order: -1;
}

.p-button:not(.p-button-vertical) .p-button-icon:not(.p-button-icon-right):dir(rtl) {
    order: 1;
}

.p-button-icon-bottom {
    order: 2;
}

.p-button-icon-only {
    width: ${o("button.icon.only.width")};
    padding-inline-start: 0;
    padding-inline-end: 0;
    gap: 0;
}

.p-button-icon-only.p-button-rounded {
    border-radius: 50%;
    height: ${o("button.icon.only.width")};
}

.p-button-icon-only .p-button-label {
    visibility: hidden;
    width: 0;
}

.p-button-sm {
    font-size: ${o("button.sm.font.size")};
    padding: ${o("button.sm.padding.y")} ${o("button.sm.padding.x")};
}

.p-button-sm .p-button-icon {
    font-size: ${o("button.sm.font.size")};
}

.p-button-sm.p-button-icon-only {
    width: ${o("button.sm.icon.only.width")};
}

.p-button-sm.p-button-icon-only.p-button-rounded {
    height: ${o("button.sm.icon.only.width")};
}

.p-button-lg {
    font-size: ${o("button.lg.font.size")};
    padding: ${o("button.lg.padding.y")} ${o("button.lg.padding.x")};
}

.p-button-lg .p-button-icon {
    font-size: ${o("button.lg.font.size")};
}

.p-button-lg.p-button-icon-only {
    width: ${o("button.lg.icon.only.width")};
}

.p-button-lg.p-button-icon-only.p-button-rounded {
    height: ${o("button.lg.icon.only.width")};
}

.p-button-vertical {
    flex-direction: column;
}

.p-button-label {
    font-weight: ${o("button.label.font.weight")};
}

.p-button-fluid {
    width: 100%;
}

.p-button-fluid.p-button-icon-only {
    width: ${o("button.icon.only.width")};
}

.p-button:not(:disabled):hover {
    background: ${o("button.primary.hover.background")};
    border: 1px solid ${o("button.primary.hover.border.color")};
    color: ${o("button.primary.hover.color")};
}

.p-button:not(:disabled):active {
    background: ${o("button.primary.active.background")};
    border: 1px solid ${o("button.primary.active.border.color")};
    color: ${o("button.primary.active.color")};
}

.p-button:focus-visible {
    box-shadow: ${o("button.primary.focus.ring.shadow")};
    outline: ${o("button.focus.ring.width")} ${o("button.focus.ring.style")} ${o("button.primary.focus.ring.color")};
    outline-offset: ${o("button.focus.ring.offset")};
}

.p-button .p-badge {
    min-width: ${o("button.badge.size")};
    height: ${o("button.badge.size")};
    line-height: ${o("button.badge.size")};
}

.p-button-raised {
    box-shadow: ${o("button.raised.shadow")};
}

.p-button-rounded {
    border-radius: ${o("button.rounded.border.radius")};
}

.p-button-secondary {
    background: ${o("button.secondary.background")};
    border: 1px solid ${o("button.secondary.border.color")};
    color: ${o("button.secondary.color")};
}

.p-button-secondary:not(:disabled):hover {
    background: ${o("button.secondary.hover.background")};
    border: 1px solid ${o("button.secondary.hover.border.color")};
    color: ${o("button.secondary.hover.color")};
}

.p-button-secondary:not(:disabled):active {
    background: ${o("button.secondary.active.background")};
    border: 1px solid ${o("button.secondary.active.border.color")};
    color: ${o("button.secondary.active.color")};
}

.p-button-secondary:focus-visible {
    outline-color: ${o("button.secondary.focus.ring.color")};
    box-shadow: ${o("button.secondary.focus.ring.shadow")};
}

.p-button-success {
    background: ${o("button.success.background")};
    border: 1px solid ${o("button.success.border.color")};
    color: ${o("button.success.color")};
}

.p-button-success:not(:disabled):hover {
    background: ${o("button.success.hover.background")};
    border: 1px solid ${o("button.success.hover.border.color")};
    color: ${o("button.success.hover.color")};
}

.p-button-success:not(:disabled):active {
    background: ${o("button.success.active.background")};
    border: 1px solid ${o("button.success.active.border.color")};
    color: ${o("button.success.active.color")};
}

.p-button-success:focus-visible {
    outline-color: ${o("button.success.focus.ring.color")};
    box-shadow: ${o("button.success.focus.ring.shadow")};
}

.p-button-info {
    background: ${o("button.info.background")};
    border: 1px solid ${o("button.info.border.color")};
    color: ${o("button.info.color")};
}

.p-button-info:not(:disabled):hover {
    background: ${o("button.info.hover.background")};
    border: 1px solid ${o("button.info.hover.border.color")};
    color: ${o("button.info.hover.color")};
}

.p-button-info:not(:disabled):active {
    background: ${o("button.info.active.background")};
    border: 1px solid ${o("button.info.active.border.color")};
    color: ${o("button.info.active.color")};
}

.p-button-info:focus-visible {
    outline-color: ${o("button.info.focus.ring.color")};
    box-shadow: ${o("button.info.focus.ring.shadow")};
}

.p-button-warn {
    background: ${o("button.warn.background")};
    border: 1px solid ${o("button.warn.border.color")};
    color: ${o("button.warn.color")};
}

.p-button-warn:not(:disabled):hover {
    background: ${o("button.warn.hover.background")};
    border: 1px solid ${o("button.warn.hover.border.color")};
    color: ${o("button.warn.hover.color")};
}

.p-button-warn:not(:disabled):active {
    background: ${o("button.warn.active.background")};
    border: 1px solid ${o("button.warn.active.border.color")};
    color: ${o("button.warn.active.color")};
}

.p-button-warn:focus-visible {
    outline-color: ${o("button.warn.focus.ring.color")};
    box-shadow: ${o("button.warn.focus.ring.shadow")};
}

.p-button-help {
    background: ${o("button.help.background")};
    border: 1px solid ${o("button.help.border.color")};
    color: ${o("button.help.color")};
}

.p-button-help:not(:disabled):hover {
    background: ${o("button.help.hover.background")};
    border: 1px solid ${o("button.help.hover.border.color")};
    color: ${o("button.help.hover.color")};
}

.p-button-help:not(:disabled):active {
    background: ${o("button.help.active.background")};
    border: 1px solid ${o("button.help.active.border.color")};
    color: ${o("button.help.active.color")};
}

.p-button-help:focus-visible {
    outline-color: ${o("button.help.focus.ring.color")};
    box-shadow: ${o("button.help.focus.ring.shadow")};
}

.p-button-danger {
    background: ${o("button.danger.background")};
    border: 1px solid ${o("button.danger.border.color")};
    color: ${o("button.danger.color")};
}

.p-button-danger:not(:disabled):hover {
    background: ${o("button.danger.hover.background")};
    border: 1px solid ${o("button.danger.hover.border.color")};
    color: ${o("button.danger.hover.color")};
}

.p-button-danger:not(:disabled):active {
    background: ${o("button.danger.active.background")};
    border: 1px solid ${o("button.danger.active.border.color")};
    color: ${o("button.danger.active.color")};
}

.p-button-danger:focus-visible {
    outline-color: ${o("button.danger.focus.ring.color")};
    box-shadow: ${o("button.danger.focus.ring.shadow")};
}

.p-button-contrast {
    background: ${o("button.contrast.background")};
    border: 1px solid ${o("button.contrast.border.color")};
    color: ${o("button.contrast.color")};
}

.p-button-contrast:not(:disabled):hover {
    background: ${o("button.contrast.hover.background")};
    border: 1px solid ${o("button.contrast.hover.border.color")};
    color: ${o("button.contrast.hover.color")};
}

.p-button-contrast:not(:disabled):active {
    background: ${o("button.contrast.active.background")};
    border: 1px solid ${o("button.contrast.active.border.color")};
    color: ${o("button.contrast.active.color")};
}

.p-button-contrast:focus-visible {
    outline-color: ${o("button.contrast.focus.ring.color")};
    box-shadow: ${o("button.contrast.focus.ring.shadow")};
}

.p-button-outlined {
    background: transparent;
    border-color: ${o("button.outlined.primary.border.color")};
    color: ${o("button.outlined.primary.color")};
}

.p-button-outlined:not(:disabled):hover {
    background: ${o("button.outlined.primary.hover.background")};
    border-color: ${o("button.outlined.primary.border.color")};
    color: ${o("button.outlined.primary.color")};
}

.p-button-outlined:not(:disabled):active {
    background: ${o("button.outlined.primary.active.background")};
    border-color: ${o("button.outlined.primary.border.color")};
    color: ${o("button.outlined.primary.color")};
}

.p-button-outlined.p-button-secondary {
    border-color: ${o("button.outlined.secondary.border.color")};
    color: ${o("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-secondary:not(:disabled):hover {
    background: ${o("button.outlined.secondary.hover.background")};
    border-color: ${o("button.outlined.secondary.border.color")};
    color: ${o("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-secondary:not(:disabled):active {
    background: ${o("button.outlined.secondary.active.background")};
    border-color: ${o("button.outlined.secondary.border.color")};
    color: ${o("button.outlined.secondary.color")};
}

.p-button-outlined.p-button-success {
    border-color: ${o("button.outlined.success.border.color")};
    color: ${o("button.outlined.success.color")};
}

.p-button-outlined.p-button-success:not(:disabled):hover {
    background: ${o("button.outlined.success.hover.background")};
    border-color: ${o("button.outlined.success.border.color")};
    color: ${o("button.outlined.success.color")};
}

.p-button-outlined.p-button-success:not(:disabled):active {
    background: ${o("button.outlined.success.active.background")};
    border-color: ${o("button.outlined.success.border.color")};
    color: ${o("button.outlined.success.color")};
}

.p-button-outlined.p-button-info {
    border-color: ${o("button.outlined.info.border.color")};
    color: ${o("button.outlined.info.color")};
}

.p-button-outlined.p-button-info:not(:disabled):hover {
    background: ${o("button.outlined.info.hover.background")};
    border-color: ${o("button.outlined.info.border.color")};
    color: ${o("button.outlined.info.color")};
}

.p-button-outlined.p-button-info:not(:disabled):active {
    background: ${o("button.outlined.info.active.background")};
    border-color: ${o("button.outlined.info.border.color")};
    color: ${o("button.outlined.info.color")};
}

.p-button-outlined.p-button-warn {
    border-color: ${o("button.outlined.warn.border.color")};
    color: ${o("button.outlined.warn.color")};
}

.p-button-outlined.p-button-warn:not(:disabled):hover {
    background: ${o("button.outlined.warn.hover.background")};
    border-color: ${o("button.outlined.warn.border.color")};
    color: ${o("button.outlined.warn.color")};
}

.p-button-outlined.p-button-warn:not(:disabled):active {
    background: ${o("button.outlined.warn.active.background")};
    border-color: ${o("button.outlined.warn.border.color")};
    color: ${o("button.outlined.warn.color")};
}

.p-button-outlined.p-button-help {
    border-color: ${o("button.outlined.help.border.color")};
    color: ${o("button.outlined.help.color")};
}

.p-button-outlined.p-button-help:not(:disabled):hover {
    background: ${o("button.outlined.help.hover.background")};
    border-color: ${o("button.outlined.help.border.color")};
    color: ${o("button.outlined.help.color")};
}

.p-button-outlined.p-button-help:not(:disabled):active {
    background: ${o("button.outlined.help.active.background")};
    border-color: ${o("button.outlined.help.border.color")};
    color: ${o("button.outlined.help.color")};
}

.p-button-outlined.p-button-danger {
    border-color: ${o("button.outlined.danger.border.color")};
    color: ${o("button.outlined.danger.color")};
}

.p-button-outlined.p-button-danger:not(:disabled):hover {
    background: ${o("button.outlined.danger.hover.background")};
    border-color: ${o("button.outlined.danger.border.color")};
    color: ${o("button.outlined.danger.color")};
}

.p-button-outlined.p-button-danger:not(:disabled):active {
    background: ${o("button.outlined.danger.active.background")};
    border-color: ${o("button.outlined.danger.border.color")};
    color: ${o("button.outlined.danger.color")};
}

.p-button-outlined.p-button-contrast {
    border-color: ${o("button.outlined.contrast.border.color")};
    color: ${o("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-contrast:not(:disabled):hover {
    background: ${o("button.outlined.contrast.hover.background")};
    border-color: ${o("button.outlined.contrast.border.color")};
    color: ${o("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-contrast:not(:disabled):active {
    background: ${o("button.outlined.contrast.active.background")};
    border-color: ${o("button.outlined.contrast.border.color")};
    color: ${o("button.outlined.contrast.color")};
}

.p-button-outlined.p-button-plain {
    border-color: ${o("button.outlined.plain.border.color")};
    color: ${o("button.outlined.plain.color")};
}

.p-button-outlined.p-button-plain:not(:disabled):hover {
    background: ${o("button.outlined.plain.hover.background")};
    border-color: ${o("button.outlined.plain.border.color")};
    color: ${o("button.outlined.plain.color")};
}

.p-button-outlined.p-button-plain:not(:disabled):active {
    background: ${o("button.outlined.plain.active.background")};
    border-color: ${o("button.outlined.plain.border.color")};
    color: ${o("button.outlined.plain.color")};
}

.p-button-text {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.primary.color")};
}

.p-button-text:not(:disabled):hover {
    background: ${o("button.text.primary.hover.background")};
    border-color: transparent;
    color: ${o("button.text.primary.color")};
}

.p-button-text:not(:disabled):active {
    background: ${o("button.text.primary.active.background")};
    border-color: transparent;
    color: ${o("button.text.primary.color")};
}

.p-button-text.p-button-secondary {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.secondary.color")};
}

.p-button-text.p-button-secondary:not(:disabled):hover {
    background: ${o("button.text.secondary.hover.background")};
    border-color: transparent;
    color: ${o("button.text.secondary.color")};
}

.p-button-text.p-button-secondary:not(:disabled):active {
    background: ${o("button.text.secondary.active.background")};
    border-color: transparent;
    color: ${o("button.text.secondary.color")};
}

.p-button-text.p-button-success {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.success.color")};
}

.p-button-text.p-button-success:not(:disabled):hover {
    background: ${o("button.text.success.hover.background")};
    border-color: transparent;
    color: ${o("button.text.success.color")};
}

.p-button-text.p-button-success:not(:disabled):active {
    background: ${o("button.text.success.active.background")};
    border-color: transparent;
    color: ${o("button.text.success.color")};
}

.p-button-text.p-button-info {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.info.color")};
}

.p-button-text.p-button-info:not(:disabled):hover {
    background: ${o("button.text.info.hover.background")};
    border-color: transparent;
    color: ${o("button.text.info.color")};
}

.p-button-text.p-button-info:not(:disabled):active {
    background: ${o("button.text.info.active.background")};
    border-color: transparent;
    color: ${o("button.text.info.color")};
}

.p-button-text.p-button-warn {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.warn.color")};
}

.p-button-text.p-button-warn:not(:disabled):hover {
    background: ${o("button.text.warn.hover.background")};
    border-color: transparent;
    color: ${o("button.text.warn.color")};
}

.p-button-text.p-button-warn:not(:disabled):active {
    background: ${o("button.text.warn.active.background")};
    border-color: transparent;
    color: ${o("button.text.warn.color")};
}

.p-button-text.p-button-help {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.help.color")};
}

.p-button-text.p-button-help:not(:disabled):hover {
    background: ${o("button.text.help.hover.background")};
    border-color: transparent;
    color: ${o("button.text.help.color")};
}

.p-button-text.p-button-help:not(:disabled):active {
    background: ${o("button.text.help.active.background")};
    border-color: transparent;
    color: ${o("button.text.help.color")};
}

.p-button-text.p-button-danger {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.danger.color")};
}

.p-button-text.p-button-danger:not(:disabled):hover {
    background: ${o("button.text.danger.hover.background")};
    border-color: transparent;
    color: ${o("button.text.danger.color")};
}

.p-button-text.p-button-danger:not(:disabled):active {
    background: ${o("button.text.danger.active.background")};
    border-color: transparent;
    color: ${o("button.text.danger.color")};
}

.p-button-text.p-button-contrast {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.contrast.color")};
}

.p-button-text.p-button-contrast:not(:disabled):hover {
    background: ${o("button.text.contrast.hover.background")};
    border-color: transparent;
    color: ${o("button.text.contrast.color")};
}

.p-button-text.p-button-contrast:not(:disabled):active {
    background: ${o("button.text.contrast.active.background")};
    border-color: transparent;
    color: ${o("button.text.contrast.color")};
}

.p-button-text.p-button-plain {
    background: transparent;
    border-color: transparent;
    color: ${o("button.text.plain.color")};
}

.p-button-text.p-button-plain:not(:disabled):hover {
    background: ${o("button.text.plain.hover.background")};
    border-color: transparent;
    color: ${o("button.text.plain.color")};
}

.p-button-text.p-button-plain:not(:disabled):active {
    background: ${o("button.text.plain.active.background")};
    border-color: transparent;
    color: ${o("button.text.plain.color")};
}

.p-button-link {
    background: transparent;
    border-color: transparent;
    color: ${o("button.link.color")};
}

.p-button-link:not(:disabled):hover {
    background: transparent;
    border-color: transparent;
    color: ${o("button.link.hover.color")};
}

.p-button-link:not(:disabled):hover .p-button-label {
    text-decoration: underline;
}

.p-button-link:not(:disabled):active {
    background: transparent;
    border-color: transparent;
    color: ${o("button.link.active.color")};
}
`;

// node_modules/primevue/button/style/index.mjs
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var classes = {
  root: function root(_ref) {
    var instance = _ref.instance, props = _ref.props;
    return ["p-button p-component", _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({
      "p-button-icon-only": instance.hasIcon && !props.label && !props.badge,
      "p-button-vertical": (props.iconPos === "top" || props.iconPos === "bottom") && props.label,
      "p-button-loading": props.loading,
      "p-button-link": props.link || props.variant === "link"
    }, "p-button-".concat(props.severity), props.severity), "p-button-raised", props.raised), "p-button-rounded", props.rounded), "p-button-text", props.text || props.variant === "text"), "p-button-outlined", props.outlined || props.variant === "outlined"), "p-button-sm", props.size === "small"), "p-button-lg", props.size === "large"), "p-button-plain", props.plain), "p-button-fluid", instance.hasFluid)];
  },
  loadingIcon: "p-button-loading-icon",
  icon: function icon(_ref3) {
    var props = _ref3.props;
    return ["p-button-icon", _defineProperty({}, "p-button-icon-".concat(props.iconPos), props.label)];
  },
  label: "p-button-label"
};
var ButtonStyle = BaseStyle.extend({
  name: "button",
  style,
  classes
});

// node_modules/primevue/button/index.mjs
var script$1 = {
  name: "BaseButton",
  "extends": script,
  props: {
    label: {
      type: String,
      "default": null
    },
    icon: {
      type: String,
      "default": null
    },
    iconPos: {
      type: String,
      "default": "left"
    },
    iconClass: {
      type: [String, Object],
      "default": null
    },
    badge: {
      type: String,
      "default": null
    },
    badgeClass: {
      type: [String, Object],
      "default": null
    },
    badgeSeverity: {
      type: String,
      "default": "secondary"
    },
    loading: {
      type: Boolean,
      "default": false
    },
    loadingIcon: {
      type: String,
      "default": void 0
    },
    as: {
      type: [String, Object],
      "default": "BUTTON"
    },
    asChild: {
      type: Boolean,
      "default": false
    },
    link: {
      type: Boolean,
      "default": false
    },
    severity: {
      type: String,
      "default": null
    },
    raised: {
      type: Boolean,
      "default": false
    },
    rounded: {
      type: Boolean,
      "default": false
    },
    text: {
      type: Boolean,
      "default": false
    },
    outlined: {
      type: Boolean,
      "default": false
    },
    size: {
      type: String,
      "default": null
    },
    variant: {
      type: String,
      "default": null
    },
    plain: {
      type: Boolean,
      "default": false
    },
    fluid: {
      type: Boolean,
      "default": null
    }
  },
  style: ButtonStyle,
  provide: function provide() {
    return {
      $pcButton: this,
      $parentInstance: this
    };
  }
};
function _typeof2(o) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof2(o);
}
function _defineProperty2(e, r, t) {
  return (r = _toPropertyKey2(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey2(t) {
  var i = _toPrimitive2(t, "string");
  return "symbol" == _typeof2(i) ? i : i + "";
}
function _toPrimitive2(t, r) {
  if ("object" != _typeof2(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof2(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var script4 = {
  name: "Button",
  "extends": script$1,
  inheritAttrs: false,
  inject: {
    $pcFluid: {
      "default": null
    }
  },
  methods: {
    getPTOptions: function getPTOptions(key) {
      var _ptm = key === "root" ? this.ptmi : this.ptm;
      return _ptm(key, {
        context: {
          disabled: this.disabled
        }
      });
    }
  },
  computed: {
    disabled: function disabled() {
      return this.$attrs.disabled || this.$attrs.disabled === "" || this.loading;
    },
    defaultAriaLabel: function defaultAriaLabel() {
      return this.label ? this.label + (this.badge ? " " + this.badge : "") : this.$attrs.ariaLabel;
    },
    hasIcon: function hasIcon() {
      return this.icon || this.$slots.icon;
    },
    attrs: function attrs() {
      return mergeProps(this.asAttrs, this.a11yAttrs, this.getPTOptions("root"));
    },
    asAttrs: function asAttrs() {
      return this.as === "BUTTON" ? {
        type: "button",
        disabled: this.disabled
      } : void 0;
    },
    a11yAttrs: function a11yAttrs() {
      return {
        "aria-label": this.defaultAriaLabel,
        "data-pc-name": "button",
        "data-p-disabled": this.disabled,
        "data-p-severity": this.severity
      };
    },
    hasFluid: function hasFluid() {
      return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;
    },
    dataP: function dataP() {
      return cn(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({}, this.size, this.size), "icon-only", this.hasIcon && !this.label && !this.badge), "loading", this.loading), "fluid", this.hasFluid), "rounded", this.rounded), "raised", this.raised), "outlined", this.outlined || this.variant === "outlined"), "text", this.text || this.variant === "text"), "link", this.link || this.variant === "link"), "vertical", (this.iconPos === "top" || this.iconPos === "bottom") && this.label));
    },
    dataIconP: function dataIconP() {
      return cn(_defineProperty2(_defineProperty2({}, this.iconPos, this.iconPos), this.size, this.size));
    },
    dataLabelP: function dataLabelP() {
      return cn(_defineProperty2(_defineProperty2({}, this.size, this.size), "icon-only", this.hasIcon && !this.label && !this.badge));
    }
  },
  components: {
    SpinnerIcon: script2,
    Badge: script3
  },
  directives: {
    ripple: Ripple
  }
};
var _hoisted_1 = ["data-p"];
var _hoisted_2 = ["data-p"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_SpinnerIcon = resolveComponent("SpinnerIcon");
  var _component_Badge = resolveComponent("Badge");
  var _directive_ripple = resolveDirective("ripple");
  return !_ctx.asChild ? withDirectives((openBlock(), createBlock(resolveDynamicComponent(_ctx.as), mergeProps({
    key: 0,
    "class": _ctx.cx("root"),
    "data-p": $options.dataP
  }, $options.attrs), {
    "default": withCtx(function() {
      return [renderSlot(_ctx.$slots, "default", {}, function() {
        return [_ctx.loading ? renderSlot(_ctx.$slots, "loadingicon", mergeProps({
          key: 0,
          "class": [_ctx.cx("loadingIcon"), _ctx.cx("icon")]
        }, _ctx.ptm("loadingIcon")), function() {
          return [_ctx.loadingIcon ? (openBlock(), createElementBlock("span", mergeProps({
            key: 0,
            "class": [_ctx.cx("loadingIcon"), _ctx.cx("icon"), _ctx.loadingIcon]
          }, _ctx.ptm("loadingIcon")), null, 16)) : (openBlock(), createBlock(_component_SpinnerIcon, mergeProps({
            key: 1,
            "class": [_ctx.cx("loadingIcon"), _ctx.cx("icon")],
            spin: ""
          }, _ctx.ptm("loadingIcon")), null, 16, ["class"]))];
        }) : renderSlot(_ctx.$slots, "icon", mergeProps({
          key: 1,
          "class": [_ctx.cx("icon")]
        }, _ctx.ptm("icon")), function() {
          return [_ctx.icon ? (openBlock(), createElementBlock("span", mergeProps({
            key: 0,
            "class": [_ctx.cx("icon"), _ctx.icon, _ctx.iconClass],
            "data-p": $options.dataIconP
          }, _ctx.ptm("icon")), null, 16, _hoisted_1)) : createCommentVNode("", true)];
        }), createBaseVNode("span", mergeProps({
          "class": _ctx.cx("label")
        }, _ctx.ptm("label"), {
          "data-p": $options.dataLabelP
        }), toDisplayString(_ctx.label || " "), 17, _hoisted_2), _ctx.badge ? (openBlock(), createBlock(_component_Badge, {
          key: 2,
          value: _ctx.badge,
          "class": normalizeClass(_ctx.badgeClass),
          severity: _ctx.badgeSeverity,
          unstyled: _ctx.unstyled,
          pt: _ctx.ptm("pcBadge")
        }, null, 8, ["value", "class", "severity", "unstyled", "pt"])) : createCommentVNode("", true)];
      })];
    }),
    _: 3
  }, 16, ["class", "data-p"])), [[_directive_ripple]]) : renderSlot(_ctx.$slots, "default", {
    key: 1,
    "class": normalizeClass(_ctx.cx("root")),
    a11yAttrs: $options.a11yAttrs
  });
}
script4.render = render;

export {
  ButtonStyle,
  script4 as script
};
//# sourceMappingURL=chunk-BDWXHAJP.js.map
