import {
  script
} from "./chunk-V6YJU2U3.js";
import {
  BaseStyle
} from "./chunk-MDOBR2VR.js";
import {
  cn
} from "./chunk-BHXJDUN2.js";
import {
  createBaseVNode,
  createElementBlock,
  mergeProps,
  openBlock,
  renderSlot
} from "./chunk-P7XL4HGA.js";

// node_modules/@primeuix/styles/toggleswitch/index.mjs
var style = ({ dt: t }) => `
.p-toggleswitch {
    display: inline-block;
    width: ${t("toggleswitch.width")};
    height: ${t("toggleswitch.height")};
}

.p-toggleswitch-input {
    cursor: pointer;
    appearance: none;
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: 1;
    outline: 0 none;
    border-radius: ${t("toggleswitch.border.radius")};
}

.p-toggleswitch-slider {
    cursor: pointer;
    width: 100%;
    height: 100%;
    border-width: ${t("toggleswitch.border.width")};
    border-style: solid;
    border-color: ${t("toggleswitch.border.color")};
    background: ${t("toggleswitch.background")};
    transition: background ${t("toggleswitch.transition.duration")}, color ${t("toggleswitch.transition.duration")}, border-color ${t("toggleswitch.transition.duration")}, outline-color ${t("toggleswitch.transition.duration")}, box-shadow ${t("toggleswitch.transition.duration")};
    border-radius: ${t("toggleswitch.border.radius")};
    outline-color: transparent;
    box-shadow: ${t("toggleswitch.shadow")};
}

.p-toggleswitch-handle {
    position: absolute;
    top: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: ${t("toggleswitch.handle.background")};
    color: ${t("toggleswitch.handle.color")};
    width: ${t("toggleswitch.handle.size")};
    height: ${t("toggleswitch.handle.size")};
    inset-inline-start: ${t("toggleswitch.gap")};
    margin-block-start: calc(-1 * calc(${t("toggleswitch.handle.size")} / 2));
    border-radius: ${t("toggleswitch.handle.border.radius")};
    transition: background ${t("toggleswitch.transition.duration")}, color ${t("toggleswitch.transition.duration")}, inset-inline-start ${t("toggleswitch.slide.duration")}, box-shadow ${t("toggleswitch.slide.duration")};
}

.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-slider {
    background: ${t("toggleswitch.checked.background")};
    border-color: ${t("toggleswitch.checked.border.color")};
}

.p-toggleswitch.p-toggleswitch-checked .p-toggleswitch-handle {
    background: ${t("toggleswitch.handle.checked.background")};
    color: ${t("toggleswitch.handle.checked.color")};
    inset-inline-start: calc(${t("toggleswitch.width")} - calc(${t("toggleswitch.handle.size")} + ${t("toggleswitch.gap")}));
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-slider {
    background: ${t("toggleswitch.hover.background")};
    border-color: ${t("toggleswitch.hover.border.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover) .p-toggleswitch-handle {
    background: ${t("toggleswitch.handle.hover.background")};
    color: ${t("toggleswitch.handle.hover.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-slider {
    background: ${t("toggleswitch.checked.hover.background")};
    border-color: ${t("toggleswitch.checked.hover.border.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:hover).p-toggleswitch-checked .p-toggleswitch-handle {
    background: ${t("toggleswitch.handle.checked.hover.background")};
    color: ${t("toggleswitch.handle.checked.hover.color")};
}

.p-toggleswitch:not(.p-disabled):has(.p-toggleswitch-input:focus-visible) .p-toggleswitch-slider {
    box-shadow: ${t("toggleswitch.focus.ring.shadow")};
    outline: ${t("toggleswitch.focus.ring.width")} ${t("toggleswitch.focus.ring.style")} ${t("toggleswitch.focus.ring.color")};
    outline-offset: ${t("toggleswitch.focus.ring.offset")};
}

.p-toggleswitch.p-invalid > .p-toggleswitch-slider {
    border-color: ${t("toggleswitch.invalid.border.color")};
}

.p-toggleswitch.p-disabled {
    opacity: 1;
}

.p-toggleswitch.p-disabled .p-toggleswitch-slider {
    background: ${t("toggleswitch.disabled.background")};
}

.p-toggleswitch.p-disabled .p-toggleswitch-handle {
    background: ${t("toggleswitch.handle.disabled.background")};
}
`;

// node_modules/primevue/toggleswitch/style/index.mjs
var inlineStyles = {
  root: {
    position: "relative"
  }
};
var classes = {
  root: function root(_ref) {
    var instance = _ref.instance, props = _ref.props;
    return ["p-toggleswitch p-component", {
      "p-toggleswitch-checked": instance.checked,
      "p-disabled": props.disabled,
      "p-invalid": instance.$invalid
    }];
  },
  input: "p-toggleswitch-input",
  slider: "p-toggleswitch-slider",
  handle: "p-toggleswitch-handle"
};
var ToggleSwitchStyle = BaseStyle.extend({
  name: "toggleswitch",
  style,
  classes,
  inlineStyles
});

// node_modules/primevue/toggleswitch/index.mjs
var script$1 = {
  name: "BaseToggleSwitch",
  "extends": script,
  props: {
    trueValue: {
      type: null,
      "default": true
    },
    falseValue: {
      type: null,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    tabindex: {
      type: Number,
      "default": null
    },
    inputId: {
      type: String,
      "default": null
    },
    inputClass: {
      type: [String, Object],
      "default": null
    },
    inputStyle: {
      type: Object,
      "default": null
    },
    ariaLabelledby: {
      type: String,
      "default": null
    },
    ariaLabel: {
      type: String,
      "default": null
    }
  },
  style: ToggleSwitchStyle,
  provide: function provide() {
    return {
      $pcToggleSwitch: this,
      $parentInstance: this
    };
  }
};
var script2 = {
  name: "ToggleSwitch",
  "extends": script$1,
  inheritAttrs: false,
  emits: ["change", "focus", "blur"],
  methods: {
    getPTOptions: function getPTOptions(key) {
      var _ptm = key === "root" ? this.ptmi : this.ptm;
      return _ptm(key, {
        context: {
          checked: this.checked,
          disabled: this.disabled
        }
      });
    },
    onChange: function onChange(event) {
      if (!this.disabled && !this.readonly) {
        var newValue = this.checked ? this.falseValue : this.trueValue;
        this.writeValue(newValue, event);
        this.$emit("change", event);
      }
    },
    onFocus: function onFocus(event) {
      this.$emit("focus", event);
    },
    onBlur: function onBlur(event) {
      var _this$formField$onBlu, _this$formField;
      this.$emit("blur", event);
      (_this$formField$onBlu = (_this$formField = this.formField).onBlur) === null || _this$formField$onBlu === void 0 || _this$formField$onBlu.call(_this$formField, event);
    }
  },
  computed: {
    checked: function checked() {
      return this.d_value === this.trueValue;
    },
    dataP: function dataP() {
      return cn({
        checked: this.checked,
        disabled: this.disabled,
        invalid: this.$invalid
      });
    }
  }
};
var _hoisted_1 = ["data-p-checked", "data-p-disabled", "data-p"];
var _hoisted_2 = ["id", "checked", "tabindex", "disabled", "readonly", "aria-checked", "aria-labelledby", "aria-label", "aria-invalid"];
var _hoisted_3 = ["data-p"];
var _hoisted_4 = ["data-p"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", mergeProps({
    "class": _ctx.cx("root"),
    style: _ctx.sx("root")
  }, $options.getPTOptions("root"), {
    "data-p-checked": $options.checked,
    "data-p-disabled": _ctx.disabled,
    "data-p": $options.dataP
  }), [createBaseVNode("input", mergeProps({
    id: _ctx.inputId,
    type: "checkbox",
    role: "switch",
    "class": [_ctx.cx("input"), _ctx.inputClass],
    style: _ctx.inputStyle,
    checked: $options.checked,
    tabindex: _ctx.tabindex,
    disabled: _ctx.disabled,
    readonly: _ctx.readonly,
    "aria-checked": $options.checked,
    "aria-labelledby": _ctx.ariaLabelledby,
    "aria-label": _ctx.ariaLabel,
    "aria-invalid": _ctx.invalid || void 0,
    onFocus: _cache[0] || (_cache[0] = function() {
      return $options.onFocus && $options.onFocus.apply($options, arguments);
    }),
    onBlur: _cache[1] || (_cache[1] = function() {
      return $options.onBlur && $options.onBlur.apply($options, arguments);
    }),
    onChange: _cache[2] || (_cache[2] = function() {
      return $options.onChange && $options.onChange.apply($options, arguments);
    })
  }, $options.getPTOptions("input")), null, 16, _hoisted_2), createBaseVNode("div", mergeProps({
    "class": _ctx.cx("slider")
  }, $options.getPTOptions("slider"), {
    "data-p": $options.dataP
  }), [createBaseVNode("div", mergeProps({
    "class": _ctx.cx("handle")
  }, $options.getPTOptions("handle"), {
    "data-p": $options.dataP
  }), [renderSlot(_ctx.$slots, "handle", {
    checked: $options.checked
  })], 16, _hoisted_4)], 16, _hoisted_3)], 16, _hoisted_1);
}
script2.render = render;

// node_modules/primevue/inputswitch/index.mjs
var script3 = {
  name: "InputSwitch",
  "extends": script2,
  mounted: function mounted() {
    console.warn("Deprecated since v4. Use ToggleSwitch component instead.");
  }
};

export {
  ToggleSwitchStyle,
  script2 as script,
  script3 as script2
};
//# sourceMappingURL=chunk-XQTFVTM6.js.map
