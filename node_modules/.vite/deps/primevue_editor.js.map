{
  "version": 3,
  "sources": ["../../src/editor/style/EditorStyle.js", "../../src/editor/BaseEditor.vue", "../../src/editor/Editor.vue", "../../src/editor/Editor.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/editor';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ instance }) => [\n        'p-editor',\n        {\n            'p-invalid': instance.$invalid\n        }\n    ],\n    toolbar: 'p-editor-toolbar',\n    content: 'p-editor-content'\n};\n\nexport default BaseStyle.extend({\n    name: 'editor',\n    style,\n    classes\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport EditorStyle from 'primevue/editor/style';\n\nexport default {\n    name: 'BaseEditor',\n    extends: BaseEditableHolder,\n    props: {\n        placeholder: String,\n        readonly: Boolean,\n        formats: Array,\n        editorStyle: null,\n        modules: null\n    },\n    style: EditorStyle,\n    provide() {\n        return {\n            $pcEditor: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div ref=\"toolbarElement\" :class=\"cx('toolbar')\" v-bind=\"ptm('toolbar')\">\n            <slot name=\"toolbar\">\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <select class=\"ql-header\" defaultValue=\"0\" v-bind=\"ptm('header')\">\n                        <option value=\"1\" v-bind=\"ptm('option')\">Heading</option>\n                        <option value=\"2\" v-bind=\"ptm('option')\">Subheading</option>\n                        <option value=\"0\" v-bind=\"ptm('option')\">Normal</option>\n                    </select>\n                    <select class=\"ql-font\" v-bind=\"ptm('font')\">\n                        <option v-bind=\"ptm('option')\"></option>\n                        <option value=\"serif\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"monospace\" v-bind=\"ptm('option')\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-bold\" type=\"button\" v-bind=\"ptm('bold')\"></button>\n                    <button class=\"ql-italic\" type=\"button\" v-bind=\"ptm('italic')\"></button>\n                    <button class=\"ql-underline\" type=\"button\" v-bind=\"ptm('underline')\"></button>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <select class=\"ql-color\" v-bind=\"ptm('color')\"></select>\n                    <select class=\"ql-background\" v-bind=\"ptm('background')\"></select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-list\" value=\"ordered\" type=\"button\" v-bind=\"ptm('list')\"></button>\n                    <button class=\"ql-list\" value=\"bullet\" type=\"button\" v-bind=\"ptm('list')\"></button>\n                    <select class=\"ql-align\" v-bind=\"ptm('select')\">\n                        <option defaultValue v-bind=\"ptm('option')\"></option>\n                        <option value=\"center\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"right\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"justify\" v-bind=\"ptm('option')\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-link\" type=\"button\" v-bind=\"ptm('link')\"></button>\n                    <button class=\"ql-image\" type=\"button\" v-bind=\"ptm('image')\"></button>\n                    <button class=\"ql-code-block\" type=\"button\" v-bind=\"ptm('codeBlock')\"></button>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-clean\" type=\"button\" v-bind=\"ptm('clean')\"></button>\n                </span>\n            </slot>\n        </div>\n        <div ref=\"editorElement\" :class=\"cx('content')\" :style=\"editorStyle\" v-bind=\"ptm('content')\"></div>\n    </div>\n</template>\n\n<script>\nimport { isExist } from '@primeuix/utils/dom';\nimport BaseEditor from './BaseEditor.vue';\n\nconst QuillJS = (function () {\n    try {\n        return window.Quill;\n    } catch {\n        return null;\n    }\n})();\n\nexport default {\n    name: 'Editor',\n    extends: BaseEditor,\n    inheritAttrs: false,\n    emits: ['text-change', 'selection-change', 'load'],\n    quill: null,\n    watch: {\n        modelValue(newValue, oldValue) {\n            if (newValue !== oldValue && this.quill && !this.quill.hasFocus()) {\n                this.renderValue(newValue);\n            }\n        },\n        readonly() {\n            this.handleReadOnlyChange();\n        }\n    },\n    mounted() {\n        const configuration = {\n            modules: {\n                toolbar: this.$refs.toolbarElement,\n                ...this.modules\n            },\n            readOnly: this.readonly,\n            theme: 'snow',\n            formats: this.formats,\n            placeholder: this.placeholder\n        };\n\n        if (QuillJS) {\n            // Loaded by script only\n            this.quill = new QuillJS(this.$refs.editorElement, configuration);\n            this.initQuill();\n            this.handleLoad();\n        } else {\n            import('quill')\n                .then((module) => {\n                    if (module && isExist(this.$refs.editorElement)) {\n                        if (module.default) {\n                            // webpack\n                            this.quill = new module.default(this.$refs.editorElement, configuration);\n                        } else {\n                            // parceljs\n                            this.quill = new module(this.$refs.editorElement, configuration);\n                        }\n\n                        this.initQuill();\n                    }\n                })\n                .then(() => {\n                    this.handleLoad();\n                });\n        }\n    },\n    beforeUnmount() {\n        this.quill = null;\n    },\n    methods: {\n        renderValue(value) {\n            if (this.quill) {\n                if (value) {\n                    const delta = this.quill.clipboard.convert({ html: value });\n                    this.quill.setContents(delta);\n                } else {\n                    this.quill.setText('');\n                }\n            }\n        },\n        initQuill() {\n            this.renderValue(this.d_value);\n\n            this.quill.on('text-change', (delta, oldContents, source) => {\n                if (source === 'user') {\n                    let html = this.quill.getSemanticHTML();\n                    let text = this.quill.getText().trim();\n\n                    if (html === '<p><br></p>') {\n                        html = '';\n                    }\n\n                    this.writeValue(html);\n                    this.$emit('text-change', {\n                        htmlValue: html,\n                        textValue: text,\n                        delta: delta,\n                        source: source,\n                        instance: this.quill\n                    });\n                }\n            });\n\n            this.quill.on('selection-change', (range, oldRange, source) => {\n                let html = this.quill.getSemanticHTML();\n                let text = this.quill.getText().trim();\n\n                this.$emit('selection-change', {\n                    htmlValue: html,\n                    textValue: text,\n                    range: range,\n                    oldRange: oldRange,\n                    source: source,\n                    instance: this.quill\n                });\n            });\n        },\n        handleLoad() {\n            if (this.quill && this.quill.getModule('toolbar')) {\n                this.$emit('load', { instance: this.quill });\n            }\n        },\n        handleReadOnlyChange() {\n            if (this.quill) this.quill.enable(!this.readonly);\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <div ref=\"toolbarElement\" :class=\"cx('toolbar')\" v-bind=\"ptm('toolbar')\">\n            <slot name=\"toolbar\">\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <select class=\"ql-header\" defaultValue=\"0\" v-bind=\"ptm('header')\">\n                        <option value=\"1\" v-bind=\"ptm('option')\">Heading</option>\n                        <option value=\"2\" v-bind=\"ptm('option')\">Subheading</option>\n                        <option value=\"0\" v-bind=\"ptm('option')\">Normal</option>\n                    </select>\n                    <select class=\"ql-font\" v-bind=\"ptm('font')\">\n                        <option v-bind=\"ptm('option')\"></option>\n                        <option value=\"serif\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"monospace\" v-bind=\"ptm('option')\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-bold\" type=\"button\" v-bind=\"ptm('bold')\"></button>\n                    <button class=\"ql-italic\" type=\"button\" v-bind=\"ptm('italic')\"></button>\n                    <button class=\"ql-underline\" type=\"button\" v-bind=\"ptm('underline')\"></button>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <select class=\"ql-color\" v-bind=\"ptm('color')\"></select>\n                    <select class=\"ql-background\" v-bind=\"ptm('background')\"></select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-list\" value=\"ordered\" type=\"button\" v-bind=\"ptm('list')\"></button>\n                    <button class=\"ql-list\" value=\"bullet\" type=\"button\" v-bind=\"ptm('list')\"></button>\n                    <select class=\"ql-align\" v-bind=\"ptm('select')\">\n                        <option defaultValue v-bind=\"ptm('option')\"></option>\n                        <option value=\"center\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"right\" v-bind=\"ptm('option')\"></option>\n                        <option value=\"justify\" v-bind=\"ptm('option')\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-link\" type=\"button\" v-bind=\"ptm('link')\"></button>\n                    <button class=\"ql-image\" type=\"button\" v-bind=\"ptm('image')\"></button>\n                    <button class=\"ql-code-block\" type=\"button\" v-bind=\"ptm('codeBlock')\"></button>\n                </span>\n                <span class=\"ql-formats\" v-bind=\"ptm('formats')\">\n                    <button class=\"ql-clean\" type=\"button\" v-bind=\"ptm('clean')\"></button>\n                </span>\n            </slot>\n        </div>\n        <div ref=\"editorElement\" :class=\"cx('content')\" :style=\"editorStyle\" v-bind=\"ptm('content')\"></div>\n    </div>\n</template>\n\n<script>\nimport { isExist } from '@primeuix/utils/dom';\nimport BaseEditor from './BaseEditor.vue';\n\nconst QuillJS = (function () {\n    try {\n        return window.Quill;\n    } catch {\n        return null;\n    }\n})();\n\nexport default {\n    name: 'Editor',\n    extends: BaseEditor,\n    inheritAttrs: false,\n    emits: ['text-change', 'selection-change', 'load'],\n    quill: null,\n    watch: {\n        modelValue(newValue, oldValue) {\n            if (newValue !== oldValue && this.quill && !this.quill.hasFocus()) {\n                this.renderValue(newValue);\n            }\n        },\n        readonly() {\n            this.handleReadOnlyChange();\n        }\n    },\n    mounted() {\n        const configuration = {\n            modules: {\n                toolbar: this.$refs.toolbarElement,\n                ...this.modules\n            },\n            readOnly: this.readonly,\n            theme: 'snow',\n            formats: this.formats,\n            placeholder: this.placeholder\n        };\n\n        if (QuillJS) {\n            // Loaded by script only\n            this.quill = new QuillJS(this.$refs.editorElement, configuration);\n            this.initQuill();\n            this.handleLoad();\n        } else {\n            import('quill')\n                .then((module) => {\n                    if (module && isExist(this.$refs.editorElement)) {\n                        if (module.default) {\n                            // webpack\n                            this.quill = new module.default(this.$refs.editorElement, configuration);\n                        } else {\n                            // parceljs\n                            this.quill = new module(this.$refs.editorElement, configuration);\n                        }\n\n                        this.initQuill();\n                    }\n                })\n                .then(() => {\n                    this.handleLoad();\n                });\n        }\n    },\n    beforeUnmount() {\n        this.quill = null;\n    },\n    methods: {\n        renderValue(value) {\n            if (this.quill) {\n                if (value) {\n                    const delta = this.quill.clipboard.convert({ html: value });\n                    this.quill.setContents(delta);\n                } else {\n                    this.quill.setText('');\n                }\n            }\n        },\n        initQuill() {\n            this.renderValue(this.d_value);\n\n            this.quill.on('text-change', (delta, oldContents, source) => {\n                if (source === 'user') {\n                    let html = this.quill.getSemanticHTML();\n                    let text = this.quill.getText().trim();\n\n                    if (html === '<p><br></p>') {\n                        html = '';\n                    }\n\n                    this.writeValue(html);\n                    this.$emit('text-change', {\n                        htmlValue: html,\n                        textValue: text,\n                        delta: delta,\n                        source: source,\n                        instance: this.quill\n                    });\n                }\n            });\n\n            this.quill.on('selection-change', (range, oldRange, source) => {\n                let html = this.quill.getSemanticHTML();\n                let text = this.quill.getText().trim();\n\n                this.$emit('selection-change', {\n                    htmlValue: html,\n                    textValue: text,\n                    range: range,\n                    oldRange: oldRange,\n                    source: source,\n                    instance: this.quill\n                });\n            });\n        },\n        handleLoad() {\n            if (this.quill && this.quill.getModule('toolbar')) {\n                this.$emit('load', { instance: this.quill });\n            }\n        },\n        handleReadOnlyChange() {\n            if (this.quill) this.quill.enable(!this.readonly);\n        }\n    }\n};\n</script>\n"],
  "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",
  "names": ["classes", "root", "_ref", "instance", "$invalid", "toolbar", "content", "BaseStyle", "extend", "name", "style", "name", "BaseEditableHolder", "props", "placeholder", "String", "readonly", "Boolean", "formats", "Array", "editorStyle", "modules", "style", "EditorStyle", "provide", "$pcEditor", "$parentInstance", "QuillJS", "window", "Quill", "_unused", "script", "BaseEditor", "inheritAttrs", "emits", "quill", "watch", "modelValue", "newValue", "oldValue", "hasFocus", "renderValue", "handleReadOnlyChange", "mounted", "_this", "configuration", "_objectSpread", "toolbar", "$refs", "toolbarElement", "readOnly", "theme", "editorElement", "initQuill", "handleLoad", "then", "module", "isExist", "beforeUnmount", "methods", "value", "delta", "clipboard", "convert", "html", "setContents", "setText", "_this2", "d_value", "on", "oldContents", "source", "getSemanticHTML", "text", "getText", "trim", "writeValue", "$emit", "htmlValue", "textValue", "instance", "range", "oldRange", "getModule", "enable", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "_createElementVNode", "ref", "ptm", "_renderSlot", "defaultValue", "type"]
}
