import {
  script
} from "./chunk-ZLV4SFZG.js";
import {
  BaseStyle
} from "./chunk-MDOBR2VR.js";
import {
  cn
} from "./chunk-BHXJDUN2.js";
import {
  createElementBlock,
  mergeProps,
  openBlock
} from "./chunk-P7XL4HGA.js";

// node_modules/@primeuix/styles/inputtext/index.mjs
var style = ({ dt: n }) => `
.p-inputtext {
    font-family: inherit;
    font-feature-settings: inherit;
    font-size: 1rem;
    color: ${n("inputtext.color")};
    background: ${n("inputtext.background")};
    padding-block: ${n("inputtext.padding.y")};
    padding-inline: ${n("inputtext.padding.x")};
    border: 1px solid ${n("inputtext.border.color")};
    transition: background ${n("inputtext.transition.duration")}, color ${n("inputtext.transition.duration")}, border-color ${n("inputtext.transition.duration")}, outline-color ${n("inputtext.transition.duration")}, box-shadow ${n("inputtext.transition.duration")};
    appearance: none;
    border-radius: ${n("inputtext.border.radius")};
    outline-color: transparent;
    box-shadow: ${n("inputtext.shadow")};
}

.p-inputtext:enabled:hover {
    border-color: ${n("inputtext.hover.border.color")};
}

.p-inputtext:enabled:focus {
    border-color: ${n("inputtext.focus.border.color")};
    box-shadow: ${n("inputtext.focus.ring.shadow")};
    outline: ${n("inputtext.focus.ring.width")} ${n("inputtext.focus.ring.style")} ${n("inputtext.focus.ring.color")};
    outline-offset: ${n("inputtext.focus.ring.offset")};
}

.p-inputtext.p-invalid {
    border-color: ${n("inputtext.invalid.border.color")};
}

.p-inputtext.p-variant-filled {
    background: ${n("inputtext.filled.background")};
}

.p-inputtext.p-variant-filled:enabled:hover {
    background: ${n("inputtext.filled.hover.background")};
}

.p-inputtext.p-variant-filled:enabled:focus {
    background: ${n("inputtext.filled.focus.background")};
}

.p-inputtext:disabled {
    opacity: 1;
    background: ${n("inputtext.disabled.background")};
    color: ${n("inputtext.disabled.color")};
}

.p-inputtext::placeholder {
    color: ${n("inputtext.placeholder.color")};
}

.p-inputtext.p-invalid::placeholder {
    color: ${n("inputtext.invalid.placeholder.color")};
}

.p-inputtext-sm {
    font-size: ${n("inputtext.sm.font.size")};
    padding-block: ${n("inputtext.sm.padding.y")};
    padding-inline: ${n("inputtext.sm.padding.x")};
}

.p-inputtext-lg {
    font-size: ${n("inputtext.lg.font.size")};
    padding-block: ${n("inputtext.lg.padding.y")};
    padding-inline: ${n("inputtext.lg.padding.x")};
}

.p-inputtext-fluid {
    width: 100%;
}
`;

// node_modules/primevue/inputtext/style/index.mjs
var classes = {
  root: function root(_ref) {
    var instance = _ref.instance, props = _ref.props;
    return ["p-inputtext p-component", {
      "p-filled": instance.$filled,
      "p-inputtext-sm p-inputfield-sm": props.size === "small",
      "p-inputtext-lg p-inputfield-lg": props.size === "large",
      "p-invalid": instance.$invalid,
      "p-variant-filled": instance.$variant === "filled",
      "p-inputtext-fluid": instance.$fluid
    }];
  }
};
var InputTextStyle = BaseStyle.extend({
  name: "inputtext",
  style,
  classes
});

// node_modules/primevue/inputtext/index.mjs
var script$1 = {
  name: "BaseInputText",
  "extends": script,
  style: InputTextStyle,
  provide: function provide() {
    return {
      $pcInputText: this,
      $parentInstance: this
    };
  }
};
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
var script2 = {
  name: "InputText",
  "extends": script$1,
  inheritAttrs: false,
  methods: {
    onInput: function onInput(event) {
      this.writeValue(event.target.value, event);
    }
  },
  computed: {
    attrs: function attrs() {
      return mergeProps(this.ptmi("root", {
        context: {
          filled: this.$filled,
          disabled: this.disabled
        }
      }), this.formField);
    },
    dataP: function dataP() {
      return cn(_defineProperty({
        invalid: this.$invalid,
        fluid: this.$fluid,
        filled: this.$variant === "filled"
      }, this.size, this.size));
    }
  }
};
var _hoisted_1 = ["value", "name", "disabled", "aria-invalid", "data-p"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("input", mergeProps({
    type: "text",
    "class": _ctx.cx("root"),
    value: _ctx.d_value,
    name: _ctx.name,
    disabled: _ctx.disabled,
    "aria-invalid": _ctx.$invalid || void 0,
    "data-p": $options.dataP,
    onInput: _cache[0] || (_cache[0] = function() {
      return $options.onInput && $options.onInput.apply($options, arguments);
    })
  }, $options.attrs), null, 16, _hoisted_1);
}
script2.render = render;

export {
  InputTextStyle,
  script2 as script
};
//# sourceMappingURL=chunk-4RA4QLWL.js.map
